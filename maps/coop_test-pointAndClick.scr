//Chrissstrahl - 23.05.2023 - Proof of Concept - Click and Point
//FINISHED BETA: 22.12.2023

//------------------------------------------------------------------------------
// DECLARATIONS
//------------------------------------------------------------------------------
void main();
void setupWorld();
void lurkerKilled();
void activateTeamMates();
void teamKilled();
void fountain();
void fishHitNode();
void lurkerKilled();


void coop_justBecameSpectator();
void coop_justDied();
void coop_justLeft();
void coop_justSpawned();
void coop_endLevel();

//pacSelector_player0
//movementmode -> actor/player?

float fFountainStatus = 1;
float fFishChangeSpeed = 0;
float lurkersKilled = 0;
float civilianBeamedOut = 0;


//------------------------------------------------------------------------------
// INCLUDES
// - this requires the inclusion of the hzm coop mod main script first
//------------------------------------------------------------------------------
#include "coop_mod/matrix/main.scr"
#include "coop_mod/matrix/pointAndClick.scr"

void main()
//------------------------------------------------------------------------------
// inizial function, started by the game
//------------------------------------------------------------------------------
{
	//------------------------------------------------------------------------------
	// SET COOP OBJECTIVES AND STUFF
	//------------------------------------------------------------------------------
	coop_string_levelAuthor = "Chrissstrahl";
	coop_bool_showMissionSucessHud	= 1;
	coop_string_objectiveItem1 = "Kill all Lurkers";
	coop_string_objectiveItem2 = "Do not allow any of your Teammates to die.";
	coop_string_objectiveItem3 = "Evacuate all Civilians, alive.";
	
	coop_string_objectiveTacticalInfo1	= "You can have Civilians beamed out at a location";
	coop_string_objectiveTacticalInfo3	= "This is a TEST and DEMO LEVEL";
	
	coop_string_objectiveItem4 = "RELOAD to zoom.";
	coop_string_objectiveItem5 = "FIRE to select a targeted unit.";
	coop_string_objectiveItem6 = "ALT-FIRE to move a selected unit to target.";
	coop_string_objectiveItem7 = "USE to activate Unit Special Ability.";
	coop_string_objectiveItem8 = "ALT-FIRE to place Special Ability.";
	
	//disable all challanges on point and click maps
	challengesDisabled(1);


	//------------------------------------------------------------------------------
	// WAIT FOR ANY PLAYER TO ENTER THE GAME
	//------------------------------------------------------------------------------
	waitForPlayer();
	
	thread setupWorld();

	//------------------------------------------------------------------------------
	// SETUP INTERACTIVE ENTITIES - player can select them to obtein more info - actors can walk to them
	//------------------------------------------------------------------------------
	coop_pacInteractive($patternEnhancher0);
	coop_pacInteractive($patternEnhancher1);
	coop_pacInteractive($patternEnhancher2);
	coop_pacInteractive($patternEnhancher3);
	coop_pacInteractive($bridge);
	coop_pacInteractive($fountain);
	coop_pacInteractive($plant1);
	coop_pacInteractive($plant2);
	coop_pacInteractive($plant3);
	coop_pacInteractive($controls);
	coop_pacInteractive($burstRiffle);	
	//allow setting waypoint to box easier
	coop_pacInteractive($klingonBox);
	coop_pacInteractive($klingonBox1);
	//allow to enter the building easier
	coop_pacInteractive($enterHelper0);
	coop_pacInteractive($enterHelper1);
	
	//------------------------------------------------------------------------------
	// SETUP SELECTABLE ENTITIES - Player can control them
	//------------------------------------------------------------------------------
	coop_pacSelectable($jurot);
	coop_pacSelectable($tuvok);
	coop_pacSelectable($picard);
	coop_pacSelectable($munro);
	coop_pacSelectable($civilian1);
	coop_pacSelectable($civilian2);
	coop_pacSelectable($civilian3);
	globalCoop_main_waitAFrame();
	
	//------------------------------------------------------------------------------
	// SET VALID ANIMATIONS FOR ACTIONS - allows to customize the animation a actor is using
	//Each actor has its own set of animations you can test them inside of Ãœberradiant and copy them here
	//------------------------------------------------------------------------------
	//use,pickup,crouch,scared,look,walk
	coop_pacSetAnimationFor($civilian2,"idle","conv-crossarms");
	coop_pacSetAnimationFor($civilian2,"use","push-button-open");
	coop_pacSetAnimationFor($civilian2,"pickup","conv-handflick-hellno");
	coop_pacSetAnimationFor($civilian2,"crouch","crouch_idle");
	coop_pacSetAnimationFor($civilian2,"scared","scared");
	coop_pacSetAnimationFor($civilian2,"look","conv-scratchingchin-thinking");
	coop_pacSetAnimationFor($civilian2,"walk","walk");

	coop_pacSetAnimationFor($civilian1,"use","conv-fingerup-warning");
	coop_pacSetAnimationFor($civilian1,"pickup","cin-m3_scan");
	coop_pacSetAnimationFor($civilian1,"crouch","cin-m3_toscan");
	coop_pacSetAnimationFor($civilian1,"scared","conv-embarrassment");
	coop_pacSetAnimationFor($civilian1,"look","cin-m3_greet");
	coop_pacSetAnimationFor($civilian1,"walk","walk");

	coop_pacSetAnimationFor($civilian3,"use","conv-fingerup-warning");
	coop_pacSetAnimationFor($civilian3,"pickup","cin-m3_scan");
	coop_pacSetAnimationFor($civilian3,"crouch","cin-m3_toscan");
	coop_pacSetAnimationFor($civilian3,"scared","conv-embarrassment");
	coop_pacSetAnimationFor($civilian3,"look","cin-m3_greet");
	coop_pacSetAnimationFor($civilian3,"walk","walk");
	
	//------------------------------------------------------------------------------
	// ABILITIES
	//------------------------------------------------------------------------------
	coop_pacSetAbility($jurot,"heal",1);
	coop_pacSetAbility($picard,"orbitalstrike",1);
	coop_pacSetAbility($munro,"awayteam",1);
	coop_pacSetAbility($tuvok,"mindmeld",1);
	coop_pacSetAnimationFor($jurot,"heal","conv-overthere");
	coop_pacSetAnimationFor($picard,"orbitalstrike","death");	//communicator
	coop_pacSetAnimationFor($munro,"awayteam","death");			//communicator	
	
	//------------------------------------------------------------------------------
	// ALLOW TO BEAM OUT
	//------------------------------------------------------------------------------	
	coop_pcSetBeamOutCapable($civilian1,1);
	coop_pcSetBeamOutCapable($civilian2,1);
	coop_pcSetBeamOutCapable($civilian3,1);
	
	//------------------------------------------------------------------------------
	// SET DIALOG TO PLAY WHEN SELECTED - "localization/" used for langaige neutral dialogs in:
	//	base/locpak1.pk3/loc/Deu/sound/dialog/
	//	base/locpak1.pk3/loc/Eng/sound/dialog/
	//------------------------------------------------------------------------------
	coop_pacSetDialog($jurot,"localization/sound/dialog/m7l1/jurot_holdstill.mp3","heal");
	coop_pacSetDialog($munro,"localization/sound/dialog/dm/mp_munro1.mp3","awayteam");
	coop_pacSetDialog($tuvok,"localization/sound/dialog/train2/tuvok_gluck.mp3","mindmeld");
	
	coop_pacSetDialog($jurot,"localization/sound/dialog/combat/jurot_brinon.mp3","select");
	coop_pacSetDialog($munro,"localization/sound/dialog/train1/munro_dothis.mp3","select");
	coop_pacSetDialog($tuvok,"localization/sound/dialog/train1/tuvok_excelgo.mp3","select");
	coop_pacSetDialog($picard,"localization/sound/dialog/dm/mp_picard1.mp3","select");
	//coop_pacSetDialog($civilian1,"localization/sound/dialog/m11l3/kleeya_ihope.mp3","select");
	coop_pacSetDialog($civilian1,"localization/sound/dialog/m2l1/cadet1_stories.mp3","select");
	coop_pacSetDialog($civilian2,"localization/sound/dialog/m7l1/attrexf1_stayclose.mp3","select");
	coop_pacSetDialog($civilian3,"localization/sound/dialog/ent_m7/omag_aboutme.mp3","select");


	//------------------------------------------------------------------------------
	// MAKE SURE THESE ACTORS ARE IGNORED AT THE START
	//------------------------------------------------------------------------------
	coop_pacSetValidTarget($jurot,0);
	coop_pacSetValidTarget($tuvok,0);
	coop_pacSetValidTarget($munro,0);
	coop_pacSetValidTarget($picard,0);
	
	//------------------------------------------------------------------------------
	// SETUP ACTOR TYPES - if they are not already setup by default as we need them
	////monster,enemy,civilian,friend,animal,teammate
	//------------------------------------------------------------------------------
	$civilian1.actortype("teammate");
	$civilian2.actortype("teammate");
	$civilian3.actortype("teammate");
	
	//------------------------------------------------------------------------------
	// FAIL MISSION IF THEY GET KILLED
	//------------------------------------------------------------------------------	
	coop_pacFailOnDeath($civilian1,1,"$$YouLostCivilian$$");
	coop_pacFailOnDeath($civilian2,1,"$$YouLostCivilian$$");
	coop_pacFailOnDeath($civilian3,1,"$$YouLostCivilian$$");
	
	//------------------------------------------------------------------------------
	// SET HEALTH FOR ACTORS
	//------------------------------------------------------------------------------
	coop_pacSetStartHealth($jurot,150);
	coop_pacSetStartHealth($picard,150);
	coop_pacSetStartHealth($munro,150);
	coop_pacSetStartHealth($tuvok,150);
	
	coop_pacSetStartHealth($civillian1,5);
	coop_pacSetStartHealth($civillian2,150);
	coop_pacSetStartHealth($civillian3,25);
	
	//also ignore the monsters
	float fMonster;
	entity eMonster;
	for(fMonster = 1;fMonster<7;fMonster++){
		eMonster = getEntity("lurker"+fMonster);
		if(doesEntityExist(eMonster)){			
			coop_pacSetValidTarget(eMonster,1);
			eMonster.anim("dead_ontable"); //thisway they don't make noises :D
			coop_pacSetValidTarget(eMonster,0);
			coop_pacSetStartHealth(eMonster,100);
			//intube,landing,land,spotted_target,takeoff,taunt,twitch1,twitch2,alert,crash
			//eMonster.actortype("animal"); }//TEST - team ai does not attack animals
		}
	}
	
	//------------------------------------------------------------------------------
	// SET OBJECTIVES - to active/incomplete
	//------------------------------------------------------------------------------
	globalCoop_objectives_set("Kill all Lurkers...","incomplete",1,1);
	globalCoop_objectives_set("No one of your team must die!","incomplete",2,1);
	globalCoop_objectives_set("Civilians must not die!","incomplete",3,1);
	
	//BASICALLY THE TUTORIAL
	string sStatus;
	sStatus = "complete";//failed
	globalCoop_objectives_set("Press FIRE to select a unit.",sStatus,4,1);
	globalCoop_objectives_set("Press FIRE to select a unit.",sStatus,5,1);
	globalCoop_objectives_set("Press ALT-FIRE to move a selected unit.",sStatus,6,1);
	globalCoop_objectives_set("Press USE to activate Unit Special Ability.",sStatus,7,1);
	globalCoop_objectives_set("Press ALT-FIRE to place Special Ability.",sStatus,8,1);
	
	//------------------------------------------------------------------------------
	// TEST STUFF - THIS SHOULD BE REMOVED WHEN DONE
	//------------------------------------------------------------------------------
	/*
	$munro.health(5);
	$tuvok.health(5);
	$picard.health(5);
	$jurot.health(5);
	$civilian1.health(5);
	$civilian2.health(5);
	$civilian3.health(5);
	*/
}

void setupWorld()
//------------------------------------------------------------------------------
//executed by trigger, activates teammates ai if it is and other actor than one of them self stepping into the trigger
//------------------------------------------------------------------------------
{
	//------------------------------------------------------------------------------
	// SHOW AS MISSION OBJECTIVE MARKED ON LEVEL
	//------------------------------------------------------------------------------
	$beamOut1.missionobjective(1);

	//------------------------------------------------------------------------------
	// CLOSE MONSTER HOLE UP - Needed to be notsolid for pathnodes to connect on level start
	//------------------------------------------------------------------------------
	$fish.notsolid();
	$fish.anim( "idle" );
	$fish.followpath( $t13 , "loop" , "normalangles" );
	
	//------------------------------------------------------------------------------
	// CLOSE MONSTER HOLE UP - Needed to be notsolid for pathnodes to connect on level start
	//------------------------------------------------------------------------------
	$wakeupMonsterClip.solid();

	//------------------------------------------------------------------------------
	// SET START SOUND FOR FOUNTAIN
	//------------------------------------------------------------------------------
	$fountainEffect.loopsound("sound/environment/water/fount1.wav");
	
	//------------------------------------------------------------------------------
	// SET MOVEMENT SPEED FOR PLAYERS
	//------------------------------------------------------------------------------
	wait(1);
	$world.physicsVar("maxSpeed",800);	
}

void activateTeamMates()
//------------------------------------------------------------------------------
//executed by trigger, activates teammates ai if it is and other actor than one of them self stepping into the trigger
//------------------------------------------------------------------------------
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		entity eActivator;
		eActivator = eTrigger.getLastActivatingEntity();
		if(doesEntityExist(eActivator)){
			string sTargetname;
			sTargetname = eActivator.getTargetname();
			if(sTargetname != "$munro" && sTargetname != "$tuvok" && sTargetname != "$picard" && sTargetname != "$jurot"){
				coop_pacActivateUnit($munro);
				coop_pacActivateUnit($picard);
				coop_pacActivateUnit($tuvok);
				coop_pacActivateUnit($jurot);
				eTrigger.remove();
				//$player0.hudprint("ai activated\n");
			}
		}
	}
}

void teamKilled()
//------------------------------------------------------------------------------
//executed each time a teammember is killed
//See actor in Ãœberradiant -> key:killthread value:teamKilled
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_failWithReason("$$YouLostTeamMate$$");
}

void lurkerKilled()
//------------------------------------------------------------------------------
//executed each time a lurker is killed
//See actor in Ãœberradiant -> key:killthread value:lurkerKilled
//------------------------------------------------------------------------------
{
	//count up until a limit is hit opr exceeded
	lurkersKilled++;
	if(lurkersKilled == 6){
		globalCoop_objectives_set(coop_string_objectiveItem1,"complete",1,1);
	}
}

void beamOutCivilian()
//------------------------------------------------------------------------------
//a civilian was beamed out succsessfully
//------------------------------------------------------------------------------
{
	civilianBeamedOut++;
	if(civilianBeamedOut == 3){
		globalCoop_objectives_set(coop_string_objectiveItem2,"complete",2,1);
		globalCoop_objectives_set(coop_string_objectiveItem3,"complete",3,1);
		wait(3);
		coop_endLevel();
	}
}

void wakeupMonster()
//------------------------------------------------------------------------------
//wakeup monsters
//------------------------------------------------------------------------------
{
	$wakeupMonsterClip.remove();
	
	if(doesEntityExist($turret1)){
		$turret1.ai_on();
	}
	
	float fLurkers = 6;
	entity eLurk;
	eLurk = getEntity("lurker"+fLurkers);
	while(fLurkers > 0){
		if(doesEntityExist(eLurk)){
			eLurk.ai_off();
			coop_pacSetValidTarget(eLurk,1);
			eLurk.walkTo("lurker","run");
			waitFor(eLurk);
			if(doesEntityExist(eLurk) == 1 && eLurk.getHealth() > 0){
				eLurk.ai_on();
			}
		}
		fLurkers--;
		eLurk = getEntity("lurker"+fLurkers);
		wait(1);
	}
}

void fountain()
//------------------------------------------------------------------------------
//toggles fountain
//------------------------------------------------------------------------------
{
	float fSpeed;
	//toggle
	if(fFountainStatus == 1){
		$fountainEffect.scale(0.2);
		$fountainEffect.stopLoopSound();
		fSpeed = 0.2;
		fFountainStatus=0;
	}else{
		$fountainEffect.scale(1);
		$fountainEffect.loopsound("sound/environment/water/fount1.wav");
		fSpeed = 1;
		fFountainStatus=1;
	}
	if(doesEntityExist($fountainWater)){
		triggerEntity($fountainWater);
	}

	//-----------------------
	// change fish speed
	//-----------------------
	entity ePath;
	entity ePathTarget;
	string sTargetname;
	string sTargetnameStart;
	float fItterations;
	sTargetnameStart = "t2";
	ePath = getEntity("t2");
	while(doesEntityExist(ePath)){
		ePath.speed(fSpeed);
		ePathTarget = ePath.getTargetEntity();
		sTargetname = ePath.getTarget();
		//ePath.selfdetonate();
		ePath = $NULL;
		if(doesEntityExist(ePathTarget)){
			if(sTargetname != sTargetnameStart || fItterations == 0 ){
				ePath = ePathTarget;
			}
		}
		fItterations++;
	}
	//give go signal for function fishHitNode()
	fFishChangeSpeed=1;
}

void fishHitNode()
//------------------------------------------------------------------------------
//is fired by the fish if it passes a node - restart fish loop to applay the new speeds of the path
//------------------------------------------------------------------------------
{
	entity eActivator;
	eActivator = getCurrentEntity();
	if(fFishChangeSpeed == 1){
		fFishChangeSpeed=0;
		entity eNode;
		eNode = globalCoop_return_closestNodeFromPath(eActivator,$t13);
		eActivator.followpath( eNode , "loop" , "normalangles" );
	}
}

void killTest()
//------------------------------------------------------------------------------
//KILL TEST
//------------------------------------------------------------------------------
{
	//$player0.hudprint("killtest\n");
	//$player.hudprint("killtest\n");
}

void coop_justBecameSpectator()
//------------------------------------------------------------------------------
//executed by coop if player enters spectator
//------------------------------------------------------------------------------
{
	coop_pacJustLeft(getCurrentEntity());
}

void coop_justDied()
//------------------------------------------------------------------------------
//executed by coop if player just died
//------------------------------------------------------------------------------
{
	coop_pacJustLeft(getCurrentEntity());
}

void coop_justLeft()
//------------------------------------------------------------------------------
//executed by coop if player just left
//------------------------------------------------------------------------------
{
	coop_pacJustLeft(getCurrentEntity());
}

void coop_justSpawned()
//------------------------------------------------------------------------------
//executed by coop if player enters map/server
//------------------------------------------------------------------------------
{
	coop_pacJustEntered(getCurrentEntity());
}

void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
//credits, and history of map
//mark this map as completed to the scripts (can not fail anymore)
	globalCoop_mission_accomplished();
	globalCoop_main_globalCommand("nodamage");
	
	wait(3);

	//end server if in singleplayer
	if(getCvarInt("g_gametype") == 0){
		stuffcmd("disconnect\n");
		return;
	}
	
	//[b60025] chrissstrahl - used for automatic level script diagnose
	if(getCvarInt("coop_dev") == 1){
		if(getCvarInt("coop_diag") == 1){
			coop_string_nextMapToCheck = "coop_test-ranks";
			thread globalCoop_mission_completed(coop_string_nextMapToCheck);
			return;
		}
	}
	
//load next map
	thread globalCoop_mission_completed("coop_test-pointAndClick");
}