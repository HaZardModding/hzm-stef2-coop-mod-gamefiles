//This script contains the code for the lift, use as you please
//This script contains the code for the lift, use as you please
//This script contains the code for the lift, use as you please
//------------------------------------------------------------------------------
//	Code related to Turbolifts
//------------------------------------------------------------------------------

//Global Variables, can be accessed by all Functions/scriptfiles
//if definied outside a function, just like this
////////////////////////////////////////////////////////////////////////////////


//declaration
////////////////////////////////////////////////////////////////////////////////
void turbolift_playerSetOriginAndAngle(float fClient,vector vCurrentOrigin,vector vTargetOrigin,vector vCurrentAngle,vector vTargetAngle);
void turbolift_travelFromTo(entity ePlayer, string sStartLift, string sTargetLift, string sAlternativeTarget);
void turbolift_uiDisableWidget(entity ePlayer, string sTargetname);


//TARGETNAMES FOR TURBOLIFTS
// - A Turbolift has 3 Parts Parts 1 and 2 are required, 3 is optinal: 1=Trigger, 2=Origin, 3=Doors
// - The targetnames are expected to be like:
// myLift123		//Trigger, which the player must use to see the menu (this determins also the basetargetname)
// myLift123_origin	//Origin, this is the location and orientation marker of the lift (you need to rotate it towards the exact middle of the door in all lifts - use r in radiant)
// myLift123_doors	//Doors, this are the Doors of the lift
// myLift123_symbol	//Symbol, this used to indicate the location of the trigger. This is hidden once the menu is active and shown again when it is not

//YOU NEED TO SET THE FOLLOWING ATTRIBUTES ON EACH TURBOLIFT TRIGGER:
// - targetname, set a unuiqe targetname for each lift trigger (see above for the names: TARGETNAMES FOR TURBOLIFTS)
// - thread, set the thread to mom_basic, this will make mom show the menu to player
// - uservar1, set the uservar1 to the name of the UI/MENU you want to use, this is OPTIONAL
// - uservar2, set the uservar2 to mom_turbolift, this will make mom use the Turbolift Scripts


void turbolift_uiDisableWidget(entity ePlayer, string sTargetname)
//------------------------------------------------------------------------------
//	disabled the button in the turbolift menu if it can not be used on this deck
// for example if you select turbolift 1 but you are already in it
//------------------------------------------------------------------------------
{
	if(!doesEntityExist(ePlayer)){
		return;
	}

	float fWidgetButtonNumber;
	if(sTargetname == "deck1Turbolift0"){ fWidgetButtonNumber = 0; } //deck 1 bridge left
	else if(sTargetname == "deck1Turbolift1"){ fWidgetButtonNumber = 1; } //deck 1 bridge right
	else if(sTargetname == "deck7Turbolift0"){ fWidgetButtonNumber = 2; } //deck 7 shuttlebay
	else if(sTargetname == "deck7Turbolift1"){ fWidgetButtonNumber = 3; } //deck 7 Crew
	else if(sTargetname == "deck7Turbolift2"){ fWidgetButtonNumber = 4; } //deck 7 Hazardops
	else if(sTargetname == "deck8Turbolift0"){ fWidgetButtonNumber = 5; } //deck 8 transporter
	else if(sTargetname == "deck8Turbolift1"){ fWidgetButtonNumber = 6; } //deck 8 armory + sickbay
	else if(sTargetname == "deck11Turbolift"){ fWidgetButtonNumber = 7; } //deck 11 astometry
	else if(sTargetname == "deck16Turbolift"){ fWidgetButtonNumber = 8; } //deck 16 Engeniering
	
	string sWidgetCmd;
	sWidgetCmd = "ente_turbolift"+fWidgetButtonNumber+"Text";
	
	//debug
	//ePlayer.hudprint("Turbolift ("+sTargetname+"): "+sWidgetCmd+"\n");
	
	//disable widget for player in turbolift menu - will be reactivated by the menu it self
	globalCoop_player_transmitter(ePlayer,"globalwidgetcommand "+sWidgetCmd+" disable\n");
}

void mom_turbolift()
//------------------------------------------------------------------------------
//	This is executed when the player uses a turbolift trigger 
//------------------------------------------------------------------------------
{
	entity eTrigger;
	entity ePlayer;
	eTrigger = getCurrentEntity();
	ePlayer = mom_returnPlayerForTrigger(eTrigger);
	
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");	
	
	//ePlayer.hudprint(sBasename+" targetname \n");
	
	turbolift_uiDisableWidget(ePlayer,sBasename);
}

//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....
//FALLBACK TO USE _origin _door _symbol ....

void mom_turbolift_Zero()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 0 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");	
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck1Turbolift0","deck1Turbolift1");
}

void mom_turbolift_One()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 1 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer,eTrigger;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");	
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck1Turbolift1","deck1Turbolift0");
}

void mom_turbolift_Two()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 2 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");	
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck7Turbolift0","deck7Turbolift1");
}

void mom_turbolift_Three()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 3 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");	
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck7Turbolift1","deck7Turbolift2");
}

void mom_turbolift_Four()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 4 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");	
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck7Turbolift2","deck7Turbolift1");
}

void mom_turbolift_Five()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 5 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck8Turbolift0","deck8Turbolift1");
}

void mom_turbolift_Six()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 6 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck8Turbolift1","deck1Turbolift0");
}

void mom_turbolift_Seven()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 7 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck11Turbolift","");
}

void mom_turbolift_Eight()
//------------------------------------------------------------------------------
//	This is executed when the player uses button 8 in multioptions menu
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	if(!globalCoop_check_existingLivingEntity(ePlayer)){ return; }
	string sBasename;
	sBasename = ePlayer.getStringVar("mom_entityBasename");
////PLAYER,CURRENTLIFT,TARGETLIFT(required),ALTERNATIVE-TARGETLIFT(optional)
	//Parameter3=Targetlift
	//Parameter4=Alternative Targetlift if first Targetlift is busy
	turbolift_travelFromTo(ePlayer,sBasename,	"deck16Turbolift","");
}
















//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// DO NOT CHANGE STUFF BEJOND THIS POINT UNLESS YOU ARE REALLY SURE
// DO NOT CHANGE STUFF BEJOND THIS POINT UNLESS YOU ARE REALLY SURE
// DO NOT CHANGE STUFF BEJOND THIS POINT UNLESS YOU ARE REALLY SURE
// DO NOT CHANGE STUFF BEJOND THIS POINT UNLESS YOU ARE REALLY SURE
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void turbolift_playerSetOriginAndAngle(float fClient,vector vCurrentOrigin,vector vTargetOrigin,vector vCurrentAngle,vector vTargetAngle)
{
//create variables
	float fTurnAmount,fOffsetAngle,fTmp1,fTmp2;
	vector vPlayer,vPlayerNew,vOffset;
	entity ePlayer;
	
	ePlayer=getEntity("*"+fClient);
	
	if(!globalCoop_check_existingLivingEntity(ePlayer))
	{
		return;
	}

//get player origin
	vPlayer = ePlayer.getOrigin();
	
//get angle to turn player/vector
	fTurnAmount = globalMath_GetCircularDistanceInDegrees(vCurrentAngle_y,vTargetAngle_y);

//debug info
	//ePlayer.hudprint("Circular degree: "+fTurnAmount+" - "+vCurrentAngle_y+":"+vTargetAngle_y+"\n");
	//ePlayer.hudprint("Distance start: "+vectorlength(vPlayer - vCurrentOrigin)+"\n");
	
//calculate vector offset
	vOffset	= (vPlayer-vCurrentOrigin);

//calculate angular offset to new lift - perhaps
	fOffsetAngle = (arctandegrees(vOffset_y, vOffset_x) + fTurnAmount);
	
//calculate the offset

	vector vOffsets; //debug printout

	fTmp1			= vectorlength(vOffset);
	fTmp2			= fTmp1 * cosdegrees(fOffsetAngle);
	
	//make sure the player does not get stuck in the egde of a
	//turbolift interior by making sure they are not to far away from the center origin
	float fMaxOffsetForCenter;
	fMaxOffsetForCenter = 44; //46
	if(fTmp2 > fMaxOffsetForCenter){ fTmp2 = fMaxOffsetForCenter; }
	else if(fTmp2 < (fMaxOffsetForCenter * -1)){ fTmp2 = (fMaxOffsetForCenter * -1);}
	
	vPlayerNew_x	= vTargetOrigin_x + fTmp2;
	vOffsets_x = fTmp2;
	
	fTmp2			= fTmp1 * sindegrees(fOffsetAngle);
	
	//make sure the player does not get stuck in the egde of a
	//turbolift interior by making sure they are not to far away from the center origin
	// - not sure if this is really needed
	if(fTmp2 > fMaxOffsetForCenter){ fTmp2 = fMaxOffsetForCenter; }
	else if(fTmp2 < (fMaxOffsetForCenter * -1)){ fTmp2 = (fMaxOffsetForCenter * -1);}
		
	vOffsets_y		= fTmp2;
	vPlayerNew_y	= vTargetOrigin_y + fTmp2;
	vPlayerNew_z	= vTargetOrigin_z + vOffset_z;
	
	//debug info
	//ePlayer.hudprint("Distance end: "+vectorlength(vPlayerNew - vTargetOrigin)+"\n");	
	//if(vectorlength(vPlayerNew - vTargetOrigin) > fMaxOffsetForCenter){
		//ePlayer.hudprint("Exceeded "+fMaxOffsetForCenter+" distance offset\n"); //debugprint
	//}
	//ePlayer.hudprint("Offsets for debug "+vOffsets+"\n"); //debugprint
	print("Offsets for Turbolift Ente debug "+vOffsets+"\n"); //debugprint
	
//move player to the new location and update viewangels
	ePlayer.notsolid();
	ePlayer.warp(vPlayerNew);	
	ePlayer.turn(fTurnAmount,0);
	thread globalCoop_player_makeSolidASAP(ePlayer);
	
	// stuffCMD("echo fOffsetAngle: "+fOffsetAngle+"\n");
	// stuffCMD("echo fTurnAmount: "+fTurnAmount+"\n\n");
	// stuffCMD("echo vCurrentOrigin: "+vCurrentOrigin+"\n");
	// stuffCMD("echo vTargetOrigin: "+vTargetOrigin+"\n");
	// stuffCMD("echo vPlayer: "+vPlayer+"\n");
	// stuffCMD("echo vOffset: "+vOffset+"\n");
	// stuffCMD("echo vPlayerNew: "+vPlayerNew+"\n");
	// stuffCMD("echo cosdegrees(fOffsetAngle): "+cosdegrees(fOffsetAngle)+"\n");
	// stuffCMD("echo sindegrees(fOffsetAngle)): "+sindegrees(fOffsetAngle)+"\n");
}

void turbolift_travelFromTo( entity ePlayer, string sStartLift,string sTargetLift,string sAlternativeTarget)
//void turbolift_travelFromTo(float fCurrentDeck,float fTargetDeck)
//lock the target lift location
{
	if(sStartLift == sTargetLift)
	{
		ePlayer.hudprint("You are already at this Location!\n");
		return;
	}

//lock target lift, so noone can enter it
	entity	eTargetLiftDoors,
			eTargetLift,
			eTargetLiftTrigger,
			eCurrentLiftDoors,
			eCurrentLift,
			eCurrentLiftTrigger,
			eTargetLiftAlt,
			eTargetLiftAltDoors,
			eTargetLiftTrigger;
	eCurrentLift		= getEntity(sStartLift+"_origin");
	eCurrentLiftTrigger	= getEntity(sStartLift);
	eCurrentLiftDoors	= getEntity(sStartLift+"_door");
	eTargetLift			= getEntity(sTargetLift+"_origin");
	eTargetLiftDoors	= getEntity(sTargetLift+"_door");
	eTargetLiftTrigger	= getEntity(sTargetLift);
	if(sAlternativeTarget != ""){
		eTargetLiftAlt		= getEntity(sAlternativeTarget+"_origin");
		eTargetLiftAltDoors	= getEntity(sAlternativeTarget+"_door");
	}
	
//This lift is now busy and can no longer be used or traveled to by others
	eCurrentLift.setFloatVar("mom_turboliftIsBusy",1);
	print("Ente Turbolift Travel from "+sStartLift+" to "+sTargetLift+".\n");
	
//Check if lifts exist
	if(!doesEntityExist(eCurrentLift)){
		ePlayer.hudprint("Starting Lift ("+sStartLift+"Origin) does not exist...\n");
		
//remove Menu from player screen
		thread mom_exitMenuPlayer(ePlayer);
		return;
	}
	if(!doesEntityExist(eTargetLift)){
		ePlayer.hudprint("Target Lift ("+sTargetLift+"Origin) does not exist...\n");
		if(sAlternativeTarget != ""){
			eTargetLift			= eTargetLiftAlt;
			eTargetLiftDoors	= eTargetLiftAltDoors;
			if(!doesEntityExist(eTargetLift)){
				ePlayer.hudprint("Alternative Target Lift ("+sTargetLift+"Origin) does not exist...\n");
				return;
			}
		}else{
			return;
		}
	}else if(eTargetLift.getFloatVar("mom_turboliftIsBusy") != 0){
		ePlayer.hudprint("Lift Busy trying to use Alternative ("+sAlternativeTarget+"Origin)...\n");
		eTargetLift			= eTargetLiftAlt;
		eTargetLiftDoors	= eTargetLiftAltDoors;
		if(eTargetLift.getFloatVar("mom_turboliftIsBusy") != 0){
			ePlayer.hudprint("Alternative Lift is also Busy right now ("+sAlternativeTarget+"Origin)...\n");
			ePlayer.hudprint("Please select a different destination...\n");
			return;
		}
	}
	
	//remove Menu from player screen, disable current Turbolift trigger
	mom_exitMenuPlayer(ePlayer);
	eCurrentLiftTrigger.thread("");//disable trigger this way, because mom overwrites trigger activation (by design)
	
	//disable targetlift
	eTargetLift.setFloatVar("mom_turboliftIsBusy",1);
	eTargetLiftTrigger.nottriggerable();
	
//lock lift doors, then close them
	if(doesEntityExist(eCurrentLiftDoors))
	{
		eCurrentLiftDoors.lock();
		eCurrentLiftDoors.close();
	}
	if(doesEntityExist(eTargetLiftDoors))
	{
		eTargetLiftDoors.lock();
		eTargetLiftDoors.lock();
		eTargetLiftDoors.close();
	}
//play travel sound on the current lift
	eCurrentLift.playsound("sound/ships/enterprise/ent_turbolift_run.wav",0,2,84);
	wait(3.9);
vector	vCurrentOrigin,
		vCurrentAngles,
		vTargetOrigin,
		vTargetAngles,
		vPlayerAngles,
		vPlayerLiftOffset,
		vPlayerOrigin;
float	fDifferenceLift,
		fDifferencePlayer;
	
	vCurrentOrigin	= eCurrentLift.getOrigin();
	vTargetOrigin	= eTargetLift.getOrigin();
	vCurrentAngles	= eCurrentLift.getAngles(); //Not working unless you have ATTRIBUTE angles set (use r to activate in radiant)
	vTargetAngles	= eTargetLift.getAngles(); //Not working unless you have ATTRIBUTE angles set (use r to activate in radiant)

	//purify data ^^
	vCurrentAngles_x	= (vCurrentAngles_z = 0);
	vTargetAngles_x		= (vTargetAngles_z = 0);

//warp players
	//print("xxxx:"+eTargetLift.getAngles()+"\n");

	float fClient,fMaxClients;
	fMaxClients = getCvarInt("sv_maxclients");
	for(fClient=0;fClient<fMaxClients;fClient++){
		entity ePlayer;
		ePlayer = getEntity("*"+fClient);
		if(globalCoop_check_existingLivingEntity(ePlayer)){
			if(ePlayer.isWithinDistanceOf(eCurrentLift,90)){
				//ePlayer.hudprint("data:"+vCurrentAngles+":"+vTargetAngles+"\n");
				thread turbolift_playerSetOriginAndAngle(fClient,vCurrentOrigin,vTargetOrigin,vCurrentAngles,vTargetAngles);
			}
		}
	}
	
	eTargetLift.playsound("sound/ships/enterprise/ent_turbolift_stop.wav",0,2,84);
	eCurrentLift.stopsound(0);
	wait(3);
//unlock target lift doors
	if(doesEntityExist(eTargetLiftDoors))
	{
		eTargetLiftDoors.unlock();
	}
//unlock "current" lift doors
	if(doesEntityExist(eCurrentLiftDoors))
	{
		eCurrentLiftDoors.unlock();
	}
//allow travel to this lift now again
	wait(2);
	//enable start Turbolift triggers again
	eCurrentLiftTrigger.thread("mom_basic");//enable trigger this way, because mom overwrites trigger activation (by design)
	eTargetLiftTrigger.triggerable();
	eTargetLift.setFloatVar("mom_turboliftIsBusy",0);
	eCurrentLift.setFloatVar("mom_turboliftIsBusy",0);
}
