//This script contains the code for the transporter, use as you please
//This script contains the code for the transporter, use as you please
//This script contains the code for the transporter, use as you please


//Global Variables, can be accessed by all Functions/scriptfiles
//if definied outside a function, just like this
////////////////////////////////////////////////////////////////////////////////
float	float_transporter_location,
		float_transporter_beamToOrBeamFrom,
		float_transporter_inUse;		

//declaration
////////////////////////////////////////////////////////////////////////////////
void	transporter_noMenu();
void	transporter();
void	transporter_setTargetById(float fTransporterLocation);
void	transporter_Zero();
void	transporter_One();
void	transporter_Two();
void	transporter_Three();
void	transporter_Four();
void	transporter_Five();
void	transporter_Six();
void	transporter_Seven();
void	transporter_Eight();
void	transporter_Nine();
void	transporter_Ten();
void	transporter_Eleven();
void	transporter_Twelve();
void	transporter_Thirteen();
void	transporter_Fourteen();
void	transporter_Fifteen();

//functions
////////////////////////////////////////////////////////////////////////////////


void transporter_noMenu()
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	mom_showMessagePlayer(ePlayer,"It seams you don't have the Menu for this Transporter Control...");
}


void transporter()
//this function is started once the trigger is used
{
//start with beaming from location as default
	float_transporter_beamToOrBeamFrom=1;	
}

void transporter_setTargetById(float fTransporterLocation)
//this functions sets the target for the transporter triggers
{
//create internal variables, only for this function
	float	fTransporterId;
	entity	eTransporterTrigger,
			eTargetLocation;
	string	sTransportTriggerTargetName,
			sLocationTargetName;
			
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
//make the transporter locataion data avialable to all functions
	float_transporter_location = fTransporterLocation;
			
//we have 3 transporters: transporter0,transporter1,transporter2
	for(fTransporterId=0;fTransporterId<3;fTransporterId++)
	{
	//get teleport trigger trigger
		if(float_transporter_beamToOrBeamFrom)
		{
		//construct the target name of the teleport trigger
		//in this case the transport from area is the transporter room, allways
			sTransportTriggerTargetName = "location_0_transTrigger_"+fTransporterId;
		}
	//beam from somewhere to the transporter room
		else
		{
		//construct the target name of the teleport(beam from) trigger
			sTransportTriggerTargetName = "location_"+fTransporterLocation+"_transTrigger_"+fTransporterId;
		}
	//get teleport trigger
		eTransporterTrigger = getEntity(sTransportTriggerTargetName);
		
	//construct the beam to target location name
	//--
	//beam from somewhere to the transporter room
		if(!float_transporter_beamToOrBeamFrom)
		{
		//construct the target name of the teleport trigger
		//in this case the transport from area is the transporter room, allways
			sLocationTargetName = "location_0_destinationItem_"+fTransporterId;
		}
	//Beam from transporter room to some where
		else
		{
		//construct the target name of the teleport(beam from) trigger
			sLocationTargetName = "location_"+fTransporterLocation+"_destinationItem_"+fTransporterId;
		}
		
	//get the target location(beam to) entity
		eTargetLocation = getEntity(sLocationTargetName);
		
	//check if the teleport trigger does exist
		if(doesEntityExist(eTransporterTrigger))
		{
		//check if target location is invalid
			if(doesEntityExist(eTargetLocation))
			{
			//connect the transport trigger to the targetlocation entity
				eTransporterTrigger.target(sLocationTargetName);
			}
			else
			{
			//inform us that the target entity does not exist
				mom_showMessagePlayer(ePlayer,"Target with target name: "+sLocationTargetName+" does not exist!!!");
			}
		}
	//print out a error if the trigger is not valid
		else
		{
		//inform us that the target entity does not exist
			mom_showMessagePlayer(ePlayer,"Teleport trigger with target name: "+sTransportTriggerTargetName+" does not exist!!!");
		}
	}
}


void transporter_Zero()
//this function is called when option 10 is used
{
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());

	mom_showMessagePlayer(ePlayer,"Empty 7 of 7...\n");
}

void transporter_One()
//this function is called when option 1 is used
{
//prevent heisenberg kompensator overload <- This is a insider joke
//--
//once the transporter is to become activated
//do not allow changes to the selections

	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	if(float_transporter_inUse)
	{
//tell the player whats up
		mom_showMessagePlayer(ePlayer,"Transporter is in use, please wait!");
//exit this function now
		return;
	}
	
//call a function with a parameter, that function will do the setup
	transporter_setTargetById(0);
	
//tell the player whats up
	mom_showMessagePlayer(ePlayer,"Location 1\n");
}

void transporter_Two()
//this function is called when option 2 is used
{
//prevent heisenberg kompensator overload <- This is a insider joke
//--
//once the transporter is to become activated
//do not allow changes to the selections
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	if(float_transporter_inUse)
	{
//tell the player whats up
		mom_showMessagePlayer(ePlayer,"Transporter is in use, please wait!");
//exit this function now
		return;
	}
	
//call a function with a parameter, that function will do the setup
	transporter_setTargetById(1);

//tell the player whats up
	mom_showMessagePlayer(ePlayer,"Location 2\n");
}

void transporter_Three()
//this function is called when option 3 is used
{
//prevent heisenberg kompensator overload <- This is a insider joke
//--
//once the transporter is to become activated
//do not allow changes to the selections
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	if(float_transporter_inUse)
	{
//tell the player whats up
		mom_showMessagePlayer(ePlayer,"Transporter is in use, please wait!");
//exit this function now
		return;
	}
	
//call a function with a parameter, that function will do the setup
	transporter_setTargetById(2);
	
//tell the player whats up
	mom_showMessagePlayer(ePlayer,"Location 3\n");
}

void transporter_Four()
//this function is called when option 4 is used
{
//prevent heisenberg kompensator overload <- This is a insider joke
//--
//once the transporter is to become activated
//do not allow changes to the selections
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	if(float_transporter_inUse)
	{
//tell the player whats up
		mom_showMessagePlayer(ePlayer,"Transporter is in use, please wait!");
//exit this function now
		return;
	}
	
//call a function with a parameter, that function will do the setup
	transporter_setTargetById(3);
	
//tell the player whats up
	mom_showMessagePlayer(ePlayer,"Location 4\n");
}

void transporter_Five()
//this function is called when option 5 is used
{
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	mom_showMessagePlayer(ePlayer,"Empty 1 of 7...\n");
}

void transporter_Six()
//this function is called when option 6 is used
{
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	mom_showMessagePlayer(ePlayer,"Empty 2 of 7...\n");
}

void transporter_Seven()
//this function is called when option 7 is used
{
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	mom_showMessagePlayer(ePlayer,"Empty 3 of 7...\n");
}

void transporter_Eight()
//this function is called when option 8 is used
{
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	mom_showMessagePlayer(ePlayer,"Empty 4 of 7...\n");
}

void transporter_Nine()
//this function is called when option 9 is used
{
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	mom_showMessagePlayer(ePlayer,"Empty 5 of 7...\n");
}

void transporter_Ten()
{
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	mom_showMessagePlayer(ePlayer,"Empty 6 of 7...\n");
}

void transporter_Eleven()
{
//prevent heisenberg kompensator overload <- This is a insider joke
//--
//once the transporter is to become activated
//do not allow changes to the selections
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	if(float_transporter_inUse)
	{
//tell the player whats up
		mom_showMessagePlayer(ePlayer,"Transporter is in use, please wait!");
//exit this function now
		return;
	}

//tell the player what is going on
	mom_showMessagePlayer(ePlayer,"Beam to selected location\n");
	
//change this varaiable to transport to the selected location
	float_transporter_beamToOrBeamFrom=1;
}

void transporter_Twelve()
{
//prevent heisenberg kompensator overload <- This is a insider joke
//--
//once the transporter is to become activated
//do not allow changes to the selections
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	if(float_transporter_inUse)
	{
//tell the player whats up
		mom_showMessagePlayer(ePlayer,"Transporter is in use, please wait!");
//exit this function now
		return;
	}

//tell the player what is going on
	mom_showMessagePlayer(ePlayer,"Beam from selected location\n");
	
//change this varaiable to transport to the selected location
	float_transporter_beamToOrBeamFrom=0;
}

void transporter_Thirteen()
{
//prevent heisenberg kompensator overload <- This is a insider joke
//--
//once the transporter is to become activated
//do not allow changes to the selections
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	if(float_transporter_inUse)
	{
//tell the player whats up
		mom_showMessagePlayer(ePlayer,"Transporter is in use, please wait!");
//exit this function now
		return;
	}

//lock transporter
	float_transporter_inUse=1;

//tell the player what is going on
	mom_showMessagePlayer(ePlayer,"Energize - activating Transporter now!\n");
	
//set the proper target on the teleport trigger
	transporter_setTargetById(float_transporter_location);
	
//create internal variables, only for this function
	float	fTransporterId,
			fTransporterLocation;
	entity	eTransporterTrigger;
	string	sTransportTriggerTargetName;
	
//grab the current transporter location, in case somone feels funny changing the location while beaming
	fTransporterLocation = float_transporter_location;

//we have 3 transporters: transporter0,transporter1,transporter2
	for(fTransporterId=0;fTransporterId<3;fTransporterId++)
	{
	//determin wether to beam out or in, and grab the correct targetname
	//if we transport from the transporter room, we allways select these triggers
		if(float_transporter_beamToOrBeamFrom == 1)
		{
		//construct the target name of the teleport trigger
		//in this case the transport from area is the transporter room, allways
			sTransportTriggerTargetName = "location_0_transTrigger_"+fTransporterId;
		}
	//beam from somewhere to the transporter room
		else
		{
		//construct the target name of the teleport trigger
			sTransportTriggerTargetName = "location_"+fTransporterLocation+"_transTrigger_"+fTransporterId;
		}
	
	//get the transporter trigger
		eTransporterTrigger = getEntity(sTransportTriggerTargetName);
		
	//verify it's existance
		if(doesEntityExist(eTransporterTrigger))
		{
		//enable the transporter trigger
			eTransporterTrigger.triggerable();
		}
	//debug
		//else
		//{
			//centerprint("the trigger does not exist with targetname: "+sTransportTriggerTargetName+"\n");
		//}
	}
	
//wait a moment, then deactivate the triggers again
	wait(1);
	
//we have 3 transporters: transporter0,transporter1,transporter2
	for(fTransporterId=0;fTransporterId<3;fTransporterId++)
	{
	//get teleport trigger trigger
		if(float_transporter_beamToOrBeamFrom)
		{
		//construct the target name of the teleport trigger
		//in this case the transport from area is the transporter room, allways
			sTransportTriggerTargetName = "location_0_transTrigger_"+fTransporterId;
		}
	//beam from somewhere to the transporter room
		else
		{
		//construct the target name of the teleport trigger
			sTransportTriggerTargetName = "location_"+fTransporterLocation+"_transTrigger_"+fTransporterId;
		}
		
	//get the transporter trigger
		eTransporterTrigger = getEntity(sTransportTriggerTargetName);	
		
	//verify it's existance
		if(doesEntityExist(eTransporterTrigger))
		{
			eTransporterTrigger.nottriggerable();
		}
	}
//reset in use status
	float_transporter_inUse=0;
}

void transporter_Fourteen()
{
//prevent heisenberg kompensator overload <- This is a insider joke
//--
//once the transporter is to become activated
//do not allow changes to the selections
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	if(float_transporter_inUse)
	{
//tell the player whats up
		mom_showMessagePlayer(ePlayer,"Transporter is in use, please wait!");
//exit this function now
		return;
	}
//exit menu
	thread	mom_exitMenuPlayer(ePlayer);
	
//tell the player what is going on
	mom_showMessagePlayer(ePlayer,"Activating Transporter in 10 sec\n");
	
//wait 10 secounds then energize
	wait(10);

//call the transport thread
	transporter_Thirteen();
}

void transporter_Fifteen()
{
	entity	ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	
	mom_showMessagePlayer(ePlayer,"Empty...\n");
}


