//This script contains the code for the replicator, use as you please
//This script contains the code for the replicator, use as you please
//This script contains the code for the replicator, use as you please

//chrissstrahl - 2022.02.04
//Buy and Sell Mission Requisition Items
//Based on a concept by Akula79 and Chrissstrahl

string sEmptyShader;
string sMissionName;
string	sItemBuy1; string sItemBuy1Shader;string sItemBuy1Name;string sItemBuy1Descr;
string	sItemBuy2; string sItemBuy2Shader;string sItemBuy2Name;string sItemBuy2Descr;
string	sItemBuy3; string sItemBuy3Shader;string sItemBuy3Name;string sItemBuy3Descr;
string	sItemBuy4; string sItemBuy4Shader;string sItemBuy4Name;string sItemBuy4Descr;
string	sItemBuy5; string sItemBuy5Shader;string sItemBuy5Name;string sItemBuy5Descr;
string	sItemBuy6; string sItemBuy6Shader;string sItemBuy6Name;string sItemBuy6Descr;
string	sItemBuy7; string sItemBuy7Shader;string sItemBuy7Name;string sItemBuy7Descr;
string	sItemBuy8; string sItemBuy8Shader;string sItemBuy8Name;string sItemBuy8Descr;
vector	vItemBuy1Cost;
vector	vItemBuy2Cost;
vector	vItemBuy3Cost;
vector	vItemBuy4Cost;
vector	vItemBuy5Cost;
vector	vItemBuy6Cost;
vector	vItemBuy7Cost;
vector	vItemBuy8Cost;
string	sChallanges;
vector  vRequired3Items;
vector	vStartCredits;

void	mrm_uiPopulateMenu(entity ePlayer);
void	mrm_uiSelectBuyItem(entity ePlayer,float fItem);
void	mrm_uiSelectSellItem(entity ePlayer,float fItem);
void	mrm_uiEnableBuyButton(entity ePlayer,float fEnable);
void	mrm_uiEnableSellButton(entity ePlayer,float fEnable);
float	mrm_uiTransferItem(entity ePlayer,float fBuy);
void	mrm_uiFlashWidget(entity ePlayer,string sWidgetName,string sFlashColor,string sNormalColor,float fTimes);
void	mrm_uiPaymentSelectEc(entity ePlayer);
void	mrm_uiPaymentCancel(entity ePlayer);
void	mrm_uiPaymentSelectReq(entity ePlayer);

void	mrm_sellSelectedItem(entity ePlayer);
void	mrm_buySelectedItem(entity ePlayer);
void	mrm_playerTakeAllItems(entity ePlayer);
void	mrm_setResourceData(entity ePlayer);
float	mrm_canBuySelectedItem(entity ePlayer,float fItem);
float	mrm_isInventoryFull(entity ePlayer);
float	mrm_hasRequiredInventory(entity ePlayer);

void	mrm_returnItemFromInventory(entity ePlayer,float fInventoryItemNumer);
void	mrm_addItemToInventory(entity ePlayer,float fItemNumer);

float	mrm_getValidPaymentMethod(entity ePlayer,vector vItemCost);
float	mrm_getFreeInventorySlot(entity ePlayer);
vector	mrm_addToPlayerBalance(entity ePlayer,vector vBallance);
vector	mrm_removeFromPlayerBalance(entity ePlayer,vector vBallance);
void	mrm_accept(entity ePlayer);

//compatibility for aftermath mod
void sendwidgetcommand(entity ePlayer,string sWidget,string sPara1,string sPara2);
vector getVectorScriptVariable(string sVectorVarName);
string getStringScriptVariable(string sStringVarName);
//compatibility for aftermath mod
void sendwidgetcommand(entity ePlayer,string sWidget,string sPara1,string sPara2){
	ePlayer = $player;
	if(!doesEntityExist($player)){ return; }

	if(sWidget == "" || sPara1 == ""){
		print("ERROR: sendwidgetcommand widgetname or parameter1 empty\n");
		return;
	}

	if(sPara2 != ""){
		sPara1 = sPara1+" "+sPara2;
		print("INFO: sendwidgetcommand parameter2 NOT empty\n");
	}else{
		print("INFO: sendwidgetcommand parameter2 empty\n");
	}
	
	//print("INFO: sendwidgetcommand "+sWidget+" "+sPara1+"\n");
	sendclientcommand(ePlayer,"globalwidgetcommand "+sWidget+" "+sPara1);
}
//compatibility for aftermath mod
string getStringScriptVariable(string sStringVarName)
{
	string sData;
	if(sStringVarName == "sItemBuy1"){ sData = sItemBuy1; }
	else if(sStringVarName == "sItemBuy2"){ sData = sItemBuy2; }
	else if(sStringVarName == "sItemBuy3"){ sData = sItemBuy3; }
	else if(sStringVarName == "sItemBuy4"){ sData = sItemBuy4; }
	else if(sStringVarName == "sItemBuy5"){ sData = sItemBuy5; }
	else if(sStringVarName == "sItemBuy6"){ sData = sItemBuy6; }
	else if(sStringVarName == "sItemBuy7"){ sData = sItemBuy7; }
	else if(sStringVarName == "sItemBuy8"){ sData = sItemBuy8; }

	else if(sStringVarName == "sItemBuy1Shader"){ sData = sItemBuy1Shader; }
	else if(sStringVarName == "sItemBuy2Shader"){ sData = sItemBuy2Shader; }
	else if(sStringVarName == "sItemBuy3Shader"){ sData = sItemBuy3Shader; }
	else if(sStringVarName == "sItemBuy4Shader"){ sData = sItemBuy4Shader; }
	else if(sStringVarName == "sItemBuy5Shader"){ sData = sItemBuy5Shader; }
	else if(sStringVarName == "sItemBuy6Shader"){ sData = sItemBuy6Shader; }
	else if(sStringVarName == "sItemBuy7Shader"){ sData = sItemBuy7Shader; }
	else if(sStringVarName == "sItemBuy8Shader"){ sData = sItemBuy8Shader; }

	else if(sStringVarName == "sItemBuy1Descr"){ sData = sItemBuy1Descr; }
	else if(sStringVarName == "sItemBuy2Descr"){ sData = sItemBuy2Descr; }
	else if(sStringVarName == "sItemBuy3Descr"){ sData = sItemBuy3Descr; }
	else if(sStringVarName == "sItemBuy4Descr"){ sData = sItemBuy4Descr; }
	else if(sStringVarName == "sItemBuy5Descr"){ sData = sItemBuy5Descr; }
	else if(sStringVarName == "sItemBuy6Descr"){ sData = sItemBuy6Descr; }
	else if(sStringVarName == "sItemBuy7Descr"){ sData = sItemBuy7Descr; }
	else if(sStringVarName == "sItemBuy8Descr"){ sData = sItemBuy8Descr; }

	else if(sStringVarName == "sItemBuy1Name"){ sData = sItemBuy1Name; }
	else if(sStringVarName == "sItemBuy2Name"){ sData = sItemBuy2Name; }
	else if(sStringVarName == "sItemBuy3Name"){ sData = sItemBuy3Name; }
	else if(sStringVarName == "sItemBuy4Name"){ sData = sItemBuy4Name; }
	else if(sStringVarName == "sItemBuy5Name"){ sData = sItemBuy5Name; }
	else if(sStringVarName == "sItemBuy6Name"){ sData = sItemBuy6Name; }
	else if(sStringVarName == "sItemBuy7Name"){ sData = sItemBuy7Name; }
	else if(sStringVarName == "sItemBuy8Name"){ sData = sItemBuy8Name; }
	else{ sData = "error("+sStringVarName+")"; }
	return sData+"";
}
//compatibility for aftermath mod
vector getVectorScriptVariable(string sVectorVarName)
{
	vector vData;
	if(sVectorVarName == "vItemBuy1Cost"){ vData = vItemBuy1Cost; }
	else if(sVectorVarName == "vItemBuy2Cost"){ vData = vItemBuy2Cost; }
	else if(sVectorVarName == "vItemBuy3Cost"){ vData = vItemBuy3Cost; }
	else if(sVectorVarName == "vItemBuy4Cost"){ vData = vItemBuy4Cost; }
	else if(sVectorVarName == "vItemBuy5Cost"){ vData = vItemBuy5Cost; }
	else if(sVectorVarName == "vItemBuy6Cost"){ vData = vItemBuy6Cost; }
	else if(sVectorVarName == "vItemBuy7Cost"){ vData = vItemBuy7Cost; }
	else if(sVectorVarName == "vItemBuy8Cost"){ vData = vItemBuy8Cost; }

	else{ vData = '-99 -99 -99'; } //make sure we detect if there is a error
	return vData;
}


//declaration
////////////////////////////////////////////////////////////////////////////////
void	mrmnoMenu();
void	mrm();
void	mrm_One();
void	mrm_Two();
void	mrm_Three();
void	mrm_Four();
void	mrm_Five();
void	mrm_Six();
void	mrm_Seven();
void	mrm_Eight();
void	mrm_Nine();
void	mrm_Ten();
void	mrm_Eleven();
void	mrm_Twelve();
void	mrm_Thirteen();
void	mrm_Fourteen();
void	mrm_Fifteen();
void	mrm_Zero();

void mrmnoMenu()
//this is started if the player does not have the menu
{
	mom_showMessagePlayer($player,"It seams you don't have the Menu for MRM...");	
}

void mrm()
//this function is started once the trigger is used
{
	entity ePlayer;
	entity eTrigger;

	/* //aftermath mod compatibility
	eTrigger = getCurrentEntity();
	if(!doesEntityExist(eTrigger)){
		print("ERROR: mom_returnPlayerForTrigger - trigger did not exist\n");
		ePlayer = $player;
	}else{
		ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	}*/
	ePlayer = $player;
	
	//set default vars
	sEmptyShader = "weapons/empty";	
	
	if(!doesEntityExist(ePlayer)){ return; }
	
	//take away inventory that was given via mrm
	thread mrm_playerTakeAllItems(ePlayer);
	
	//populate the menu with items and data
	mrm_uiPopulateMenu(ePlayer);
}

void mrm_One()
{
	mrm_uiSelectBuyItem($player,1);
}

void mrm_Two()
{
	mrm_uiSelectBuyItem($player,2);
}

void mrm_Three()
{
	mrm_uiSelectBuyItem($player,3);
}

void mrm_Four()
{
	mrm_uiSelectBuyItem($player,4);
}

void mrm_Five()
{
	mrm_uiSelectBuyItem($player,5);
}

void mrm_Six()
{
	mrm_uiSelectBuyItem($player,6);
}

void mrm_Seven()
{
	mrm_uiSelectBuyItem($player,7);
}

void mrm_Eight()
{
	mrm_uiSelectBuyItem($player,8);
}

void mrm_Nine()
{
	mrm_buySelectedItem($player);
}

void mrm_Ten()
{
	mrm_sellSelectedItem($player);
}

void mrm_Eleven()
{
	//allow for multiple fucntions of this button
	//there is a different button also calling this function
	//if the player in in that different menu this var will be != 0
	if($player.getFloatVar("mrmUiLevel")==0){
		mrm_uiSelectSellItem($player,1);
	}else{
		mrm_uiPaymentSelectEc($player);
	}
}

void mrm_Twelve()
{
	//allow for multiple fucntions of this button
	//there is a different button also calling this function
	//if the player in in that different menu this var will be != 0
	if($player.getFloatVar("mrmUiLevel")==0){
		mrm_uiSelectSellItem($player,2);
	}else{
		mrm_uiPaymentCancel($player);
	}
}

void mrm_Thirteen()
{
	//allow for multiple fucntions of this button
	//there is a different button also calling this function
	//if the player in in that different menu this var will be != 0
	if($player.getFloatVar("mrmUiLevel")==0){
		mrm_uiSelectSellItem($player,3);
	}else{
		mrm_uiPaymentSelectReq($player);
	}
}

void mrm_Fourteen()
{
	mrm_uiSelectSellItem($player,4);
}

void mrm_Fifteen()
{
	mrm_uiSelectSellItem($player,5);
}

void mrm_Zero()
{
	mrm_accept($player);
}

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//	SUBFUNCTIONS MANAGING THE BUY AND SET AND MENU STUFF
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
void mrm_playerTakeAllItems(entity ePlayer)
//===================================
//take away inventory that was given via mrm
//===================================
{
	float fInv;
	float fPlaySound;
	float fInventoryItem;
	string sItem;
	for(fInv=1;fInv<=5;fInv++){
		fInventoryItem = ePlayer.getFloatVar("mrmInvAssociation"+fInv);
		if(fInventoryItem != 0){
			fPlaySound=1;
			sItem = ePlayer.getStringVar("mrmItemBuy"+fInventoryItem);
			ePlayer.take(sItem);
			ePlayer.hudprint(sItem+" - taken\n");
		}
	}
	
	//play pickup sound on player
	if(fPlaySound){
		ePlayer.playsound("sound/player/player_invdrop.wav",0,2,100);
	}
}

void mrm_uiFlashWidget(entity ePlayer,string sWidgetName,string sFlashColor,string sNormalColor,float fTimes)
//===================================
// makes given widget flash
//===================================
{
	float fRounds;
	for(fRounds=0;fRounds<fTimes;fRounds++){
		sendwidgetcommand($player,sWidgetName,"bgcolor "+sFlashColor,fTimes);
		wait(0.2);
		sendwidgetcommand($player,sWidgetName,"bgcolor "+sNormalColor,fTimes);
		wait(0.2);
	}
}

float mrm_getItemInventorySlot(entity ePlayer,float fItem)
//===================================
// return slot nuber in which a specific item can be found
//===================================
{
	float fInventorySlot;
	for(fInventorySlot=1;fInventorySlot<=5;fInventorySlot++){
		float fInventoryItem;
		fInventoryItem = ePlayer.getFloatVar("mrmInvAssociation"+fInventorySlot);
		//ePlayer.hudprint("asso-slot: "+fInventorySlot+" - item-num: "+fInventoryItem+" souldBe["+fItem+"]\n");
		if(fInventoryItem == fItem){
			return fInventorySlot;
		}
	}
	return 0;
}


float mrm_hasRequiredInventory(entity ePlayer)
//===================================
// check if player has required inventory
//===================================
{
	if(!doesEntityExist(ePlayer)){ return 0; }
	float fRequired1;
	float fRequired2;
	float fRequired3;
	fRequired1 = vectorGetX(vRequired3Items);
	fRequired2 = vectorGetY(vRequired3Items);
	fRequired3 = vectorGetZ(vRequired3Items);

	//check if we have all required items if there are any
	float fAllOkay=1;
	if(fRequired1 != 0 && mrm_getItemInventorySlot(ePlayer,fRequired1) == 0){
		//thread mrm_uiFlashWidget(ePlayer,"mrmRequiredItem1","1 0 0 0.6","0 0 0 0",3);
		fAllOkay=0;
	}
	if(fRequired2 != 0 && mrm_getItemInventorySlot(ePlayer,fRequired2) == 0){
		//thread mrm_uiFlashWidget(ePlayer,"mrmRequiredItem2","1 0 0 0.6","0 0 0 0",3);
		fAllOkay=0;
	}
	if(fRequired3 != 0 && mrm_getItemInventorySlot(ePlayer,fRequired3) == 0){
		//thread mrm_uiFlashWidget(ePlayer,"mrmRequiredItem3","1 0 0 0.6","0 0 0 0",3);
		fAllOkay=0;
	}


	
	//player has all required items
	if(fAllOkay){
		return 1;
	}
	
	thread mrm_uiFlashWidget(ePlayer,"mrmRequired","1 0 0 0.6","0.58 0.52 0.99 0.5",3);

	//play warn sound on clientgame and return false
	ePlayer.playsound("sound/misc/mp_warn1.wav",0,2,100);
	return 0;
}

void mrm_sellSelectedItem(entity ePlayer)
//===================================
//removes a item from player inventory
//===================================
{
	mrm_uiTransferItem(ePlayer,0);
}

void mrm_buySelectedItem(entity ePlayer)
//===================================
//transfers a item into player inventory
//===================================
{
	if(mrm_canBuySelectedItem(ePlayer,ePlayer.getFloatVar("mrmItemBuyLastSelected"))){
		mrm_uiTransferItem(ePlayer,1);
	}
}

void mrm_setResourceData(entity ePlayer)
//=================================================
//grabs the mission resource data for the mission and sets them on entity vars of player
//reads from global vars or maybe ini file
//=================================================
{
	if(!doesEntityExist(ePlayer) || ePlayer.getFloatVar("mrmDataSet") != 0){ return; }
	ePlayer.setFloatVar("mrmDataSet",1);
	
	//GET CREDITS DATA
	ePlayer.setVectorVar("mrmCredits",vStartCredits);

	//GET ITEM DATA
	float fItem;
	for(fItem=1;fItem<=8;fItem++){
		string sTemp1,sTemp2;
		sTemp1 = getStringScriptVariable("sItemBuy"+fItem);
		sTemp2 = getStringScriptVariable("sItemBuy"+fItem+"Name");
		
		//only set data if there even is a item
		if(sTemp1 != "" && sTemp2 != ""){
			ePlayer.setStringVar("mrmItemBuy"+fItem,sTemp1);
			ePlayer.setStringVar("mrmItemBuyName"+fItem,sTemp2);
			ePlayer.setStringVar("mrmItemBuyDescr"+fItem,getStringScriptVariable("sItemBuy"+fItem+"Descr"));
			ePlayer.setStringVar("mrmItemBuyShader"+fItem,getStringScriptVariable("sItemBuy"+fItem+"Shader"));
			ePlayer.setVectorVar("mrmItemBuyCost"+fItem,getVectorScriptVariable("vItemBuy"+fItem+"Cost"));
			ePlayer.setFloatVar("mrmItemBuyAvailable"+fItem,vectorGetZ(getVectorScriptVariable("vItemBuy"+fItem+"Cost")));
		}
	}
}

void mrm_uiPopulateMenu(entity ePlayer)
//===================================
//populates all menu items and resets the menu seen to the current actual status
//reads entity vars from player
//===================================
{
	//retrive mission resource data, then store on player and read from player in the future
	mrm_setResourceData(ePlayer);

	if(!doesEntityExist(ePlayer)){
		print("ERROR: mrm_uiPopulateMenu - NULL PLAYER");
		return;
	}
	
	//disable challange selection if there is none
	if(sChallanges == ""){
		sendwidgetcommand(ePlayer,"mrmChallangeImage","disable","");
		sendwidgetcommand(ePlayer,"mrmChallange","disable","");
	}

	//set mission name
	sendwidgetcommand(ePlayer,"mrmMission","labeltext",sMissionName);
	
	//wait for function "mrm_setResourceData", at least 1 frame
	wait(0.1);	
	
	//set credits on player
	vector vCredits;
	vCredits = ePlayer.getVectorVar("mrmCredits");
	sendwidgetcommand(ePlayer,"mrmReqValue","title",""+vectorGetX(vCredits));
	sendwidgetcommand(ePlayer,"mrmEnergyValue","title",""+vectorGetY(vCredits));
	
	//wait for function "mrm_setResourceData", at least 1 frame
	wait(0.1);
	
	//get required items
	float fRequired1;
	float fRequired2;
	float fRequired3;
	fRequired1 = vectorGetX(vRequired3Items);
	fRequired2 = vectorGetY(vRequired3Items);
	fRequired3 = vectorGetZ(vRequired3Items);
	if(fRequired1){ sendwidgetcommand(ePlayer,"mrmRequiredItem1","shader",""+ePlayer.getStringVar("mrmItemBuyShader"+fRequired1));  }else{ sendwidgetcommand(ePlayer,"mrmRequiredItem1","shader",""+sEmptyShader); }
	if(fRequired2){ sendwidgetcommand(ePlayer,"mrmRequiredItem2","shader",""+ePlayer.getStringVar("mrmItemBuyShader"+fRequired2));  }else{ sendwidgetcommand(ePlayer,"mrmRequiredItem2","shader",""+sEmptyShader); }
	if(fRequired3){ sendwidgetcommand(ePlayer,"mrmRequiredItem3","shader",""+ePlayer.getStringVar("mrmItemBuyShader"+fRequired3));  }else{ sendwidgetcommand(ePlayer,"mrmRequiredItem3","shader",""+sEmptyShader); }
	
	//populate inventory Items
	//GET ITEM DATA
	float fInv;
	for(fInv=1;fInv<=5;fInv++){
		if(!doesEntityExist(ePlayer)){ return; }
	
		float fInvItemAssociatedItemNumber;
		fInvItemAssociatedItemNumber = ePlayer.getFloatVar("mrmInvAssociation"+fInv);
		
		string sShaderz;
		sShaderz = sEmptyShader;
		if(fInvItemAssociatedItemNumber != 0){
			sShaderz = ePlayer.getStringVar("mrmItemBuyShader"+fInvItemAssociatedItemNumber);
		}
		
		sendwidgetcommand(ePlayer,"mrmInv"+fInv,"shader",sShaderz);
		wait(0.05);
	}
	
	//populate Buy Items
	//GET ITEM DATA
	float fItem;
	for(fItem=1;fItem<=8;fItem++){
		if(!doesEntityExist(ePlayer)){ return; }
	
		float fAmount;
		fAmount = ePlayer.getFloatVar("mrmItemBuyAvailable"+fItem);
		string sTemp1,sTemp2,sTemp3;
		sTemp1 = ePlayer.getStringVar("mrmItemBuy"+fItem);
		sTemp2 = ePlayer.getStringVar("mrmItemBuyName"+fItem);
		sTemp3 = ePlayer.getStringVar("mrmItemBuyShader"+fItem);
		
		//only set data if there even is a item
		if(fAmount > 0 && sTemp1 != "" && sTemp2 != "" && sTemp3 != ""){
			sendwidgetcommand(ePlayer,"mrmItem"+fItem,"shader",sTemp3);
		}
		else{
			sendwidgetcommand(ePlayer,"mrmItem"+fItem,"shader",sEmptyShader);
		}
		wait(0.05);
	}
}

void mrm_uiSelectSellItem(entity ePlayer, float fItem)
//===================================
// marks a selected item and displays the info for the item
//===================================
{
	if(!doesEntityExist(ePlayer)){ return; }
	
	//change color of widget to make it appear selected
	sendwidgetcommand(ePlayer,"mrmInv"+fItem,"bgcolor","1 0.5 0 0.5");
	
	//reset last item background color, if not the same
	float fLastItem;
	fLastItem = ePlayer.getFloatVar("mrmItemSellLastSelected");
	if(fLastItem > 0 && fLastItem != fItem){
		sendwidgetcommand(ePlayer,"mrmInv"+fLastItem,"bgcolor","0.5 0.5 0.5 0.5");
	}
	ePlayer.setFloatVar("mrmItemSellLastSelected",fItem);
	
	//get item stats and send to player ui
	float fInvItemAssociatedItemNumber;
	fInvItemAssociatedItemNumber = ePlayer.getFloatVar("mrmInvAssociation"+fItem);
	
	//enable/disable button to sell
	float fEnable;
	if(fInvItemAssociatedItemNumber != 0){
		fEnable = 1;
	}
	mrm_uiEnableSellButton(ePlayer,fEnable);
	
	
	//empty - not associated
	if(fInvItemAssociatedItemNumber == 0){ return; }
	
	string sTemp1,sTemp2,sTemp3;
	sTemp1 = ePlayer.getStringVar("mrmItemBuyName"+fInvItemAssociatedItemNumber);
	sTemp2 = ePlayer.getStringVar("mrmItemBuyDescr"+fInvItemAssociatedItemNumber);
	
	sendwidgetcommand(ePlayer,"mrmInvEnergy","title",""+vectorGetY(ePlayer.getVectorVar("mrmItemBuyCost"+fInvItemAssociatedItemNumber)));
	sendwidgetcommand(ePlayer,"mrmInvReq","title",""+vectorGetX(ePlayer.getVectorVar("mrmItemBuyCost"+fInvItemAssociatedItemNumber)));	

	//enable/disable button to buy
	mrm_uiEnableSellButton(ePlayer,1);
	
	//set name and description of selected item
	if(sTemp1 != ""){	sendwidgetcommand(ePlayer,"mrmInvTitle","labeltext",sTemp1); }
	else{				sendwidgetcommand(ePlayer,"mrmInvTitle","labeltext","^"); }
	
	if(sTemp2 != ""){	sendwidgetcommand(ePlayer,"mrmInvDescr","labeltext",sTemp2); }
	else{				sendwidgetcommand(ePlayer,"mrmInvDescr","labeltext","^");}
}

void mrm_uiSelectBuyItem(entity ePlayer,float fItem)
//===================================
// marks a selected inventory-item and displays the info for the item
//===================================
{
	if(!doesEntityExist(ePlayer)){ return; }
	
	//change color of widget to make it appear selected
	sendwidgetcommand(ePlayer,"mrmItem"+fItem,"bgcolor","0 1 0 0.5");
	
	//reset last item background color, if not the same
	float fLastItem;
	fLastItem = ePlayer.getFloatVar("mrmItemBuyLastSelected");
	if(fLastItem > 0 && fLastItem != fItem){
		sendwidgetcommand(ePlayer,"mrmItem"+fLastItem,"bgcolor","0.5 0.5 0.5 0.5");
	}
	ePlayer.setFloatVar("mrmItemBuyLastSelected",fItem);
	
	//get item stats and send to player ui
	string sTemp1,sTemp2,sTemp3;
	sTemp1 = ePlayer.getStringVar("mrmItemBuyName"+fItem);
	sTemp2 = ePlayer.getStringVar("mrmItemBuyDescr"+fItem);
	
	float fAmount;
	fAmount = ePlayer.getFloatVar("mrmItemBuyAvailable"+fItem);
	
	if(fAmount > 0){
		vector vCost;
		vCost = ePlayer.getVectorVar("mrmItemBuyCost"+fItem);
		sendwidgetcommand(ePlayer,"mrmItemEnergy","title",""+vectorGetY(vCost));
		sendwidgetcommand(ePlayer,"mrmItemReq","title",""+vectorGetX(vCost));
		sendwidgetcommand(ePlayer,"mrmItemAmmount","title",""+fAmount);
	}else{
		sendwidgetcommand(ePlayer,"mrmItemEnergy","title","0");
		sendwidgetcommand(ePlayer,"mrmItemReq","title","0");
		sendwidgetcommand(ePlayer,"mrmItemAmmount","title","0");
	}

	//enable/disable button to buy
	mrm_uiEnableBuyButton(ePlayer,mrm_canBuySelectedItem(ePlayer,fItem));
	
	//set name and description of selected item
	if(fAmount > 0 && sTemp1 != ""){	sendwidgetcommand(ePlayer,"mrmItemTitle","labeltext",sTemp1); }
	else{				sendwidgetcommand(ePlayer,"mrmItemTitle","labeltext","^");}
	
	if(fAmount > 0 && sTemp2 != ""){	sendwidgetcommand(ePlayer,"mrmItemDescr","labeltext",sTemp2); }
	else{				sendwidgetcommand(ePlayer,"mrmItemDescr","labeltext","^");}
}

float mrm_canBuySelectedItem(entity ePlayer,float fItem)
//===================================
// checks if player can buy selected items
//===================================
{
	if(!doesEntityExist(ePlayer)){ return 0; }
	
	vector vItemCost;
	vector vPlayerCredits;
	
	//get item costs
	vItemCost = ePlayer.getVectorVar("mrmItemBuyCost"+fItem);
	//get player remaining credits and req
	vPlayerCredits = ePlayer.getVectorVar("mrmCredits");
	
	//item depleded ?
	if(ePlayer.getFloatVar("mrmItemBuyAvailable"+fItem) <= 0){
		return 0;
	}
	
	//item has no price '0 0 0' - can't buy
	if(vectorLength(vItemCost) < 1){
		return 0;
	}
	
	//check if there is even a free slot
	if(mrm_isInventoryFull(ePlayer)){
		thread mrm_uiFlashWidget(ePlayer,"mrmSell","1 0 0 0.6","0.5 0.5 0.5 0.5",3);
		return 0;
	}
	
	//item is cheaper or equal to req - can buy
	float fReqCost;
	float fReqAvailable;
	float fEnergyCost;
	float fEnergyAvailable;
	
	fReqCost			= vectorGetX(vItemCost);
	fEnergyCost			= vectorGetY(vItemCost);
	fReqAvailable		= vectorGetX(vPlayerCredits);
	fEnergyAvailable	= vectorGetY(vPlayerCredits);	
	
	
	if(fReqCost > 0 && fReqCost <= fReqAvailable){
		return 1;
	}
	//item is cheaper or equal to credits - can buy
	if(fEnergyCost > 0 && fEnergyCost <= fEnergyAvailable){
		return 1;
	}
	
	//play reject sound on player
	ePlayer.playsound("sound/misc/menu/reject.wav",0,2,100);
	
	thread mrm_uiFlashWidget(ePlayer,"mrmBallance","1 0 0 0.6","0.58 0.52 0.99 0.50",3);
	
	//if none of the above is true default to can't buy
	return 0;
}

void mrm_uiEnableBuyButton(entity ePlayer,float fEnable)
//===================================
// change color of buy button to disabled/enabled
//===================================
{
	if(!doesEntityExist(ePlayer)){ return; }
	
	string sBgColor;
	if(fEnable){	sBgColor = "0 1 0 0.5"; }
	else{			sBgColor = "0.5 0.5 0.5 0.5"; }
	
	sendwidgetcommand(ePlayer,"mrmBuy","bgColor",sBgColor);
}

void mrm_uiEnableSellButton(entity ePlayer,float fEnable)
//===================================
// change color of sell button to disabled/enabled
//===================================
{
	if(!doesEntityExist(ePlayer)){ return; }
	
	string sBgColor;
	if(fEnable){	sBgColor = "1 0.5 0 0.5"; }
	else{			sBgColor = "0.5 0.5 0.5 0.5"; }
	
	sendwidgetcommand(ePlayer,"mrmSell","bgColor",sBgColor);
}

float mrm_uiTransferItem(entity ePlayer,float fBuy)
//===================================
// Moves a item from one inventory to another (buy/sell)
//===================================
{
	//disable sell and buy buttons
	mrm_uiEnableBuyButton(ePlayer,0);
	mrm_uiEnableSellButton(ePlayer,0);

	float fFreeInvSlot;
	float fLastSelectedBuyItem;
	float fLastSelectedSellItem;
	
	fLastSelectedBuyItem = ePlayer.getFloatVar("mrmItemBuyLastSelected");
	fLastSelectedSellItem = ePlayer.getFloatVar("mrmItemSellLastSelected");
	//ePlayer.setFloatVar("mrmItemBuyLastSelected",0);
	//ePlayer.setFloatVar("mrmItemSellLastSelected",0);
	
	//move item icon and clear other slot icon
	if(fBuy){		
		//UPDATE ITEM INVENTORY DATA
		mrm_addItemToInventory(ePlayer,fLastSelectedBuyItem);
	}
	else{	
		//UPDATE ITEM INVENTORY DATA
		mrm_returnItemFromInventory(ePlayer,fLastSelectedSellItem);
	}
	return 1;
}

void mrm_addItemToInventory(entity ePlayer,float fLastSelectedBuyItem)
//===================================
// takes item from inventory away and puts it back to item gallery
//===================================
{
	vector vItemCost;
	vItemCost = ePlayer.getVectorVar("mrmItemBuyCost"+fLastSelectedBuyItem);
	
	//check if inventory has a free slot
	float fFreeInvSlot;
	float fInvSlotMax	= 5;
	fFreeInvSlot		= mrm_getFreeInventorySlot(ePlayer);
	
	//abbort if Inventory full
	//blink sell button to indicate to player that he has to sell something
	if(fFreeInvSlot > fInvSlotMax){
		thread mrm_uiFlashWidget(ePlayer,"mrmSell","1 0 0 0.6","0.5 0.5 0.5 0.5",3);
		return;
	}
	
	//get aviailability of item
	float fAmount;
	fAmount = ePlayer.getFloatVar("mrmItemBuyAvailable"+fLastSelectedBuyItem);
	if(fAmount <= 0){
		thread mrm_uiFlashWidget(ePlayer,"mrmItem"+fLastSelectedBuyItem,"1 0 0 0.6","0.58 0.52 0.99 0.50",3);
		return;
	}
	
	//DECIDE PAYMENT METHOD if there is more than one.
	//default is requisition
	float fPaymentMethod;
	fPaymentMethod = mrm_getValidPaymentMethod(ePlayer,vItemCost);
	
	//method 2 requires user input (and is later used to abbort)
	if(fPaymentMethod == 2){
		ePlayer.setFloatVar("mrmUiLevel",1);
		ePlayer.addhud("coop_mrmDialog");
		
		while(ePlayer.getFloatVar("mrmUiLevel") != 0){
			wait(0.1); //0.1
			if(doesEntityExist(ePlayer) != 1){
				return;
			}
		}
		//GRAB CREDITS TYPE the player decided for
		fPaymentMethod = ePlayer.getFloatVar("mrmPaymentMethod");
		ePlayer.removehud("coop_mrmDialog");
		
		//ABBORT - Player did cancel
		if(fPaymentMethod == 2){	
			return;
		}
	}
	
	//REMOVE 1 ITEM FROM GALLERY
	fAmount--;
	ePlayer.setFloatVar("mrmItemBuyAvailable"+fLastSelectedBuyItem,fAmount);
	
	//START 
	vector vPlayerPayment;
	vector vPlayerBallance;
	
	//remove the item from resources and keep a record
	vPlayerPayment_z = 1;	//purchase 1 item always
	vItemCost_z--;			//remove 1 item
	
	if(fPaymentMethod == 0){
		vPlayerPayment_x = vItemCost_x;
	}else if(fPaymentMethod == 1){
		vPlayerPayment_y = vItemCost_y;
	}
	
	//UPDATE PLAYER BALANCE
	vPlayerBallance = mrm_removeFromPlayerBalance(ePlayer,vPlayerPayment);
	
	//UPDATE ui
	if(fAmount <= 0){
		sendwidgetcommand(ePlayer,"mrmItem"+fLastSelectedBuyItem,"shader",sEmptyShader);
		sendwidgetcommand(ePlayer,"mrmItemEnergy","title","0");
		sendwidgetcommand(ePlayer,"mrmItemReq","title","0");
		sendwidgetcommand(ePlayer,"mrmItemTitle","labeltext","^");
		sendwidgetcommand(ePlayer,"mrmItemDescr","labeltext","^");
	}
	
	sendwidgetcommand(ePlayer,"mrmItemAmmount","title",""+fAmount);
	sendwidgetcommand(ePlayer,"mrmInv"+fFreeInvSlot,"shader",ePlayer.getStringVar("mrmItemBuyShader"+fLastSelectedBuyItem));
	sendwidgetcommand(ePlayer,"mrmInv"+fFreeInvSlot,"bgcolor","0.5 0.5 0.5 0.5");
	
	//remember which itemslot the new inventory weapon is associated to
	//we will use the sellitem data and not write new data...
	//...so items can be sold again and memory usage is low
//ePlayer.hudprint("mrmInvAssociation: inv("+fFreeInvSlot+") buyItem("+fLastSelectedBuyItem+") - payed:("+vPlayerPayment+")\n");
	
	ePlayer.setFloatVar("mrmInvAssociation"+fFreeInvSlot,fLastSelectedBuyItem);
	ePlayer.setVectorVar("mrmInvPayment"+fFreeInvSlot,vPlayerPayment);	
}

void mrm_returnItemFromInventory(entity ePlayer,float fLastSelectedSellItem)
//===================================
// takes item from inventory away and puts it back to item gallery
//===================================
{
	float fInvItemAssociatedItemNumber;
	fInvItemAssociatedItemNumber = ePlayer.getFloatVar("mrmInvAssociation"+fLastSelectedSellItem);

	//UPDATE PLAYER BALANCE
	vector vPaymentRecord;
	vector vPlayerBallance;
	//refund player credits or requisition points 
	vPaymentRecord	= ePlayer.getVectorVar("mrmInvPayment"+fLastSelectedSellItem);
	vPlayerBallance	= mrm_addToPlayerBalance(ePlayer,vPaymentRecord);
	
	//ePlayer.hudprint("1 vPaymentRecord: "+vPaymentRecord+"\n");
	
	//keep track - remove one item in that slot
	vPaymentRecord_z--;

	//add item to sell slot/gallery
	float fAmount;
	float fBuyable;
	fAmount = ePlayer.getFloatVar("mrmItemBuyAvailable"+fInvItemAssociatedItemNumber);
	fBuyable = fAmount;
	fAmount++;
	ePlayer.setFloatVar("mrmItemBuyAvailable"+fInvItemAssociatedItemNumber,fAmount);
	
	sendwidgetcommand(ePlayer,"mrmItemAmmount","title",""+fAmount);
	
	//clear inventory if it was the last item in that slot
	if(vPaymentRecord_z == 0){
		ePlayer.setFloatVar("mrmInvAssociation"+fLastSelectedSellItem,0);
		sendwidgetcommand(ePlayer,"mrmInv"+fLastSelectedSellItem,"shader",sEmptyShader);
		sendwidgetcommand(ePlayer,"mrmInv"+fLastSelectedSellItem,"bgcolor","0.5 0.5 0.5 0.5");
		sendwidgetcommand(ePlayer,"mrmInvTitle","labeltext","^");
		sendwidgetcommand(ePlayer,"mrmInvDescr","labeltext","^");
	}
	
	//update payment for this item
	ePlayer.setVectorVar("mrmInvPayment"+fLastSelectedSellItem,vPaymentRecord);
	
	//set gallery shader for returned item
	sendwidgetcommand(ePlayer,"mrmItem"+fInvItemAssociatedItemNumber,"shader",ePlayer.getStringVar("mrmItemBuyShader"+fInvItemAssociatedItemNumber));
}

float mrm_isInventoryFull(entity ePlayer)
//===================================
// Check if inventory is full of this player (max 5 items)
//===================================
{
	float fInvSlot=1;
	while(ePlayer.getFloatVar("mrmInvAssociation"+fInvSlot) != 0){
		if(fInvSlot >= 5){
			return 1;
		}	
		fInvSlot++;
	}
	return 0;
}

//SELECT PAYMENT METHOD/CREDITS
void mrm_uiPaymentSelectEc(entity ePlayer)
{
	ePlayer.setFloatVar("mrmPaymentMethod",1);
	ePlayer.setFloatVar("mrmUiLevel",0);
}
void mrm_uiPaymentCancel(entity ePlayer)
{
	ePlayer.setFloatVar("mrmPaymentMethod",2);
	ePlayer.setFloatVar("mrmUiLevel",0);
}
void mrm_uiPaymentSelectReq(entity ePlayer)
{
	ePlayer.setFloatVar("mrmPaymentMethod",0);
	ePlayer.setFloatVar("mrmUiLevel",0);
}

float mrm_getValidPaymentMethod(entity ePlayer,vector vItemCost)
//===================================
//returns payment method number - -1=none 0=requistion 1=Eenergy 2=pushmenu to make decision
//===================================
{
	if(doesEntityExist(ePlayer) != 1){ return -1; }
	
	float fItemEc;
	float fItemReq;
	float fPlayerEc;
	float fPlayerReq;
	vector vPlayerBallance;
	fItemEc = vectorGetY(vItemCost);
	fItemReq = vectorGetX(vItemCost);
	
	vPlayerBallance = ePlayer.getVectorVar("mrmCredits");
	fPlayerEc = vectorGetY(vPlayerBallance);
	fPlayerReq = vectorGetX(vPlayerBallance);
	
	//decide for requistion
	if(fItemEc == 0 || fPlayerEc < fItemEc){
		return 0;
	}
	//decide for energy
	else if(fItemReq == 0 || fPlayerReq < fItemReq){
		return 1;
	}
	return 2;
}

float mrm_getFreeInventorySlot(entity ePlayer)
//===================================
//return first free inventory slot of player
//===================================
{
	float fInvSlot;
	float fInvAssociation;
	do
	{
		fInvSlot++;
		fInvAssociation =  ePlayer.getFloatVar("mrmInvAssociation"+fInvSlot);
//ePlayer.hudprint("Inventar slot"+fInvSlot+"\n");
	} while ( fInvAssociation != 0 );
	return fInvSlot;
}

vector mrm_addToPlayerBalance(entity ePlayer,vector vCredits)
//===================================
//menu
//===================================
{
	vector vBallance;
	vBallance = ePlayer.getVectorVar("mrmCredits");
//ePlayer.hudprint("Credits: "+vBallance+" add: "+vCredits+" Credits new: "+(vBallance + vCredits)+"\n");
	vBallance = (vBallance + vCredits);
	ePlayer.setVectorVar("mrmCredits",vBallance);
	
	sendwidgetcommand(ePlayer,"mrmReqValue","title",vectorGetX(vBallance));
	sendwidgetcommand(ePlayer,"mrmEnergyValue","title",vectorGetY(vBallance));
	
	return vBallance;
}

vector mrm_removeFromPlayerBalance(entity ePlayer,vector vCredits)
{
//===================================
//menu
//===================================
	vector vBallance;
	vBallance = ePlayer.getVectorVar("mrmCredits");
	vBallance = (vBallance - vCredits);
//ePlayer.hudprint("Current Credits: "+vBallance+" remove: "+vCredits+" Credits new: "+(vBallance - vCredits)+"\n");
	ePlayer.setVectorVar("mrmCredits",vBallance);

	sendwidgetcommand(ePlayer,"mrmReqValue","title",vectorGetX(vBallance));
	sendwidgetcommand(ePlayer,"mrmEnergyValue","title",vectorGetY(vBallance));
	
	return vBallance;
}

void mrm_accept(entity ePlayer)
//===================================
// accepts the transaction and closes the menu
//===================================
{
	
	if(mrm_hasRequiredInventory($player) != 1){
		//play reject sound on player
		ePlayer.playsound("sound/misc/menu/reject.wav",0,2,100);
		
		sendclientcommand(ePlayer,"globalwidgetcommand mrmAccept disable");
		wait(1);
		
		if(!doesEntityExist(ePlayer)){ return; }
		
		sendclientcommand(ePlayer,"globalwidgetcommand mrmAccept enable");
		return;
	}
	
	//play click sound on player
	ePlayer.playsound("sound/misc/menu/click.wav",0,2,100);
	
	//let the scripts know player is done
	ePlayer.setFloatVar("mrmLoadOutComplete",1);
	
	//signal MOMy the that we are done
	//wait a moment for MOMy to take the toys away, before we give new ones
	sendclientcommand(ePlayer,"use Knife");
	wait(0.1);
	
	if(!doesEntityExist(ePlayer)){ return; }
	
	float fInv;
	float fInventoryItem;
	string sItem;
	for(fInv=1;fInv<=5;fInv++){
		fInventoryItem = ePlayer.getFloatVar("mrmInvAssociation"+fInv);
		if(fInventoryItem != 0){
			sItem = ePlayer.getStringVar("mrmItemBuy"+fInventoryItem);
			
			//aftermath mod compatibility
			spawn("item","model",sItem,"origin",""+ePlayer.getOrigin(),"scale","0.01");
			ePlayer.setFloatVar("mrmInvAssociation"+fInv,0);
			ePlayer.hudprint(sItem+" - spawned\n");

			//check if it is a item - not supported with out coop mod
			/*if(getIntStringFind(sItem,"item") != -1){
				spawn("item","model",sItem,"origin",""+ePlayer.getOrigin(),"scale","0.01");
				ePlayer.setFloatVar("mrmInvAssociation"+fInv,0);
				ePlayer.hudprint(sItem+" - spawned\n");
			}else{
				ePlayer.give(sItem);
				ePlayer.hudprint(sItem+" - given\n");
			}*/
		}
	}	
	//play pickup sound on player
	ePlayer.playsound("sound/player/player_invpickup.wav",0,2,100);
}
