//[b607] chrissstrahl - this fixes the issue that the holodeck does not move to player
//this is because the holodeck is moved before the player really is present
//it turns out this is a bug that might only occur when the Visual Studio debugger is active
//non the less it should be done the proper way...

// USED IN SINGLEPLAYER ONLY

//-----------------------------------------------------------------
//
//  EF2/LOTR Level Script File
//
//  Level:		ent-training5
//  Script By:   	Kenny T
//  Geometry By:  	Kenny T
//  Created on:   	6/14/2002
//
//  Last Edited:  	9-22-2002 Benson R
//
//-----------------------------------------------------------------

//-----------------------------------------------------------------
//-----------------------------------------------------------------
//  DEFINE SCRIPT
//-----------------------------------------------------------------
//-----------------------------------------------------------------

void main();
void holoDeckSetup();
void holoDeckFadeOut();
void holoDeckFadeIn();
void init();
	
void lurkerFromDeck();
void lurkerBustUpFromDeck();

void lurkerDoorOpenGo();
void lurkerDoorBreaksCeling();

void lurkerFromBehindBox();

void sendLurkerThroughFrontDoor();
void knockDownFrontDoor();

void sendLurkerThroughUpStairsDoor();

void counterTopDoorGo();

void cycleUpStairsLighting();

void threadCallLightning1();
void threadCallLightning2();
void threadCallLightning3();
void threadCallLightning4();
void threadCallLightning5();
void threadCallLightning6();
void threadCallLightning7();

void callLightning( float whichBoltToUse, float flashInsideLighningLights );
void SetupLighting();
void lightningFlash( float randomLightningShouldBeChoosen, string lightningSetNamePreFix, float shouldLightsBeTurnedOn );
void moveLight1( entity lightToMove, float angularVelocityInDegreesPerSecond );

//-----------------------------------------------------------
//-----------------------------------------------------------
//--- variables

float lightningIsReadyToBeCalled = 1;
float numberOfLurkersKilled = 0;
float totalNumberOfLurkers = 5;

//-----------------------------------------------------------------
//-----------------------------------------------------------------
//  INCLUDES
//-----------------------------------------------------------------
//-----------------------------------------------------------------

#include "maps/global_scripts/global_common.scr"
#include "maps/global_scripts/global_debugUtils.scr"
#include "maps/global_scripts/global_math.scr"

//-----------------------------------------------------------------
//-----------------------------------------------------------------
//  MAIN THREAD
//-----------------------------------------------------------------
//-----------------------------------------------------------------

void main()
{
	//--- set the sky portal
	$sky.rendereffects( "+skyorigin" );
	$skyDome.hide();
	$world.entity_fade_dist( 4500 );
	$world.farplane_color( '0.1 0.12 0.1' );
	$world.farplane ( 2000 );
		
	$world.weather( "rain", 300 );
	
	cache( "char/alien-type1a-lurker.tik" );
	
	spawn( "func_earthquake", "targetname", "lightningQuake1");
	
	//gamefix chrissstrahl - remove trigger that was left inside that can be activated by ai
	$trigger_endTraining.remove();
	
	holoDeckSetup();
	init();
	holoDeckFadeOut();
	
	callLightning( 0, 0 );
}

//------------------------
// this thread sets up the Holo Deck And Player
//------------------------
void holoDeckSetup()
{
	cam_fadeout( .05, 0, 0, 0, 1, 0 );

	globalCommon_SpawnScriptModel( "enviro/enterprise_holo-deck.tik", "holoDeck", '0 0 0', 0 );

	//soundtrack( "music/igm1.mus" );
	
	//[b607] chrissstrahl - fix holodeck being moved to soon
	waitForPlayer();

	$player.immobilize( 1 );
	$holoDeck.notsolid();
	$holoDeck.origin( $player.getorigin() );
	$holoDeck.rendereffects( "+depthhack" );
	
	$holoDeck.forcealpha( 1 );
	$holoDeck.alpha( 1 );
}

//------------------------
// this thread makes the Holo Deck Fade Out
//------------------------
void holoDeckFadeOut()
{
	cam_fadein( .5, 0, 0, 0, 1, 0 );
	wait( 2 );
	
	$player.loadobjectives( "secret1" );
	
	$player.setobjectiveshow( "secretObjectiveS1", 1 );
		
	$holoDeck.fade( 2, 0 );
	wait( 2 );
	$holoDeck.hide();
	$holoDeck.alpha( 0 );
	
	$player.immobilize( 0 );
	
	level_ai ( 1 );
}

//------------------------
// this thread makes the Holo Deck Fade Out
//------------------------
void holoDeckFadeIn()
{
	$player.setobjectivecomplete( "secretObjectiveS1", 1 );

	wait( 3 );

	$player.immobilize( 1 );
	
	$holoDeck.origin( $player.getorigin() );

	$holoDeck.show();
	$holoDeck.fadein( 2, 1 );
	wait( 2 );
	$holoDeck.alpha( 1 );
	wait( 2 );
	
	spawn ( "trigger_changelevel", "targetname", "trigger_endTraining", "map", "" );
	wait( .05 );
	trigger ( "$trigger_endTraining" );
	
	wait( 5 );
	
	stuffcmd ( "disconnect\n" );
}


void init()
{		
	//Setup Lightning
	SetupLighting();
	
	thread cycleUpStairsLighting();
	
	// Next compile delete this line
	if( doesEntityExist( $teleportPlayerToStart ) )
	{
		$teleportPlayerToStart.remove();
	}
	
	//Setup swinging lights
	$celingLight1.bind( $celingLightOrigin1 );
	$celingDLight1.bind( $celingLightOrigin1 );
	
	$celingLight2.bind( $celingLightOrigin2 );
	$celingDLight2.bind( $celingLightOrigin2 );
	
	$celingLight3.bind( $celingLightOrigin3 );
	$celingDLight3.bind( $celingLightOrigin3 );
	
	$celingDLight1.hide();
	$celingDLight2.hide();
	$celingDLight3.hide();
	//Made not solid in editor, else dlights are off
	//$celingDLight1.notsolid();
	
	$celingDLight1.lightRadius( 196 );
 	$celingDLight1.lightOn();
 	$celingDLight2.lightRadius( 196 );
 	$celingDLight2.lightOn();
 	$celingDLight3.lightRadius( 196 );
 	$celingDLight3.lightOn();
	
	// setup counter Top
	$counterDoor.bind( $counterDoorOrigin );
	thread globalCommon_OnUse ( $counterDoor , "counterTopDoorGo" );
	
	//setup Broken deck pieces
	$deckBusted.hide();
	$deckBusted.notsolid();
	$deckBustedPiece1.hide();
	$deckBustedPiece1.notsolid();
	$deckBustedPiece2.hide();
	$deckBustedPiece2.notsolid();
	$deckBustedPiece3.hide();
	$deckBustedPiece3.notsolid();
	$deckBustedPiece4.hide();
	$deckBustedPiece4.notsolid();
	$deckBustedPiece5.hide();
	$deckBustedPiece5.notsolid();
	
	$deckSolid.notsolid();
	
	$deckBustedPiece1.bind( $deckBustedPieceOrigin1 );
	$deckBustedPiece2.bind( $deckBustedPieceOrigin2 );
	$deckBustedPiece3.bind( $deckBustedPieceOrigin3 );
	$deckBustedPiece4.bind( $deckBustedPieceOrigin4 );
	$deckBustedPiece5.bind( $deckBustedPieceOrigin5 );
	
	// Setup First Door Lurker
	$lurkerBustUpDeck.thread( "lurkerBustUpFromDeck" );
	$triggerLurkerFromDeck.thread( "lurkerFromDeck" );
	
	$lurkerPusher3.nottriggerable();
	$cabinCeling1.notsolid();
	//$cabinCeling2.notsolid();
	
	$downStairsDoor1.bind( $downStairsDoorOrigin1 );
	thread globalCommon_OnUse ( $downStairsDoor1 , "lurkerDoorOpenGo" );
	$lurkerJumpsUpFloors.thread( "lurkerDoorBreaksCeling" );
	
	//Setup Lurker BehindBox
	$triggerLurkerFromBehindBox.thread( "lurkerFromBehindBox" );
	$lurkerPusher4.speed( 600 );
	
	//Set up Lurk Through Front Door
	$frontDoorPiece1.notsolid();
	$frontDoor1.notsolid();
	$frontDoor1.bind( $frontDoorOrigin1 );
	$frontDoorPiece1.bind( $frontDoorOrigin1 );
	$triggerLurkerFrontDoor.thread( "sendLurkerThroughFrontDoor" );
	$triggerKnockDownFrontDoor.thread( "knockDownFrontDoor" );
	
	//Set up Lurk Through Upstairs Door
	$upStairsDoor1.bind( $upStairsDoorOrigin1 );
	$upStairsDoorPiece1.bind( $upStairsDoorOrigin1 );
	thread globalCommon_OnUse ( $upStairsDoorPiece1, "sendLurkerThroughUpStairsDoor" );
	
	waitforplayer();

	$world.clearAvailableViewModes();
	$world.addAvailableViewMode( "none" );

	$world.playsound( "sound/player/player_invpickup.wav", 3, 1, 10000 );
	$player.give( "models/weapons/worldmodel-phaser-STX.tik" );
	$player.give( "models/weapons/worldmodel-compressionrifle.tik" );
	$player.give( "models/weapons/worldmodel-fieldassaultrifle.tik" );
	$player.give( "models/weapons/worldmodel-rom-radgun.tik" );
	
	$player.ammo( "Plasma", 200 );
	$player.ammo( "Phaser", 200 );
	$player.ammo( "Disruptor", 200 );
	$player.ammo( "Idryll", 200 );
	$player.ammo( "Fed", 200 );

	$player.armor( "BasicArmor", 100 );

	$player.use( "fieldassaultrifle" );
}

//------------------------
// Lurker Pops up from deck
//------------------------
void lurkerFromDeck()
{	
	$triggerLurkerFromDeck.nottriggerable();
	
	$lurkerPusher1.angles( '-72 0 0' );
	$lurkerPusher1.speed( 200 );
	
	$lurkerPusher2.angles( '-10 0 0' );
	$lurkerPusher2.speed( 400 );

	$deckSolid.hide();
	$deckBusted.show();
	$deckBustedPiece1.show();
	$deckBustedPiece2.show();
	$deckBustedPiece3.show();
	$deckBustedPiece4.show();
	$deckBustedPiece5.show();
	
	globalCommon_SpawnActor( "char/alien-type1a-lurker.tik", "lurker1", '602.00 130.00 -30.00', 0 );
	$lurker1.anim( "idle" );
	$lurker1.scale( 1.2 );
	$lurker1.killthread( "checkNumberOfLurkersDead" );
	
	$lurker1.lightRadius( 128 );
 	$lurker1.lightOn();

	$deckClip.moveUp( 48 );
	$deckClip.time( .1 );
	waitfor( $deckClip );
}

//------------------------
//Called when lurker hits trigger in busting up from deck
//------------------------
void lurkerBustUpFromDeck()
{
	$lurkerBustUpDeck.nottriggerable();
	
	$deckBustedPieceOrigin1.time( .15 );
	$deckBustedPieceOrigin2.time( .2 );
	$deckBustedPieceOrigin3.time( .15 );
	$deckBustedPieceOrigin4.time( .15 );
	$deckBustedPieceOrigin5.time( .2 );
	
	$deckBustedPieceOrigin1.rotateXdown( 100 );
	$deckBustedPieceOrigin1.rotateYup( 45 );
	
	$deckBustedPieceOrigin2.rotateXup( 175 );
	$deckBustedPieceOrigin2.rotateYdown( 25 );
	
	$deckBustedPieceOrigin3.rotateXdown( 105 );
	
	$deckBustedPieceOrigin4.rotateXup( 170 );
	$deckBustedPieceOrigin4.rotateYup( 25 );
	
	$deckBustedPieceOrigin5.rotateXdown( 120 );
	$deckBustedPieceOrigin5.rotateYdown( 35 );
	
	$lurker1.anim( "attack_charge_pounce" );
	waitforanimation( $lurker1, "attack_charge_pounce" );

	$lurker1.anim( "attackcombo1" );
	$lurker1.lightOff();
	waitforanimation( $lurker1, "attackcombo1" );
	//$lurker1.anim( "attackcombo2" );
	//waitforanimation( $lurker1, "attackcombo2" );
	//$lurker1.anim( "attackcombo3" );
	//waitforanimation( $lurker1, "attackcombo3" );
	$lurker1.anim( "idle" );
	$lurker1.ai_on();
}

//------------------------
//Called when First Door Used, Lurker jumps upstairs
//------------------------
void lurkerDoorOpenGo()
{
	$downStairsDoor1.nouse();
	
	$lurkerPusher3.speed( 1000 );
	
	//Call Lightning Strike
	thread callLightning( 2, 2 );
	
	$downStairsDoorOrigin1.time( 1 );
	$downStairsDoorOrigin1.rotateYdown( 90 );

	globalCommon_SpawnActor( "char/alien-type1a-lurker.tik", "lurker2", '75.68 835.68 16.00', 70 );
	$lurker2.anim( "idle" );
	$lurker2.scale( 1.2 );
	$lurker2.killthread( "checkNumberOfLurkersDead" );
		
	$lurker2.lightRadius( 128 );
 	$lurker2.lightOn();
 	
 	$lurker2.anim( "takeoff" );
 	wait( 1.6 );
 	//$lurker2.gravity( .01 );
 	$lurkerPusher3.triggerable();
 	wait( 3 );
 	$cabinCeling1.solid();
}

//------------------------
//Lurker Door Breaks through celing
//------------------------
void lurkerDoorBreaksCeling()
{
	$lurkerJumpsUpFloors.nottriggerable();
	
	$cabinCeling1.remove();
	wait( .25 );
	$lurker2.origin( '84 652 216' );
	$lurker2.angle( 270 );
	
	$lurker2.ai_on();
}

//------------------------
//Lurker Jumps From Back Of Box
//------------------------
void lurkerFromBehindBox()
{
	$triggerLurkerFromBehindBox.nottriggerable();
	
	//Call Lightning Strike
	thread callLightning( 0, 3 );
	
	globalCommon_SpawnActor( "char/alien-type1a-lurker.tik", "lurker3", '65.60 317.60 56.00', 90 );
	$lurker3.scale( 1.2 );
	$lurker3.killthread( "checkNumberOfLurkersDead" );
	
	$lurker3.anim( "attackcombo3" );
	waitforanimation( $lurker3, "attackcombo3" );
	
	$lurker3.ai_on();
}

//------------------------
//Lurker Busts Through front door
//------------------------
void sendLurkerThroughFrontDoor()
{
	$triggerLurkerFrontDoor.nottriggerable();

	$lurkerPusher5.angles( '350 0 0' );
	$lurkerPusher5.speed( 400 );
	
	globalCommon_SpawnActor( "char/alien-type1a-lurker.tik", "lurker4", '-200 -34  8', 0 );
	$lurker4.scale( 1.2 );
	$lurker4.killthread( "checkNumberOfLurkersDead" );
		
	$lurker4.anim( "crash" );
	waitforanimation( $lurker4, "crash" );
	$lurker4.anim( "attackcombo2" );
	wait( .05 );
	$lurker4.ai_on();
	
	$lurkerPusher5.remove();
}

//------------------------
//Lurker Busts Through front door
//------------------------
void knockDownFrontDoor()
{
	$triggerKnockDownFrontDoor.nottriggerable();
	
	$frontDoorOrigin1.time( .3 );
	$frontDoorOrigin1.rotateYup( 90 );
	wait( .1 );
	$frontDoorPiece1.remove();
	
	//Call Lightning Strike
	thread callLightning( 3, 2 );
}

//------------------------
//Lurker Busts Through Upstairs door
//------------------------
void sendLurkerThroughUpStairsDoor()
{
	$upStairsDoorPiece1.nouse();
	
	globalCommon_SpawnActor( "char/alien-type1a-lurker.tik", "lurker5", '314.00 290.00 204.00', 180 );
	$lurker5.scale( 1.2 );
	$lurker5.killthread( "checkNumberOfLurkersDead" );
	
	$upStairsDoorPiece1.notsolid();
	$upStairsDoor1.notsolid();
	
	trigger( "$upStairsDoorExplode1" );
	
	$upStairsDoorOrigin1.time( .3 );
	$upStairsDoorOrigin1.rotateYdown( 90 );
	wait( .1 );
	$upStairsDoorPiece1.remove();
		
	$lurker5.anim( "attack_charge_pounce" );
	waitforanimation( $lurker5, "attack_charge_pounce" );
	
	//Call Lightning Strike
	thread callLightning( 0, 3 );
	
	$lurker5.anim( "attackcombo2" );
	wait( .05 );
	$lurker5.ai_on();	
}

//---------------------------
// Check for Number Of Lurkers Dead
//---------------------------
void checkNumberOfLurkersDead()
{
	numberOfLurkersKilled += 1;
	
	if( numberOfLurkersKilled == totalNumberOfLurkers )
	{
		holoDeckFadeIn();
	}
}

//------------------------
//Counter Rotates Up
//------------------------
void counterTopDoorGo()
{
	$counterDoor.nouse();
	
	//Call Lightning Strike
	thread callLightning( 0, 3 );
	
	$counterDoorOrigin.time( 1 );
	$counterDoorOrigin.rotateZup( 110 );
	waitfor( $counterDoorOrigin );
}

//------------------------
//Sets cycling Up Stairs Lighting
//------------------------
void cycleUpStairsLighting()
{
	float longWait, mediumWait, shortWait; 
		
	while( 1 )
	{
		longWait = randomint( 2 ) + .3;
		mediumWait = randomint( 1 ) + 1;
		shortWait = randomint( .4 ) + .1;
		
		$world.light_lightstyle( "lampLightInside" , "a" , 0 );
		$celingLightcone4.hide();
		wait( longWait ); //off
		$world.light_lightstyle( "lampLightInside" , "z" , 0 );
		$celingLightcone4.show();
		wait( shortWait );//on
		$world.light_lightstyle( "lampLightInside" , "a" , 0 );
		$celingLightcone4.hide();
		wait( shortWait );//off
		$world.light_lightstyle( "lampLightInside" , "z" , 0 );
		$celingLightcone4.show();
		wait( shortWait );//on
		$world.light_lightstyle( "lampLightInside" , "a" , 0 );
		$celingLightcone4.hide();
		wait( mediumWait );//off
		$world.light_lightstyle( "lampLightInside" , "z" , 0 );
		$celingLightcone4.show();
		wait( longWait );//on
		$world.light_lightstyle( "lampLightInside" , "a" , 0 );
		$celingLightcone4.hide();
		wait( mediumWait );//off
		$world.light_lightstyle( "lampLightInside" , "z" , 0 );
		$celingLightcone4.show();
		wait( shortWait );//on
		$world.light_lightstyle( "lampLightInside" , "a" , 0 );
		$celingLightcone4.hide();
		wait( shortWait );//off
		$world.light_lightstyle( "lampLightInside" , "z" , 0 );
		$celingLightcone4.show();
		wait( mediumWait );//on
	}
}

//------------------------
//Triggered Lightning Flashes
//------------------------
void threadCallLightning1()
{
	$triggerCallLightning1.nottriggerable();
	
	callLightning( 4, 0 );
	wait( .1 );
	
	$triggerCallLightning1.triggerable();
}

void threadCallLightning2()
{
	$triggerCallLightning2.nottriggerable();

	callLightning( 4, 0 );
	wait( .1 );
	
	$triggerCallLightning2.triggerable();
}

void threadCallLightning3()
{
	$triggerCallLightning3.nottriggerable();
	
	callLightning( 1, 0 );
	wait( .1 );
	
	$triggerCallLightning3.triggerable();
}

void threadCallLightning4()
{
	$triggerCallLightning4.nottriggerable();
	
	callLightning( 2, 2 );
	wait( .1 );
	
	$triggerCallLightning4.triggerable();
}

void threadCallLightning5()
{
	$triggerCallLightning5.nottriggerable();
	
	callLightning( 2, 3 );
	wait( .1 );
	
	$triggerCallLightning5.triggerable();
}

void threadCallLightning6()
{
	$triggerCallLightning6.nottriggerable();
	
	callLightning( 2, 2 );
	wait( .1 );
	
	$triggerCallLightning6.triggerable();
}

void threadCallLightning7()
{
	$triggerCallLightning7.nottriggerable();
	
	callLightning( 3, 0 );
	wait( .1 );
	
	$triggerCallLightning7.triggerable();
}

//------------------------
//Makes Lightning Flash
//------------------------
void callLightning( float whichBoltToUse, float flashInsideLighningLights )
{
	if( lightningIsReadyToBeCalled == 1 )
	{
		lightningIsReadyToBeCalled = 0;
		
		if( whichBoltToUse == 0 )
		{
			//Flash Lightning( Choose Random Set of Lightning Bolts 0 = no 1 = yes, Name of Pre-determined Set of Lightning Bolts, Should D-Lights Be Flickerd 1=random 2=front 3=back 0=none );
			thread lightningFlash( 1, " ", flashInsideLighningLights );

			thread moveLight1( $celingLightOrigin1, 2 );
			thread moveLight1( $celingLightOrigin2, 2 );
			moveLight1( $celingLightOrigin3, 2 );
			
			lightningIsReadyToBeCalled = 1;
		}
		if( whichBoltToUse == 1 )
		{
			//Flash Lightning( Choose Random Set of Lightning Bolts 0 = no 1 = yes, Name of Pre-determined Set of Lightning Bolts, Should D-Lights Be Flickerd 1 = random 2 = front 3 = back 0 = none );
			thread lightningFlash( 0, "lightninga", flashInsideLighningLights );

			thread moveLight1( $celingLightOrigin1, 2 );
			thread moveLight1( $celingLightOrigin2, 2 );
			moveLight1( $celingLightOrigin3, 2 );
			
			lightningIsReadyToBeCalled = 1;
		}
		if( whichBoltToUse == 2 )
		{
			//Flash Lightning( Choose Random Set of Lightning Bolts 0 = no 1 = yes, Name of Pre-determined Set of Lightning Bolts, Should D-Lights Be Flickerd 1 = random 2 = front 3 = back 0 = none );
			thread lightningFlash( 0, "lightningb", flashInsideLighningLights );

			thread moveLight1( $celingLightOrigin1, 2 );
			thread moveLight1( $celingLightOrigin2, 2 );
			moveLight1( $celingLightOrigin3, 2 );
			
			lightningIsReadyToBeCalled = 1;
		}
		if( whichBoltToUse == 3 )
		{
			//Flash Lightning( Choose Random Set of Lightning Bolts 0 = no 1 = yes, Name of Pre-determined Set of Lightning Bolts, Should D-Lights Be Flickerd 1 = random 2 = front 3 = back 0 = none );
			thread lightningFlash( 0, "lightningc", flashInsideLighningLights );

			thread moveLight1( $celingLightOrigin1, 2 );
			thread moveLight1( $celingLightOrigin2, 2 );
			moveLight1( $celingLightOrigin3, 2 );
			
			lightningIsReadyToBeCalled = 1;
		}
		if( whichBoltToUse == 4 )
		{
			//Flash Lightning( Choose Random Set of Lightning Bolts 0 = no 1 = yes, Name of Pre-determined Set of Lightning Bolts, Should D-Lights Be Flickerd 1 = random 2 = front 3 = back 0 = none );
			thread lightningFlash( 0, "lightningd", flashInsideLighningLights );

			thread moveLight1( $celingLightOrigin1, 2 );
			thread moveLight1( $celingLightOrigin2, 2 );
			moveLight1( $celingLightOrigin3, 2 );
			
			lightningIsReadyToBeCalled = 1;
		}
	}
}

//------------------------
//Hides Lighting
//------------------------
void SetupLighting()
{
	// This thread hides the scriptobjects in the skybox related to the lightning
	
	float LightningVisualIndex;
	float MAX_lightningFlashObjects;
	float i;
	string lightningFlashName;
	entity lightningFlashObject;

	LightningVisualIndex = 1;
	MAX_lightningFlashObjects = 4;
	for ( i = MAX_lightningFlashObjects; i >= 1; i-- )
	{
		lightningFlashName = "lightninga" + LightningVisualIndex;
		lightningFlashObject = getentity( lightningFlashName );
		lightningFlashObject.hide();
		LightningVisualIndex += 1;
	}

	LightningVisualIndex = 1;
	MAX_lightningFlashObjects = 4;
	for ( i = MAX_lightningFlashObjects; i >= 1; i-- )
	{
		lightningFlashName = "lightningb" + LightningVisualIndex;
		lightningFlashObject = getentity( lightningFlashName );
		lightningFlashObject.hide();
		LightningVisualIndex += 1;
	}
	
	LightningVisualIndex = 1;
	MAX_lightningFlashObjects = 4;
	for ( i = MAX_lightningFlashObjects; i >= 1; i-- )
	{
		lightningFlashName = "lightningc" + LightningVisualIndex;
		lightningFlashObject = getentity( lightningFlashName );
		lightningFlashObject.hide();
		LightningVisualIndex += 1;
	}
	
	LightningVisualIndex = 1;
	MAX_lightningFlashObjects = 4;
	for ( i = MAX_lightningFlashObjects; i >= 1; i-- )
	{
		lightningFlashName = "lightningd" + LightningVisualIndex;
		lightningFlashObject = getentity( lightningFlashName );
		lightningFlashObject.hide();
		LightningVisualIndex += 1;
	}
	
	//TurnOff Dynamic Lights in area
	$world.light_lightstyle( "lightningLightFront" , "a" , 0 );
	$world.light_lightstyle( "lightningLightBack" , "a" , 0 );
	
	$triggerCallLightning1.thread( "threadCallLightning1" );
	$triggerCallLightning2.thread( "threadCallLightning2" );
	$triggerCallLightning3.thread( "threadCallLightning3" );
	$triggerCallLightning4.thread( "threadCallLightning4" );
	$triggerCallLightning5.thread( "threadCallLightning5" );
	$triggerCallLightning6.thread( "threadCallLightning6" );
	$triggerCallLightning7.thread( "threadCallLightning7" );
}

//------------------------
// Starts the lightning flashing.
//------------------------
void lightningFlash( float randomLightningShouldBeChoosen, string lightningSetNamePreFix, float shouldLightsBeTurnedOn )		
{
	float LightningTime;
	float LightningBrightness;
	float LightningCountFlashes;
	float LightningVisualIndex;
	float MAX_lightningFlashObjects;
	float i;
	float LightningLastFlash;
	float randomLightningSet;
	
	string lightningFlashName;
	string lightningLightToTurnOn;
	
	entity lightningFlashObject;

	LightningVisualIndex = 1;
	MAX_lightningFlashObjects = 4;

	// Randomly select lighning group set if desired else use a preditermined set 
	if( randomLightningShouldBeChoosen == 1 )
	{
		randomLightningSet = randomint( 4 ) + 1;
		if( randomLightningSet == 1 ){ lightningSetNamePreFix = "lightninga"; }
		if( randomLightningSet == 2 ){ lightningSetNamePreFix = "lightningb"; }
		if( randomLightningSet == 3 ){ lightningSetNamePreFix = "lightningc"; }
		if( randomLightningSet == 4 ){ lightningSetNamePreFix = "lightningd"; }
	}

	//decide which side of house lightning is comming from
	if( shouldLightsBeTurnedOn ==  1 )
	{
		if( randomint( 2 ) == 1 ){ lightningLightToTurnOn = "lightningLightFront"; }
		else{ lightningLightToTurnOn = "lightningLightBack"; }
	}
	else if( shouldLightsBeTurnedOn ==  2 )
	{
		lightningLightToTurnOn = "lightningLightFront";
	}			
	else if( shouldLightsBeTurnedOn ==  3 )
	{
		lightningLightToTurnOn = "lightningLightBack";
	}
	else{ lightningLightToTurnOn = " "; }

	LightningCountFlashes = randomint ( 5 ) + 3;

	while ( LightningCountFlashes >= 1 )
	{
		LightningTime = randomfloat( 0.15 ) + .05;
		LightningBrightness = randomfloat ( 0.5 ) + .2;

		//centerprint( "Count =" + LightningCountFlashes + " Time =" + LightningTime + " Brightness =" + LightningBrightness + "\n" );

		//Rock the camera!
		$lightningQuake1.duration( 1 );
		$lightningQuake1.magnitude(( LightningBrightness / 2 ) + .2 );

		trigger( "$lightningQuake1" );

		lightningFlashName = lightningSetNamePreFix + LightningVisualIndex;

		//print ( lightningFlashName + "\n" );

		lightningFlashObject = getentity( lightningFlashName );

		lightningFlashObject.show();
		lightningFlashObject.fadein( .05 );
		lightningFlashObject.alpha ( 1 );

		//No good lightning sounds.
		//if ( LightningCountFlashes <= 1 )
		//{
		//	if ( LightningBrightness >= .5 )
		//		lightningFlashObject.playsound( "sound/environment/weather/thunder1.wav", 1, 10000, 0 );
		//	else
		//		lightningFlashObject.playsound( "sound/environment/weather/lightning.wav", 1, 10000, 0 );
		//}

		// Lights on!
		cam_fadeout( LightningTime, 1, 1, 1, (LightningBrightness / 2), 0 );				
		lightningFlashObject.fade( LightningTime );
		$world.light_lightstyle( lightningLightToTurnOn , "z" , 0 );

		wait ( LightningTime / 4 );
		$world.light_lightstyle( lightningLightToTurnOn , "u" , 0 );
		wait ( LightningTime / 4 );
		$world.light_lightstyle( lightningLightToTurnOn , "n" , 0 );
		wait ( LightningTime / 4 );
		$world.light_lightstyle( lightningLightToTurnOn , "g" , 0 );
		wait ( LightningTime / 4 );

		// Lights Off
		cam_fadein( LightningTime, 1, 1, 1, (LightningBrightness / 2), 0 );
		$world.light_lightstyle( lightningLightToTurnOn , "a" , 0 );

		LightningCountFlashes -= 1;

		LightningLastFlash = LightningVisualIndex;

		LightningVisualIndex = randomint ( MAX_lightningFlashObjects );
		LightningVisualIndex ++;

		if ( LightningLastFlash == LightningVisualIndex )
		{
			LightningVisualIndex ++;
		}
	}
}

//------------------------
// this thread swings d-light s
//------------------------
void moveLight1( entity lightToMove, float angularVelocityInDegreesPerSecond )
{
	float angularVelocityDampiner = .96;
		
	float angleInDegrees = 0;
	
	float acceleration;
	acceleration = randomint( 2 );
	if( acceleration == 0 ){ acceleration = -1; }	
	
	float directionOfAcceleration = 1;
	
	float generateRandomAngle;
	generateRandomAngle= randomint( 4 ) - 1.9;
	
	float randomDirectionX = 1;
	float randomDirectionY = 1;
	float randomDirectionZ = 1;
	
	//randomDirectionX = randomint( 2 );
	//if( randomDirectionX == 0 ){ randomDirectionX = -1; }
	randomDirectionY = randomint( 2 );
	if( randomDirectionY == 0 ){ randomDirectionY = -1; }	
	randomDirectionZ = randomint( 2 );
	if( randomDirectionZ == 0 ){ randomDirectionZ = -1; }	
	
	vector originalLightVector;
	vector lightVector;
	
	lightVector = $celingLightOrigin1.getangles();
	originalLightVector = lightVector;
	
	while( angularVelocityInDegreesPerSecond > .1 || acceleration > 0.1  )
	{
		while( angularVelocityInDegreesPerSecond > .01 )
		{
			acceleration = angleInDegrees * -1.5;
			angleInDegrees += ( angularVelocityInDegreesPerSecond * .05 );
			angularVelocityInDegreesPerSecond += ( directionOfAcceleration * acceleration * .05 );

			lightVector_x += ( angularVelocityInDegreesPerSecond * randomDirectionX );
			lightVector_y = lightVector_y + (( angularVelocityInDegreesPerSecond / generateRandomAngle ) * randomDirectionY );
			lightVector_z += ( angularVelocityInDegreesPerSecond * randomDirectionX );

			lightToMove.angles( lightVector );
			wait( .05 );

			angularVelocityInDegreesPerSecond *= angularVelocityDampiner; 
		}
		while( angularVelocityInDegreesPerSecond < .01 )
		{
			acceleration = angleInDegrees * -1.5;

			angleInDegrees += ( angularVelocityInDegreesPerSecond * ( 1 / 20 ) );
			angularVelocityInDegreesPerSecond += ( directionOfAcceleration * acceleration * ( 1 / 20 ) );

			lightVector_x += angularVelocityInDegreesPerSecond;
			lightVector_y = lightVector_y + ( angularVelocityInDegreesPerSecond / generateRandomAngle );
			lightVector_z += angularVelocityInDegreesPerSecond;


			lightToMove.angles( lightVector );
			wait( .05 );

			angularVelocityInDegreesPerSecond *= angularVelocityDampiner; 
		}
	}
	lightToMove.angles( originalLightVector );
}
