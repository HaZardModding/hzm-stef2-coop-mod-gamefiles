////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////ACTOR
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_actor_aiOff(entity eActor);//there is no coop-ai_on!
void	globalCoop_actor_animateWaitForAnimation(entity eActor,string sAnimation);
void	globalCoop_actor_useWeapon(entity eActor,string sWeaponToUse);
void	globalCoop_actor_walkToVector(entity eActor,vector vOrigin,string sAnimName);
void	globalCoop_actor_walkTo(entity eActor,string sEntityRawTargetname,string sAnimName);
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////ARMORY
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_armory_waitForWeapon(entity ePlayer,string sWeapon,float fTimeout);
void	globalCoop_armory_waitForWeaponChange(entity ePlayer,string sWeapon,float fTimeout);
void	globalCoop_armory_equip(entity ePlayer);
void	globalCoop_armory_putAwayWeapon(entity ePlayer);
void	globalCoop_armory_restoreWeapon(entity ePlayer);
void	globalCoop_armory_useTiki(string sWeaponModel);
void	globalCoop_armory_useNamed(string sWeaponName);
void	globalCoop_armory_giveAmmo(entity ePlayer,float fAmmount);
void	globalCoop_armory_weaponRegister(string sWeaponTiki);
void	globalCoop_armory_weaponUnregister(string sWeaponTiki);
string	globalCoop_armory_weaponGiveAndReturnAsString(entity ePlayer,string sWeaponTiki);
string	globalCoop_armory_equipWithWeapons(entity ePlayer);
string	globalCoop_armory_returnTikiFromWeaponname(string sWeaponName);
////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////CHECK
////////////////////////////////////////////////////////////////////////////////
float	globalCoop_check_existingLivingEntity(entity e);
float	globalCoop_check_stringEntityExist(string sTargetname);
float	globalCoop_check_playerSpectator(entity ePlayer);
float	globalCoop_check_playerCrouching(entity ePlayer);
float	globalCoop_check_playerInRange(entity eOrigin,float fRange);
float	globalCoop_check_activeWeaponType(entity e,string sWeaponType);
float	globalCoop_check_isEntityTouchingOther(entity eTouch, entity eOther, float fPadding);
float	globalCoop_check_isEntityInsideOfEntity(entity e1,entity e2,float fPadding);
float	globalCoop_check_isBoundingBox2InsideOfBoundingBox1(vector vOrigin1,//ORIGIN BBOX1
															vector vBBoxMins1,//e.getMins()
															vector vBBoxMaxs1,//e.getMaxs()
															vector vOrigin2,//ORIGIN BBOX2
															vector vBBoxMins2,//e.getMins()
															vector vBBoxMaxs2,//e.getMaxs()
															float fPadding);//ADD TO BOUNDINGBOX, EXTRA SIZE (TOLLERANCE)
float	globalCoop_check_isEntityInsideOfPlayer(entity e1,float fPadding);
float	globalCoop_check_isPowerOfGiven(float fValue,float fGiven);
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////DIALOG
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_dialog_play(entity e,string dialogToPlay,float dialogVolume,float dialogMinRange,float fDialogHead);
void	globalCoop_dialog_waitForDialog(entity e);
string	globalCoop_dialog_returnCharName(entity e);
void	globalCoop_dialog_playSimple(entity e,string dialogToPlay,float dialogVolume,float dialogMinRange);
void	globalCoop_dialog_stop(entity eShutup);
void	globalCoop_dialog_stopAll();
////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////HUD
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_huds_textOrHud(entity ePlayer,string sHudName,string sText);
void	globalCoop_huds_textOrHudAll(string sHudName,string sText);
void	globalCoop_huds_registerMissionHud(string sHud,float fRegister,string sCommand);
void	globalCoop_huds_manageAll(string sHud,float fAdd,float fMissionHud);
void	globalCoop_huds_Add(entity ePlayer,string sHudName);
void	globalCoop_huds_AddAll(string sHud);
void	globalCoop_huds_AddTemporary(entity ePlayer,string sHudName,float fTime);
void	globalCoop_huds_Remove(entity ePlayer,string sHudName);
void	globalCoop_huds_RemoveAll(string sHud);
////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////LEVEL
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_level_onUse(entity eOnUse,string sThread);
void	globalCoop_level_triggerEntity(entity eToTrigger);
void	globalCoop_level_triggerable(entity eMakeTriggerable);
void	globalCoop_level_notTriggerable(entity eMakeNotTriggerable);
void	globalCoop_level_remove(entity eToRemove);
void	globalCoop_level_removePath(entity ePath);
void	globalCoop_level_hideAndNotSolid(entity eHideAndMakeNotsolid);
void	globalCoop_level_showAndSolid(entity eShowAndMakeSolid);
void	globalCoop_level_hide(entity eHide);
void	globalCoop_level_show(entity eShow);
void	globalCoop_level_callReliably(string sTreadName);
float	globalCoop_level_getFloatVar(entity eEntity,string sVaraiableName);
void	globalCoop_level_setFloatVar(entity eEntity,string sVaraiableName,float fVarValue);
string	globalCoop_level_getStringVar(entity eEntity,string sVaraiableName);
void	globalCoop_level_setStringVar(entity eEntity,string sVaraiableName,string sValueToSet);
void	globalCoop_level_secretShip();
void	globalCoop_level_endProcedur();
void	globalCoop_level_triggerLevelChange();
void	globalCoop_level_warpDroptofloor(entity eWarpDrop,vector vWarpTo);
void	globalCoop_level_moveToPos(entity eMove,vector vMoveTo);
void	globalCoop_level_warpEntityToVectorSafty(entity eWarpMe,vector vOrigin);
void	globalCoop_level_blocker(string sTargetname,vector vSize,vector vOrigin);
void	globalCoop_level_gatheringArea(string sTargetname,string sThread,float fPercentage,vector vSize,vector vOrigin);
void	globalCoop_level_gatheringAreaPlayerHandleHud(entity ePlayer, entity eTrigger,float fPlayersInside,float fPlayerExisting,float fPercentage,float fTime);
void	globalCoop_level_gatheringAreaActivated();
void	globalCoop_level_testSpawn();
void	globalCoop_level_showSpawn();
void	globalCoop_level_hideSpawn(); //[b610] chrissstrahl - added missing declaration

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////MAIN
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_main();
void	globalCoop_main_waitForPlayer();
void	globalCoop_main_waitForWarmupTime();
void	globalCoop_main_playerJoined();
void	globalCoop_main_warmupTimeMaster();
void	globalCoop_main_globalMessage(string sGlobalMessage);
void	globalCoop_main_globalCommand(string coopGlobalCmd);
void	globalCoop_main_print(string sText);
void	globalCoop_main_printTimeAndString(string sText);
void	globalCoop_main_devInfo(string sDeveloperInfo);
void	globalCoop_main_countDown(string sMessage,float fTime);
void	globalCoop_main_waitAFrame();
void	globalCoop_main_waitZeroDot2();
void	globalCoop_main_waitZeroDot5();
void	globalCoop_main_wait1DotZero();
void	globalCoop_main_wait1Dot5();
void	globalCoop_main_wait2DotZero();
void	globalCoop_main_waitZeroDotZero5();
void	globalCoop_playSound_c3v1r60(entity e,string sSound);
////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////MISSION
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_mission_accomplished();
void	globalCoop_mission_completed(string coop_nextmap);
void	globalCoop_mission_fail();
void	globalCoop_mission_failCivilianKilled();
void	globalCoop_mission_failWithReason(string sReason);
void	globalCoop_mission_setCeckpoint(string sParanoia);
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////OBJECTIVES
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_objectives_set(string objectiveText, string objectiveState , float objectiveItem , float objectiveshowNow);
void	globalCoop_objectives_update(string objectiveState,float objectiveItem,float objectiveshowNow);
void	globalCoop_objectives_update_dll(string objectiveState,string objectiveItem,string objectiveshowNow);
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////PLAYER
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_applaySpawnOriginOnReSpwanOrigin();
void	globalCoop_player_useAfter(entity ePlayer,string UseThis,float waitTime);
vector	globalCoop_player_warpToSpawn(entity ePlayer);
void	globalCoop_player_imobilizeAll(float doImmo);
void	globalCoop_player_transmittToAll(string sDataBurst);
void	globalCoop_player_transmitterLockOrUnlockId(float fPlayerId,float fLock);
float	globalCoop_player_transmitterReturnStringIndexAndUpdateIndex(entity ePlayer,string sFloatVarName);
void	globalCoop_player_transmitter(entity ePlayer,string sDataBurst);
void	globalCoop_player_transmittInstantly(entity ePlayer,string sDataBurst);
void	globalCoop_player_reconnectAll();
void	globalCoop_player_giveAll(string toGive,float useItNow);
void	globalCoop_player_takeAll(string toTake);
void	globalCoop_player_useAll(string UseThis);
void	globalCoop_player_displayEffectAll(string sEffectName,string sEffect);
void	globalCoop_player_waitForFreeReliableServerCommand(entity ePlayer);
//void	globalCoop_player_transporter();
void	globalCoop_player_makeSolidASAP(entity ePlayer);
void	globalCoop_player_joinDefaultTeam(entity ePlayer);
void	globalCoop_player_earthquake( float fMagnitude, float fDuration , float fDistance );
void	globalCoop_player_moveToSpawnIfDistance(float fDistance);
string	globalCoop_player_getLanguage(entity ePlayer); //[b611]
float	globalCoop_player_getCoopVersion(entity ePlayer); //[b611]
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////RETURN
////////////////////////////////////////////////////////////////////////////////
float	globalCoop_return_integerPlayersQuantity(float fLivingOnly);
float	globalCoop_return_integerPlayerId(entity ePlayer);
float	globalCoop_return_floatMultiplicatedPlayerQuantity(float fMultiplicateMe);
entity	globalCoop_return_playerClosest(entity eOrigin,			//The Origin Entity of the distance calculation
										float fMinDist,		//The Minimum distance required to be between both entitys,0=none
										float fMaxDist,		//The Maximum distance allowed between both entitys,0=none
										float fWatchDir,		//Calculate based on the watch direction of the given entity (works only with players);,0=no
										float fActive,			//Only Active Players
										string sClassToExclude,	//name of the class to exclude
										float fInvertExclusion,//do not exclude but include the given class
										float fEqualizeZAxis);	//Check only two dimensional
entity	globalCoop_return_playerClosestActive(entity eOrigin);
entity	globalCoop_return_playerClosestPreferActive(entity eOrigin);
float	globalCoop_return_floatBSPspawnAngleForPlayerId(float fPlayerId);
float	globalCoop_return_floatSpawnAngleForPlayerId(float fPlayerId);
string	globalCoop_return_string1IfString2IsEmpty(string s1,string s2);
string	globalCoop_return_stringActiveWeaponName(entity ePlayer);
//string	globalCoop_return_stringEntityTargetname(entity eGetTargetName,float fRaw);
entity	globalCoop_return_entityE1OrE2(entity e1,entity e2);
float	globalCoop_return_floatNotNegative(float fNotNegative);
float	globalCoop_return_floatNormalizedAngle(float fAngle);
vector	globalCoop_return_vectorPlayerBSPspawnOrigin(float fPlayerId);
vector	globalCoop_return_vectorPlayerSpawnOrigin(float fPlayerId);
vector	globalCoop_return_vectorPlayerReSpawnOrigin(float fPlayerId);
float	globalCoop_return_floatLengthFromVectorCalc(float fVec1, float fVec2);
float	globalCoop_return_floatLengthFromCombinedBbox(float fBbox1, float fBbox2);
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////SERVER
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_server_loadGivenMapNow(string sMap);
void	globalCoop_server_checkAllMaps();
void	globalCoop_server_listenServerControll();
void	globalCoop_server_itemUnlockedSet(string sWeaponModel);
void	globalCoop_server_itemUnlockedSet_dll(string sWeaponModel);
void	globalCoop_server_itemLockedSet(string sWeaponModel);
void	globalCoop_server_itemLockedSet_dll(string sWeaponModel);
////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////MOM 4
////////////////////////////////////////////////////////////////////////////////
void	playerInput();
void	coop_momInputProcess(entity ePlayer, string sInput);
void	coop_momMenuExit(entity ePlayer,string sMenu);
void	coop_momMenuMaster(entity ePlayer, string sMenu);
////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////STATBAR
////////////////////////////////////////////////////////////////////////////////
void	globalCoop_statbar_health(entity eMonitor,string sColor,string sName,float fHealthStop,string sThread);
void	globalCoop_statbar_healthStop(entity eMonitor);
void	globalCoop_statbar_timer(string sColor,string sUp,string sName,float fTime,string sThread);
void	globalCoop_statbar_timerStop();
void	globalCoop_statbar_statSendAll(string sStatName,float fStatValue);
void	globalCoop_statbar_removeHud(string sHudName);
////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////INCLUDE
////////////////////////////////////////////////////////////////////////////////
#include "coop_mod/matrix/mom4_coopInput.scr"	//[b611] chrissstrahl - mom 4
#include "coop_mod/matrix/statbar.scr"			//[b611] chrissstrahl - statbar / timer /countdown
#include "coop_mod/matrix/multioptions.scr"
#include "coop_mod/matrix/multioptions_login.scr"
#include "coop_mod/matrix/actor.scr"
#include "coop_mod/matrix/armory.scr"
#include "coop_mod/matrix/check.scr"
#include "coop_mod/matrix/dialog.scr"
#include "coop_mod/matrix/huds.scr"
#include "coop_mod/matrix/level.scr"
#include "coop_mod/matrix/mission.scr"
#include "coop_mod/matrix/objective.scr"
#include "coop_mod/matrix/player.scr"
#include "coop_mod/matrix/return.scr"
#include "coop_mod/matrix/server.scr"



