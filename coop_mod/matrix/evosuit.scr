//-----------------------------------------------------------------------------------
// Script By:	Christian Sebastian Strahl (Chrissstrahl)
// Created on:	2023.01.14
// E-Mail:		chrissstrahl@yahoo.de
//-----------------------------------------------------------------------------------
// This script handles script based evosuit/spacewalk stuff
//-----------------------------------------------------------------------------------

void	coop_evosuit();
void	coop_evosuit_pickup(entity eTrigger,entity ePlayer);
void	coop_evosuit_playerOn(entity ePlayer,float fPickedUp);
void	coop_evosuit_playerOff(entity ePlayer);
void	coop_evosuit_playerSufficate(entity ePlayer);
float	coop_evosuit_playerEquiped(entity ePlayer);
float	coop_evosuit_spaceWorthy(entity eSentity);
void	coop_evosuit_airlockDecompress(entity eAirLock);
void	coop_evosuit_playerDecompress(entity ePlayer);
void	coop_evosuit_playerSetSpace(entity ePlayer,float fSpace);
float	coop_evosuit_playerInSpace(entity ePlayer);
void	coop_evosuit_airlockInside();
void	coop_evosuit_airlockOutside();
void	coop_evosuit_haltStat(entity ePlayer,float fHalt);

//these are global for this level script using __ as prefix so highligther shows them
//USE THEM IN YOUR SCRIPT FOR CONFIGURATION, SO YOU DONT HAVE TO EDIT THE EVOSUIT SCRIPT
float		__EVOSUIT_FLT_SPACE_GRAVITY				= 0.15;
float		__EVOSUIT_INT_SUFFICATE_HURT			= 10;
float		__EVOSUIT_INT_SUFFICATE_WAIT			= 5;
float		__EVOSUIT_INT_THRUSTER_COOLDOWN_TIME	= 10;
float		__EVOSUIT_INT_THRUSTER_EMERGENCY_COST	= 40;
float		__EVOSUIT_INT_THRUSTER_MOVE_COST		= 0.5;
float		__EVOSUIT_INT_THRUSTER_MOVE_UP_COST		= 1.5;
float		__EVOSUIT_INT_THRUSTER_MOVE_DOWN_COST	= 1;
float		__EVOSUIT_INT_THRUSTER_MOVE_FORCE		= 50;
vector		__EVOSUIT_VEC_AIRLOCK_DECOMPRESS_PUSH	= '0 0 0'; //x y z - can also be negative for each
float		__EVOSUIT_FLT_AIRSUPPLY_CONSUMPTION		= 0.025;
string		__EVOSUIT_STR_HUD_AIRSUPPLY				= "cooptimerblue";
string		__EVOSUIT_STR_HUD_AIRSUPPLY_CVAR		= "coop_timerBlue";
string		__EVOSUIT_STR_HUD_AIRSUPPLY_STAT		= "mp_generic1";
string		__EVOSUIT_STR_HUD_THRUSTER				= "cooptimerred";
string		__EVOSUIT_STR_HUD_THRUSTER_CVAR			= "coop_timerRed";
string		__EVOSUIT_STR_HUD_THRUSTER_STAT			= "generic";
string		__EVOSUIT_STR_HUD_ICEING				= "coop_iceing";
string		__EVOSUIT_STR_HUD_THRUSTER_STRING		= "$$c#156$$";
string		__EVOSUIT_STR_HUD_AIRSUPPLY_STRING		= "$$AirSupply$$";

void coop_evosuit()
//------------------------------------------------------------------------------
//Equip or Unequip Evosuit for player using this trigger
//
//This is to be called from a trigger on the level
//------------------------------------------------------------------------------
{
	entity eTrigger,ePlayer;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		ePlayer = eTrigger.getLastActivatingEntity();
		if(doesEntityExist(ePlayer)){
			if(coop_evosuit_playerEquiped(ePlayer) == 1 && ePlayer.getFloatVar("coop_evosuit_pickedUp") == 1){				
				thread coop_evosuit_playerOff(ePlayer);
				
			}else{
				thread coop_evosuit_playerOn(ePlayer,1);
				thread coop_evosuit_pickup(eTrigger,ePlayer);
			}
		}
	}
}

void coop_evosuit_pickup(entity eTrigger,entity ePlayer)
//------------------------------------------------------------------------------
//picks up a evo suit for player - grab all of same targetname
//------------------------------------------------------------------------------
{
	if(eTrigger.getFloatVar("coop_evosuit_taken") == 1){
		return;
	}
	
	eTrigger.setFloatVar("coop_evosuit_taken",1);
	
	entity eSuit;
	eSuit = eTrigger.getTargetEntity();
	while(doesEntityExist(eSuit)){
		eSuit.hide();
		
		eSuit = getNextEntity(eSuit);
	}
	
	wait(2);
	
	eSuit = eTrigger.getTargetEntity();
	while(doesEntityExist(eSuit)){
		eSuit.show();
		eSuit.displayEffect("TransportIn","FederationWeapons");
		
		eSuit = getNextEntity(eSuit);
	}
	
	eTrigger.setFloatVar("coop_evosuit_taken",0);
}


void coop_evosuit_playerOn(entity ePlayer,float fPickedUp)
//------------------------------------------------------------------------------
//put on evosuit
//------------------------------------------------------------------------------
{
	float fHealth;
	float fAirSupplyLastHurt;
	float iAirSupply = 100;
	float iLastAirSupply;
	float bAirSupplyStopSound=1;
	vector vVelocity,vVelocityNew; 
	
	float iStatVal = -1;
	float iLastStatVal = 123;
	float iCoolDownTimmer = 0;
	float iCoolDownTime;
	float iUpCost = 1.5;
	float fRecharge = -0.5;
	
	
	iCoolDownTime = ((1 / coop_float_oneFrameTime) * __EVOSUIT_INT_THRUSTER_COOLDOWN_TIME);
	
	//rename this thread so it can be killed from the outside
	string sKillThread;
	sKillThread = "coop_evosuitPlayerOnPlayer"+ePlayer.getEntNum();
	threadname(sKillThread);
	
	ePlayer.setFloatVar("coop_evosuit_on",1);
	if(fPickedUp){
		ePlayer.setFloatVar("coop_evosuit_pickedUp",1);
	}
	
	ePlayer.addhud("cooptimerblue");
	
	if(__EVOSUIT_STR_HUD_AIRSUPPLY_CVAR != ""){
		thread globalCoop_player_transmitter(ePlayer,"set "+__EVOSUIT_STR_HUD_AIRSUPPLY_CVAR+" "+__EVOSUIT_STR_HUD_AIRSUPPLY_STRING);
	}
	if(__EVOSUIT_STR_HUD_THRUSTER_CVAR != ""){
		thread globalCoop_player_transmitter(ePlayer,"set "+__EVOSUIT_STR_HUD_THRUSTER_CVAR+" "+__EVOSUIT_STR_HUD_THRUSTER_STRING);
	}
	
	while(doesEntityExist(ePlayer) == 1 && globalCoop_check_playerSpectator(ePlayer) == 0){
		//this is here for testing and needs to be removed laterz
		if(ePlayer.checkReload()){	iAirSupply=100;	}
		
		fHealth			= ePlayer.getHealth();
		vVelocity		= ePlayer.getVelocity();
		vVelocityNew 	= vVelocity;
		
		//player dead, unsuit
		if(fHealth <= 0){
			thread coop_evosuit_playerOff(ePlayer);
			return;
		}
		
		//sufficate
		if(iAirSupply <= 0){
			if(bAirSupplyStopSound){
				bAirSupplyStopSound = 0;
				ePlayer.stoploopsound();
				ePlayer.hudprint("You ran out of Air!\n");
			}
			
			if( (fAirSupplyLastHurt + __EVOSUIT_INT_SUFFICATE_WAIT) < getLevelTime()){
				fAirSupplyLastHurt = getLevelTime();
				thread coop_evosuit_playerSufficate(ePlayer);
			}
		}
		//use air
		else{
			if(iLastAirSupply < iAirSupply){ //on refil or start
				ePlayer.loopsound("sound/player/player_rebreath.wav",1,96);
			}
		
			fAirSupplyLastHurt = getLevelTime();
			iAirSupply = (iAirSupply - __EVOSUIT_FLT_AIRSUPPLY_CONSUMPTION);
		}
		
		//thrusters
		if(ePlayer.isplayeronground() == 0 && iStatVal < 100 && iCoolDownTimmer == 0){
			if(coop_evosuit_playerInSpace(ePlayer)){
				if(ePlayer.checkJump()){
					if(vVelocity_z < 600){ //cap max upwards velocity for thrusters
						vVelocityNew_z += __EVOSUIT_INT_THRUSTER_MOVE_FORCE; 
						if(vVelocity_z < 0){
							iStatVal = (iStatVal + (__EVOSUIT_INT_THRUSTER_MOVE_UP_COST * 2) ); //it costs more to deaccelerate
						}else{
							iStatVal = (iStatVal + __EVOSUIT_INT_THRUSTER_MOVE_UP_COST);
						}
					}
				}
				else if(ePlayer.checkCrouch()){
					if(vVelocity_z > -400){ //cap max downwards velocity for thrusters
						if(vVelocity_z > 0 ){
							vVelocityNew_z -= __EVOSUIT_INT_THRUSTER_MOVE_FORCE;
							iStatVal = ( iStatVal + (__EVOSUIT_INT_THRUSTER_MOVE_DOWN_COST * 2) ); //it costs more to deaccelerate
						}else{
							vVelocityNew_z -= (__EVOSUIT_INT_THRUSTER_MOVE_FORCE / 1.5);
							iStatVal = (iStatVal + __EVOSUIT_INT_THRUSTER_MOVE_DOWN_COST);
						}
					}
				}
				
				if(ePlayer.checkForward()){
					iStatVal = (iStatVal + __EVOSUIT_INT_THRUSTER_MOVE_COST);
				}else if(ePlayer.checkBackward()){
					iStatVal = (iStatVal + __EVOSUIT_INT_THRUSTER_MOVE_COST);
				}
				
				if(ePlayer.checkLeft()){
					iStatVal = (iStatVal + __EVOSUIT_INT_THRUSTER_MOVE_COST);
				}else if(ePlayer.checkRight()){
					iStatVal = (iStatVal + __EVOSUIT_INT_THRUSTER_MOVE_COST);
				}
			}
		}
		
		//set new velocity
		if(vVelocityNew != vVelocity){
			ePlayer.setVelocity(vVelocityNew);
		}
		
		//make sure we don't go out of bounds
		if(iStatVal > 100){ iStatVal = 100;	}
		else if(iStatVal < 0){ iStatVal = 0;}
		if(iAirSupply < 0){iAirSupply = 0;}
		else if(iAirSupply > 100){iAirSupply = 100;}
		
		//thrusters
		if(iStatVal != iLastStatVal && ePlayer.getFloatVar("coop_evosuit_haltStat") == 0){
			ePlayer.setstat(__EVOSUIT_STR_HUD_THRUSTER_STAT,iStatVal);
			//sync last and current
			iLastStatVal = iStatVal;			
		}
		
		//air supply
		if(iAirSupply != iLastAirSupply){
			ePlayer.setstat(__EVOSUIT_STR_HUD_AIRSUPPLY_STAT,iAirSupply);
		}
		
		//set cooldown timer
		if(iStatVal == 100){
			ePlayer.hudprint("Thrusters need to Cooldown!\n");
			iCoolDownTimmer = iCoolDownTime;
		}		

		//no thrusters used - recharge
		if(iLastStatVal == iStatVal){
			iStatVal = (iStatVal + fRecharge);
			
			iCoolDownTimmer--;
			if(iCoolDownTimmer < 0){
				iCoolDownTimmer=0;
			}else if(iCoolDownTimmer==1){
				ePlayer.hudprint("Thrusters operational agaian!\n");
				
				//if player is falling - fire emergency stabilisation boosters - but they are expansive
				if(ePlayer.isplayeronground() == 0 && vVelocity_z < -300){ //player could be on a lift, so check for ground
					ePlayer.hudprint("== Emercency Stabilisation ==\n");
					vVelocityNew = '0 0 75';
					iStatVal = __EVOSUIT_INT_THRUSTER_EMERGENCY_COST;
					ePlayer.setVelocity(vVelocityNew);
				}
			}
		}
		
		globalCoop_main_waitAFrame();
	}
}

void coop_evosuit_playerOff(entity ePlayer)
//------------------------------------------------------------------------------
//remove/takeoff evosuit
//------------------------------------------------------------------------------
{
	//if(ePlayer.getFloatVar("coop_evosuit_on")){
		ePlayer.setFloatVar("coop_evosuit_on",0);
		
		ePlayer.setFloatVar("coop_evosuit_pickedUp",0);
		
		string sKillThread;
		sKillThread = "coop_evosuitPlayerOnPlayer"+ePlayer.getEntNum();
		killthread(sKillThread);
		
		ePlayer.stoploopsound();
		ePlayer.removehud(__EVOSUIT_STR_HUD_AIRSUPPLY);	
		ePlayer.removehud(__EVOSUIT_STR_HUD_THRUSTER);	
	//}
}

void coop_evosuit_playerSufficate(entity ePlayer)
//------------------------------------------------------------------------------
//if player has the suit on but no airz, killz thez bitchz
//------------------------------------------------------------------------------
{
	if(doesEntityExist(ePlayer)){
		float fHealth;
		fHealth = (ePlayer.getHealth() - __EVOSUIT_INT_SUFFICATE_HURT);

		if((ePlayer.getHealth() - fHealth) > 0){
			ePlayer.pain(1,ePlayer,2);
			ePlayer.health(fHealth);
		}
		else{
			ePlayer.kill();
			coop_evosuit_playerOff(ePlayer);
		}
	}
}

float coop_evosuit_playerEquiped(entity ePlayer)
//------------------------------------------------------------------------------
//if player has the suit on but no airz, killz thez bitchz
//------------------------------------------------------------------------------
{
	if(ePlayer.getFloatVar("coop_evosuit_on") == 1){
		return 1;
	}
	return 0;
}

float coop_evosuit_spaceWorthy(entity eSentity)
//------------------------------------------------------------------------------
//check if sentity is space worthy by model or evosuit
//------------------------------------------------------------------------------
{
	//check for models that validate for space usage
	string sModelName;
	sModelName = eSentity.getModelName();
	if(	getIntStringFind(sModelName,"evosuit") > -1 ||
		getIntStringFind(sModelName,"eb_gonzales") > -1 ||
		getIntStringFind(sModelName,"spacesuit") > -1 ||
		getIntStringFind(sModelName,"borg_") > -1 ||
		getIntStringFind(sModelName,"alien-type") > -1 ||
		getIntStringFind(sModelName,"_stalker") > -1 ||
		getIntStringFind(sModelName,"saboteur-gauntlet") > -1)
	{
		return 1;
	}

	return 0;
}

void coop_evosuit_playerSetSpace(entity ePlayer,float fSpace)
//------------------------------------------------------------------------------
//sets if player is in space or not
//------------------------------------------------------------------------------
{
	ePlayer.setFloatVar("coop_evosuit_inSpace",fSpace);	
	if(fSpace == 1){
		thread coop_evosuit_playerDecompress(ePlayer);
		ePlayer.gravity(__EVOSUIT_FLT_SPACE_GRAVITY);
		
		//player worthy of space eeven without picking suit up - auto put on
		if(coop_evosuit_spaceWorthy(ePlayer) == 1 && coop_evosuit_playerEquiped(ePlayer) == 0){		
			thread coop_evosuit_playerOn(ePlayer,0); //mark as not picked up
		}
		ePlayer.addhud(__EVOSUIT_STR_HUD_THRUSTER);
		
	}else{
		//leaving space - and did not pick up suit but was spaceworthy, take off the auto evo suit
		if(ePlayer.getFloatVar("coop_evosuit_pickedUp") == 0 && coop_evosuit_playerEquiped(ePlayer) == 1){
			thread coop_evosuit_playerOff(ePlayer);
		}
		ePlayer.gravity(1);
		ePlayer.removehud(__EVOSUIT_STR_HUD_THRUSTER);
	}
}

float coop_evosuit_playerInSpace(entity ePlayer)
//------------------------------------------------------------------------------
//gets if player is in space or not
//------------------------------------------------------------------------------
{
	float fSpace;
	fSpace = ePlayer.getFloatVar("coop_evosuit_inSpace");
	return fSpace;
}

void coop_evosuit_playerDecompress(entity ePlayer)
//------------------------------------------------------------------------------
//scales player and then kills player
//------------------------------------------------------------------------------
{
	if(	coop_evosuit_spaceWorthy(ePlayer) == 1 ||	ePlayer.getFloatVar("coop_evosuit_decompressing") == 1){
		return;
	}
	ePlayer.setFloatVar("coop_evosuit_decompressing",1);
	
	ePlayer.addhud(__EVOSUIT_STR_HUD_ICEING);
	ePlayer.setCustomShader("coop_iceing");
	ePlayer.gravity(0);
	ePlayer.setmovetype("bounce");
	
	//ePlayer.immobilize(1);
	
	//make sure player respawns at spawn spot info_player_deathmatch
	ePlayer.setFloatVar("coop_respawnAtRespawnpoint",1);

	if(doesEntityExist(ePlayer)){
		wait(2);
		while(doesEntityExist(ePlayer) == 1 && ePlayer.getHealth() > 0){
			ePlayer.kill();
			globalCoop_main_waitAFrame();
		}
		
		if(doesEntityExist(ePlayer)){
			ePlayer.setmovetype("walk");
			ePlayer.gravity(1);
			ePlayer.removehud(__EVOSUIT_STR_HUD_ICEING);
			ePlayer.setFloatVar("coop_evosuit_decompressing",0);
		}
	}
}

void coop_evosuit_airlockDecompress(entity eAirLock)
//------------------------------------------------------------------------------
//Handles decompressing of airlock
//------------------------------------------------------------------------------
{
	if(!doesEntityExist(eAirLock)){
		print("coop_evosuitAirlockDecompress() - Airlock Inside Trigger is missing or not specified!\n");
		centerprint("coop_evosuitAirlockDecompress() - Airlock Inside Trigger is missing or not specified!\n");
		return;
	}

	entity ePlayer;
	float fPlayerIdInUse;
	vector vVel;
	
	//add icing hud, push players up and away decompress area
	//manage actors that wandered into airlock
	//take care of actors and players inside
	for(fPlayerIdInUse=coop_integer_maxPlayers;fPlayerIdInUse<getCvarInt("maxentities");fPlayerIdInUse++){
		ePlayer = getentity("*"+ fPlayerIdInUse);
		if(doesEntityExist(ePlayer) == 1 && ePlayer.getHealth() > 0){
			//check all players touching this trigger
			if(ePlayer.isEntityInsideOfEntity(eAirLock) ){
				if(ePlayer.getSubclassName() == "Player"){
					//kill players that are inside without evo 
					thread coop_evosuit_playerDecompress(ePlayer);
					
					vVel = ePlayer.getVelocity();
					vVel = (vVel + __EVOSUIT_VEC_AIRLOCK_DECOMPRESS_PUSH);
					ePlayer.setvelocity(vVel);
					
					ePlayer.addhud(__EVOSUIT_STR_HUD_ICEING);
				}else if(ePlayer.getSubclassName() == "Actor"){
					if(!coop_evosuit_spaceWorthy(ePlayer)){
						//ePlayer.immobilize(1);
						ePlayer.gravity(0);
						ePlayer.suicide();
						ePlayer.setCustomShader("coop_iceing");
					}						
				}
			}
		}
	}
}

void coop_evosuit_airlockInside()
//------------------------------------------------------------------------------
// called if a player is inside the airlock trigger area
//------------------------------------------------------------------------------
{
	entity eTrigger,ePlayer;
	eTrigger = getCurrentEntity();
	
	if(doesEntityExist(eTrigger)){
		float fPlayerIdInUse;
		for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
			ePlayer = getentity("player"+ fPlayerIdInUse);
			if(doesEntityExist(ePlayer)){
				//check all players touching this trigger
				if(ePlayer.isEntityInsideOfEntity(eTrigger)){
					coop_evosuit_playerSetSpace(ePlayer,0);
				}
			}
		}	
	}
}

void coop_evosuit_airlockOutside()
//------------------------------------------------------------------------------
// called if a player is outside the airlock, which means in space
//------------------------------------------------------------------------------
{
	entity eTrigger,ePlayer,eActivator;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		eActivator = eTrigger.getLastActivatingEntity();
		if(eActivator.getSubclassName() == "Actor"){
			if(!coop_evosuit_spaceWorthy(eActivator)){
				eActivator.gravity(0);
				eActivator.suicide();
				eActivator.setCustomShader("coop_iceing");
			}
		}
	}
	
	if(doesEntityExist(eTrigger)){
		float fPlayerIdInUse;
		for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
			ePlayer = getentity("player"+ fPlayerIdInUse);
			if(doesEntityExist(ePlayer)){
				//check all players touching this trigger
				if(ePlayer.isEntityInsideOfEntity(eTrigger)){
					coop_evosuit_playerSetSpace(ePlayer,1);
					
					//thread coop_airlockCheckPlayer(ePlayer);
				}
			}
		}
	}
}

void coop_evosuit_haltStat(entity ePlayer,float fHalt)
//------------------------------------------------------------------------------
// halts statbar for evosuit thrusters - mean to be used if puzzles are done
//------------------------------------------------------------------------------
{
	if(doesEntityExist(ePlayer)){
		if(fHalt != 1){
			fHalt = 0;
			ePlayer.addhud(__EVOSUIT_STR_HUD_THRUSTER);
		}else{
			ePlayer.removehud(__EVOSUIT_STR_HUD_THRUSTER);
		}
		ePlayer.setFloatVar("coop_evosuit_haltStat",fHalt);
	}
}