//-----------------------------------------------------------------------------------
// Script By:	Christian Sebastian Strahl (Chrissstrahl)
// Created on:	2008.??.??
// E-Mail:		chrissstrahl@yahoo.de
// Organisation:	HaZardModding
//
// CONTAINS SERVER RELATED JOBS

//HAZARDMODDING CO-OP SCRIPT MODIFICATION ©2006-2015 SOME RIGHTS RESERVED AND
//(IP)INTELLECTUAL PROPERTY HELD BY CHRISTIAN SEBASTIAN STRAHL, ALIAS CHRISSSTRAHL.

//YOU ARE EXPLICITE FORBIDDEN TO USE/MODIFIE/REDISTRIBUTE/REPLICATE/RELEASE/REBUILD/COPY
//ANY MATERIALS OR INTELLECTUAL PROPERTY OF THIS FILE WITHOUT THE EXPLICIT
//WRITTEN PERMISSION OF THE RESPECTIVE OWNERS!

//
//CONTACT: chrissstrahl@yahoo.de [Christian Sebastian Strahl, Germany]
//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------

void globalCoop_server_itemUnlockedSet(string sWeaponModel)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
	thread globalCoop_server_itemUnlockedSet_dll(sWeaponModel);
}
void globalCoop_server_itemUnlockedSet_dll(string sWeaponModel)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
}
void globalCoop_server_itemLockedSet(string sWeaponModel)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
	thread globalCoop_server_itemLockedSet_dll(sWeaponModel);
}
void globalCoop_server_itemLockedSet_dll(string sWeaponModel)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
}

void globalCoop_server_loadGivenMapNow(string sMap)
//----------------------------------------------------------------------
// loads given map, handeling all other dependencies
//----------------------------------------------------------------------
{
	//the games does create a savegame for sublevel in base/config/save
	
	//[b607] chrissstrahl - execute this function but once
	if(coop_integer_serverLoadingMap){
		globalCoop_main_print("COOP: server already loading map");
		return;
	}
	coop_integer_serverLoadingMap=1;

//WARNING!!!!! If we would have a delay here, the game gets stuck in the
//loading screen when firing up a server with sv_maxclients < 1 while trying to correct
	if(sMap == ""){
		globalCoop_main_print("globalCoop_server_loadGivenMapNow()->EMPTY MAPNAME! - LOADING zoo1");
		sMap = "zoo1";
	}
	
	//set map to load on reboot to server config (if writeable)
	stuffCMD("seta map \"" + sMap + "\"\n");
	
	//[b607] chrissstrahl - no intermission or it will seam like the server has crashed until intermissiontime is up
	noIntermission();
	//[b607] chrissstrahl - overwrite callvote nextmap		
	nextmap(sMap);
	
	//[b607] chrissstrahl - have a standard way to change levels
	cvar_string_mapname = sMap;
	globalCoop_level_triggerLevelChange();
}

void globalCoop_server_checkAllMaps()
//----------------------------------------------------------------------
// TEST EVERY SINGLE MAP IF IT DOES NOT CHRASH! START WITH THE MAP 'secret1'
//----------------------------------------------------------------------
{
	if(cvar_bool_coop_developer){
		if(getCvarInt("coop_diag") == 1)
		{
			$world.time_scale(4);
			float fTime=10;
			globalCoop_main_countDown("^5SERVER^3 IS IN ^5DIAGNOSE-MODE^3, NEXT MAP ^5LOADING^3 IN^5::^5 ",fTime);
			globalCoop_level_callReliably("coop_endLevel");
			$world.time_scale(1);
		}else{
			$world.time_scale(1);
		}
	}
}

void globalCoop_server_listenServerControll()
//----------------------------------------------------------------------
// IMPORTANT RUTINE TO MANAGE THE COMMAND OVER FLOW ON A LISTEN SERVER
//----------------------------------------------------------------------
{
	if(cvar_bool_multiplayer){
		if(cvar_float_dedicated < 1){
			if(doesEntityExist($player)){
				globalCoop_player_waitForFreeReliableServerCommand($player);
			}
			else{
				entity ePlayer;
				float fPlayerIdInUse;
				
				for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
					globalCoop_main_waitAFrame();
					ePlayer = getentity("player"+ fPlayerIdInUse);
					if(doesEntityExist(ePlayer))
					{
						globalCoop_player_waitForFreeReliableServerCommand(ePlayer);
						return;
					}
				}
			}
		}
//ELSE JUST WAIT ANOTHER FRAME
		else{
			globalCoop_main_waitAFrame();
		}
	}else{
		waitForPlayer();
		globalCoop_player_waitForFreeReliableServerCommand($player);
	}
}
