//================================
//GLOBAL-LEVEL VARIABLES - every script function can accsess them
//================================
string SYMBOL_ARROW_RED;
string SYMBOL_ARROW_BLUE;
string SYMBOL_ARMOR;
string SYMBOL_TRANSPORTER;
string SYMBOL_BOOTS;
string SYMBOL_BOOTS2;
string SYMBOL_GLOVE;
string SYMBOL_STAR;
string SYMBOL_STAR2;
string SYMBOL_BOMB2;
string SYMBOL_HYPO;
string SYMBOL_MEDKIT;
string SYMBOL_EXPLOSIVE;
string SYMBOL_TARGET;
string SYMBOL_TARGET2;
string SYMBOL_DEATH;
string SYMBOL_SNIPER;
string SYMBOL_AMMO_F;
string SYMBOL_AMMO_P;
string SYMBOL_AMMO_I;
string SYMBOL_MEDIC;
string SYMBOL_TONGS;
string SYMBOL_PAD;
string SYMBOL_IMOD;
string SYMBOL_FED;
string SYMBOL_BADGE;
string SYMBOL_BOMB;
string SYMBOL_ALPHA;
string SYMBOL_BETA;
string SYMBOL_GAMMA;
string SYMBOL_DELTA;


void	symbols_main();
void	symbols_checkSetup();
void	symbols_spawnSymbolAt(string sSymbol, float fScale, float fVerticalOffset,entity eLocation,string sTargetname);
void	symbols_replaceSymbol(string sSymbol, float fScale, float fVerticalOffset,entity eLocation,string sTargetname);
entity	symbols_spawnSymbol(string sSymbol, float fScale, float fVerticalOffset,vector vLocation,string sTargetname);


void symbols_main()
//================================
//populate variables with symbols
//================================
{
	SYMBOL_ARROW_RED	="sysimg/icons/mp/team_red.spr";
	SYMBOL_ARROW_BLUE	="sysimg/icons/mp/team_blue.spr";
	SYMBOL_ARMOR		="sysimg/icons/items/armor.spr";
	SYMBOL_TRANSPORTER	="sysimg/icons/items/holdableitem_transporter.spr";
	SYMBOL_BOOTS		="sysimg/icons/items/powerup_speed.spr";
	SYMBOL_BOOTS2		="sysimg/icons/mp/specialty_infiltrator.spr";
	SYMBOL_GLOVE		="sysimg/icons/items/powerup_strength.spr";
	SYMBOL_STAR			="sysimg/icons/mp/actionhero_icon.spr";
	SYMBOL_STAR2		="sysimg/icons/mp/specialty_heavyweapons.spr";
	SYMBOL_BOMB2		="sysimg/icons/mp/specialty_demolitionist.spr";
	SYMBOL_HYPO			="sysimg/icons/items/health.spr";
	SYMBOL_MEDKIT		="sysimg/icons/items/holdableitem_medkit.spr";
	SYMBOL_EXPLOSIVE	="sysimg/icons/items/holdableitem_explosive.spr";
	SYMBOL_TARGET		="sysimg/icons/items/rune_armorpiercing.spr";
	SYMBOL_TARGET2		="sysimg/icons/mp/specialty_sniper.spr";
	SYMBOL_DEATH		="sysimg/icons/items/rune_deathquad.spr";
	SYMBOL_SNIPER		="sysimg/icons/items/wep_sniper.spr";
	SYMBOL_AMMO_F		="sysimg/icons/items/ammo_fed.spr";
	SYMBOL_AMMO_P		="sysimg/icons/items/ammo_idryll.spr";
	SYMBOL_AMMO_I		="sysimg/icons/items/ammo_plasma.spr";
	SYMBOL_TONGS		="sysimg/icons/mp/specialty_technician.spr";
	SYMBOL_PAD			="sysimg/icons/mp/talking.spr";
	SYMBOL_MEDIC		="sysimg/icons/mp/specialty_medic.spr";
	SYMBOL_IMOD			="sysimg/icons/items/wep_imod.spr";
	SYMBOL_BADGE		="sysimg/icons/mp/award_firstStike.spr";
	SYMBOL_FED			="sysimg/icons/mp/award_impressive.spr";
	SYMBOL_BOMB			="sysimg/icons/mp/diffusion_bomber.spr";
	SYMBOL_ALPHA		="sysimg/icons/mp/cp_alpha_neutral.spr";
	SYMBOL_BETA			="sysimg/icons/mp/cp_beta_neutral.spr";
	SYMBOL_GAMMA		="sysimg/icons/mp/cp_gamma_neutral.spr";
	SYMBOL_DELTA		="sysimg/icons/mp/cp_delta_neutral.spr";
	
	//===OTHER SYMBOLS=============================
	//"sysimg/icons/mp/ctf_flagcarrier.spr"
	//"sysimg/icons/mp/ctf_oneFlagTaken.spr"
	//"sysimg/icons/mp/ctf_oneFlagMissing.spr"
	//"sysimg/icons/mp/ctf_oneFlagInBase.spr"
	//"sysimg/icons/mp/ctf_blueFlagTaken.spr"
	//"sysimg/icons/mp/ctf_blueFlagMissing.spr"
	//"sysimg/icons/mp/ctf_blueFlagInBase.spr"
	//"sysimg/icons/mp/diffusion_bombOnground.spr"
	//"sysimg/icons/mp/diffusion_bombArmed-red.spr"
	//"sysimg/icons/mp/award_denied.spr"
	//"sysimg/icons/mp/award_excellent.spr"
	
	//===COOP MOD SYMBOLS=====REQUIRES COOP MOD
	//"coop_use.spr"
	//"coop_modulate.spr"
	//"coop_destroy.spr"
	//"coop_bomb.spr"
}

void symbols_checkSetup()
//================================
//Make sure the vars are populated
//================================
{
	if(SYMBOL_ARROW_RED == ""){
		symbols_main();
	}
}

void symbols_spawnSymbolAt(string sSymbol, float fScale, float fVerticalOffset,entity eLocation,string sTargetname)
//================================
//makes the given symbol spawn at the given entity
//================================
{
	symbols_checkSetup();
	
	//print error message and exit function
	//print error to screen, print error to console
	//exit function
	if(!doesEntityExist(eLocation)){
		centerprint("ERROR: (spawnSymbolAt) Entity "+eLocation.getTargetname()+" does not exist!\n");
		print("ERROR: (spawnSymbolAt) Entity "+eLocation.getTargetname()+" does not exist!\n");
		return;
	}
	
	//execute symbol spawn function
	//wait for it to spawn
	//bind symbol to entity, so if entity moves symbol goes with it
	entity eSymbol;
	eSymbol = symbols_spawnSymbol(sSymbol,fScale,fVerticalOffset,eLocation.getOrigin(),sTargetname);
	eSymbol.bind(eLocation);
	//show entity, because triggers are hidden by default and when bound symbol hides as well
	eLocation.show();
}

void symbols_replaceSymbol(string sSymbol, float fScale, float fVerticalOffset,entity eLocation,string sTargetname)
//================================
//makes the given symbol spawn at the given entity and remove the given entity
//================================
{
	symbols_checkSetup();
	
	//print error message and exit function
	//print error to screen, print error to console
	//exit function
	if(!doesEntityExist(eLocation)){
		centerprint("ERROR: (replaceSymbol) Entity "+eLocation.getTargetname()+" does not exist!\n");
		print("ERROR: (replaceSymbol) Entity "+eLocation.getTargetname()+" does not exist!\n");
		return;
	}
	//execute symbol spawn function
	//grab location where to spawn, this allowes us to remove the given entity before spawning a new one
	//remove given entity
	//wait for it to spawn
	//bind symbol to entity, so if entity moves symbol goes with it
	entity eSymbol;
	vector vLocation;
	vLocation = eLocation.getOrigin();
	eLocation.remove();
	symbols_spawnSymbol(sSymbol,fScale,fVerticalOffset,vLocation,sTargetname);
}

//================================
//makes the given symbol spawn at the given entity
//================================
entity symbols_spawnSymbol(string sSymbol, float fScale, float fVerticalOffset,vector vLocation,string sTargetname)
{
	entity eSymbol;
	vector v;
	v = vLocation;
	v_z += fVerticalOffset;
	eSymbol = spawn("Object","model",sSymbol,"origin",""+v,"targetname",sTargetname,"scale",""+fScale);
	wait(0.05);
	return eSymbol;
}
