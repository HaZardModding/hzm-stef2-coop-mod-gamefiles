//--------------------------------------------------------------------------------------
//
//  EF2 Global Level Script File
//
//  Function:
//  This file contains common functions and constants that are globally used throughout
//	all off the EF2 global and level scripts
//
//	How To Use:
//	NA
//
//	External Functions:
//	See the functions below
//
//	Script By:    Benson R
//  Created on:   9/17/2002
//
//  Last Edited:  Jared H
//		Precaching stuff
//
//--------------------------------------------------------------------------------------

//====================================================================================================================================================
//====================================================================================================================================================
//  DECLARATIONS
//====================================================================================================================================================
//====================================================================================================================================================

//--- common functions
void globalCommon_AssertEntity( entity entPassedEntity, string strMessage );
void globalCommon_Autosave();

//--- OnBlah style useful scripts
void globalCommon_OnUse( entity entOnUseTargetname , string strOnUseThread );
void globalCommon_OnDamage( entity entOnDamageTargetname, string strOnDamageThread );
void globalCommon_OnTouch( entity entOnTouchTargetname, string strOnTouchThread );
void globalCommon_OnTrigger( entity entOnTriggerTargetname, string strOnTriggerThread );
void globalCommon_OnBlock( entity entOnBlockTargetname, string strOnBlockThread );

//--- AI useful scripts
void globalCommon_AiDummyHide( entity entAiDummyToHide );
void globalCommon_AiDummyShow( entity entAiDummyToShow );
void globalCommon_AiActor( entity entAiActor );
void globalCommon_AiDummy(entity entAiDummy , string strAiDummyAnim );
void globalCommon_AiActorUseWeapon( entity currentActor, string weaponToUse );

//--- Spawn useful scripts
void globalCommon_SpawnScriptModel( string spawnedTikiName, string spawnedTargetName, vector spawedOrigin, float spawnedAngle );
void globalCommon_SpawnActor( string spawnedTikiName, string spawnedTargetName, vector spawedOrigin, float spawnedAngle );

//--- Actor work and patrol work useful scripts
void globalCommon_ActorRandomNodePatrolWork( entity currentActor, string nodePatrolWork, string animationToPlayPerNode, float totalNumberOfNodes );
void globalCommon_ActorRandomNodeWork( entity currentActor, string nodePatrolWork, string animationToPlayPerNode, float totalNumberOfNodes );
void globalCommon_ActorNodeWork( entity currentActor, string nodePatrolWork, string animationToPlayPerNode, float nodeToWorkAt );

//--- Teammate Context and Combat Dialog Load out functions
void globalCommon_SetupContextDialog( entity currentActor , string theActorName );
void globalCommon_SetupContextDialogForM3( entity currentActor , string theActorName );

//-- Combat Initiation Animation Setup
void globalCommon_SetupCombatAnimation( entity currentActor , string theAnimation );

//--- telsia / kleeya end choice
void globalCommon_LoveChoice_Kleeya();
void globalCommon_LoveChoice_Telsia();
void globalCommon_LoveChoice_None();


//STATEMENT SAVERS Co-Op Mod!!!
//This functions here save statements!
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//====================================================================================================================================================
//====================================================================================================================================================
//  COMMON CONSTANTS
//====================================================================================================================================================
//====================================================================================================================================================

//-----------------------------------------------------------
//-----------------------------------------------------------
//--- CONSTANTS

float FALSE = 0;
float TRUE = 1;
float NULL = -1;


//-----------------------------------------------------------
//-----------------------------------------------------------
//--- ENUMERATED LISTS CONSTANTS




//====================================================================================================================================================
//====================================================================================================================================================
//  COMMON FUNCTIONS
//====================================================================================================================================================
//====================================================================================================================================================

//---------------------------------------------
// globalCommon_AssertEntity
//
// assert(v): to declare or affirm as true
//
// Provides a debugging mechanism for a script to assert that a particular entity is valid.  If
// it isn't the script will stop the game.
// entPassedEntity - entity, the entity to assert
// strMessage - string, the message to print to the user as the reason for asserting
//---------------------------------------------
void globalCommon_AssertEntity( entity entPassedEntity, string strMessage )
{
	//--- if the entity exists, quit out of the function
	if(!doesEntityExist(entPassedEntity)){	
		//--- the entity does not exist
		print( "========================================================\n"+strMessage+"\n");
	}
}


//---------------------------------------------
// globalCommon_Autosave
// common function used to autosave the game
//---------------------------------------------
void globalCommon_Autosave()
{
	if(getCvar("g_gametype") == "0")
	{
		stuffcmd( "ui_autosavegame\n" );
	}
}


//---------------------------------------------
// globalCommon_AutoSaveName
// common function used to set the autosave name
//---------------------------------------------
void globalCommon_AutoSaveWithName( string saveGameName )
{
	if(getCvar("g_gametype") == "0")
	{
		string command;
		command = "ui_savegamewithname ";
		command = command + "\"";
		command = command + saveGameName;
		command = command + "\"\n";

		stuffcmd( command );
	}
}



//====================================================================================================================================================
//====================================================================================================================================================
//  ONXXXX STYLE FUNCTIONS
//====================================================================================================================================================
//====================================================================================================================================================

//---------------------
// globalCommon_OnUse
// entOnUseTargetname - entity, The object awaiting to be used
// strOnUseThread - string, The thread to run when the object has been used
// On use thread, waits for player to use target then runs thread assosiated with it
//---------------------
void globalCommon_OnUse ( entity entOnUseTargetname , string strOnUseThread )
{
	if(doesEntityExist(entOnUseTargetname)){
		entOnUseTargetname.onuse( strOnUseThread );
		pause();
	}
}

//---------------------
// globalCommon_OnDamage
// entOnDamageTargetname - entity, The object awaiting to be damaged
// strOnDamageThread - string, The thread to run when the object has been damaged
// On damage thread, waits for player to damage the target then runs thread assosiated with it
//---------------------
void globalCommon_OnDamage ( entity entOnDamageTargetname , string strOnDamageThread )
{
	if(doesEntityExist(entOnDamageTargetname)){
		entOnDamageTargetname.nodamage();
		entOnDamageTargetname.ondamage ( strOnDamageThread );
		pause();
	}
}

//---------------------
// globalCommon_OnTouch
// entOnTouchTargetname - entity, The object awaiting to be touched
// strOnTouchThread - string, The thread to run when the object has been touched
// On touch thread, waits for something to touch the target then runs thread assosiated with it
//---------------------
void globalCommon_OnTouch ( entity entOnTouchTargetname, string strOnTouchThread )
{
	if(doesEntityExist(entOnTouchTargetname)){
		entOnTouchTargetname.notouch();
		entOnTouchTargetname.ontouch ( strOnTouchThread );
		pause();
	}
}

//---------------------
// globalCommon_OnTrigger
// entOnTriggerTargetname - entity, The object awaiting to be triggered
// strOnTriggerThread - string, The thread to run when the object has been triggered
// On trigger thread, waits for something to trigger the target then runs thread assosiated with it
//---------------------
void globalCommon_OnTrigger ( entity entOnTriggerTargetname, string strOnTriggerThread )
{
	if(doesEntityExist(entOnTriggerTargetname)){
		entOnTriggerTargetname.ontrigger( strOnTriggerThread );
		pause();
	}
}

//---------------------
// globalCommon_OnBlock
// entOnBlockTargetname - entity, The object awaiting to be blocked
// strOnBlockThread - string, The thread to run when the object has been blocked
// On block thread, waits for something to blcck the object then runs thread assosiated with it
//---------------------
void globalCommon_OnBlock ( entity entOnBlockTargetname, string strOnBlockThread )
{
	if(doesEntityExist(entOnBlockTargetname)){
		entOnBlockTargetname.onblock( strOnBlockThread );
		pause();
	}
}




//====================================================================================================================================================
//====================================================================================================================================================
//  AI USEFUL FUNCTIONS
//====================================================================================================================================================
//====================================================================================================================================================

//---------------------
// globalCommon_AiDummyHide
// Little global thread to hide and AI actor, turn its ai_off and make it notsolid (good for cinematics)
//---------------------
void globalCommon_AiDummyHide( entity entAiDummyToHide )
{
	if(doesEntityExist(entAiDummyToHide)){
		entAiDummyToHide.ai_off();
		globalCoop_level_hideAndNotSolid(entAiDummyToHide);
	}
}

//---------------------
// globalCommon_AiDummyShow
// Little global thread counter part to AiDummyHide, shows the entities and makes them solid and plays idle anim
//---------------------
void globalCommon_AiDummyShow( entity entAiDummyToShow )
{
	if(doesEntityExist(entAiDummyToShow)){
		globalCoop_level_showAndSolid(entAiDummyToShow);
		entAiDummyToShow.anim ( "idle" );
	}
}

//---------------------
// globalCommon_AiDummy
// makes an AI character into a stationary dummy that can't be pushed and it shows if is hidden
//---------------------
void globalCommon_AiDummy( entity entAiDummy , string strAiDummyAnim )
{
	if(doesEntityExist(entAiDummy))
	{
		globalCoop_level_showAndSolid(entAiDummy);	
		entAiDummy.pushable ( 0 );
		entAiDummy.ai_off();
		//--- if an animation is passed, then make the AI play it
		if( strAiDummyAnim != "" )
		{
			entAiDummy.anim ( strAiDummyAnim );
		}
	}
}

//---------------------
// globalCommon_AiActor
// Makes people able to wander around again, and resets to base values
//---------------------
void globalCommon_AiActor( entity entAiActor )
{
	if(doesEntityExist(entAiActor)){
		entAiActor.ai_on();
		entAiActor.pushable ( 1 );
		globalCoop_level_showAndSolid(entAiActor);
	}
}

//---------------------
// globalCommon_AiActorUseWeapon
// Makes actor use a specific weapon
// AI must be off for this to work right.
//---------------------
void globalCommon_AiActorUseWeapon(entity currentActor, string weaponToUse )
{
	if(doesEntityExist(currentActor)){
		string currentWeapon, animname;

		// If you want the actor to use the players current weapon use "current"
		// example: for scripting cinematics with a fake player
		if( weaponToUse == "current" )
		{
			entity ePlayer;
			ePlayer = globalCoop_return_playerClosestPreferActive(currentActor);
			weaponToUse = "None";
			if(ePlayer.getTargetname() != "world"){
				weaponToUse = ePlayer.getActiveWeaponName();
			}
		}

		// make the actor use weaponToUse
		currentWeapon = currentActor.getActiveWeaponName();
		if( currentWeapon == weaponToUse )
		{
			// nothing to do
			if( currentWeapon != "None") {
				useactorweapon( currentWeapon );
			}
			return;
		}

		if( currentWeapon != "None" )
		{
			// put away current weapon
			animname = currentWeapon + "_putaway";
			globalCoop_actor_animateWaitForAnimation(currentActor,animname);//ENTITY:actor,STRING: AniName
		}

		// use new weapon
		currentActor.useactorweapon( weaponToUse );

		// don't do any anim stuff if the new weapon is "none"
		if( weaponToUse != "None"){
			// draw new weapon
			animname = weaponToUse + "_draw";
			globalCoop_actor_animateWaitForAnimation(currentActor,animname);//ENTITY:actor,STRING: AniName

			// play idle
			animname = weaponToUse + "_calm_idle";
			currentActor.anim( animname );
		}
	}
}




//====================================================================================================================================================
//====================================================================================================================================================
//  SPAWN USEFUL FUNCTIONS
//====================================================================================================================================================
//====================================================================================================================================================

//---------------------
// globalCommon_SpawnScriptModel
// Spawns a script model at a specific origin and angle
//---------------------
void globalCommon_SpawnScriptModel( string spawnedTikiName, string spawnedTargetName, vector spawedOrigin, float spawnedAngle )
{
	spawn("script_model","model",spawnedTikiName,"targetname",spawnedTargetName,"origin",vectorToString(spawedOrigin),"angle",""+spawnedAngle);
	//--- You must wait for this to spawn
	globalCoop_main_waitZeroDotZero5();
}

//---------------------
// globalCommon_SpawnActor
// Spawns an Actor at a specific origin and angle
//---------------------
void globalCommon_SpawnActor( string spawnedTikiName, string spawnedTargetName, vector spawedOrigin, float spawnedAngle )
{
	entity entityTargetName;
	entityTargetName = spawn("actor","model",spawnedTikiName,"targetname",spawnedTargetName,"origin",vectorToString(spawedOrigin),"ai_off","1");
	//--- You must wait for this to spawn
	globalCoop_main_waitZeroDotZero5();
	entityTargetName.angle( spawnedAngle );
}




//====================================================================================================================================================
//====================================================================================================================================================
//  ACTOR WORK AND PATH WORK USEFUL FUNCTIONS
//====================================================================================================================================================
//====================================================================================================================================================

//---------------------
// globalCommon_ActorRandomNodePatrolWork
// Makes an actor walk to a random node and play an animtion, then start agian.
// Must be atleast 2 nodes
// Node start number is 0 then 1 then 2 ect.
//---------------------
void globalCommon_ActorRandomNodePatrolWork( entity currentActor, string nodePatrolWork, string animationToPlayPerNode, float totalNumberOfNodes )
{
	float randomNodeNumber;
	float lastRandomNodeNumber;
	//--- This wait is for actors speaking. After an actor speaks, give the
	//--- player time to use him agian.
	wait( 3 );

	while( 1 )
	{
		randomNodeNumber = randomint( totalNumberOfNodes );

		if( randomNodeNumber != lastRandomNodeNumber )
		{
			lastRandomNodeNumber = randomNodeNumber;
			globalCoop_actor_walkTo(currentActor,( nodePatrolWork + randomNodeNumber ),"walk");
			globalCoop_actor_animateWaitForAnimation(currentActor,animationToPlayPerNode);//ENTITY:actor,STRING: AniName
			currentActor.anim( "idle" );
		}
		globalCoop_main_waitZeroDotZero5();
	}
}

//---------------------
// globalCommon_ActorRandomNodeWork
// Makes an actor walk to a random node and play an animtion.
// Node start number is 0 then 1 then 2 ect.
//---------------------
void globalCommon_ActorRandomNodeWork( entity currentActor, string nodePatrolWork, string animationToPlayPerNode, float totalNumberOfNodes )
{
	// --- Set Node
	// --- Walk to node and work once
	globalCoop_actor_walkTo(currentActor,(nodePatrolWork + randomint(totalNumberOfNodes)),"walk");
	globalCoop_actor_animateWaitForAnimation(currentActor,animationToPlayPerNode);//ENTITY:actor,STRING: AniName
	currentActor.anim( "idle" );
}

//---------------------
// globalCommon_ActorNodeWork
// Makes an actor walk to a random node and play an animtion over and over.
// Node start number is 0 then 1 then 2 ect.
//---------------------
void globalCommon_ActorNodeWork( entity currentActor, string nodePatrolWork, string animationToPlayPerNode, float nodeToWorkAt )
{
	// --- Walk to node and work once
	globalCoop_actor_walkTo(currentActor,( nodePatrolWork + nodeToWorkAt ),"walk");
	globalCoop_actor_animateWaitForAnimation(currentActor,animationToPlayPerNode);//ENTITY:actor,STRING: AniName
	currentActor.anim( "idle" );
}


//---------------------
// globalCommon_SetupContextDialogForM3
// Sets up the context and +use ( combat ) dialog for teammates
// context dialog for enemies should be set up in the TIKI
// This function is LONG, because I want to keep everything centralized.
//---------------------
void globalCommon_SetupContextDialogForM3( entity currentActor , string theActorName )
{
	//Lines commented out because our game is too big, and we're blowing out MAX_SOUNDS in SV_FindIndex ();

	string path;

	//-------------------------------------------------------------------------
	// Context "enteredcombat"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtEnteredCombatA" , path + theActorName + "_anotone-3.mp3" ); 		//There's another one!
	currentActor.alias( theActorName + "CtxtEnteredCombatB" , path + theActorName + "_lookout-3.mp3" ); 		//Look out!!
	currentActor.alias( theActorName + "CtxtEnteredCombatC" , path + theActorName + "_overthere-3.mp3" ); 	//Over there!
	currentActor.alias( theActorName + "CtxtEnteredCombatD" , path + theActorName + "_wevegot-3.mp3" );		//We've Got Contacts!
	currentActor.alias( theActorName + "CtxtEnteredCombatE" , path + theActorName + "_incoming-3.mp3" );		//Incoming!
	currentActor.alias( theActorName + "CtxtEnteredCombatF" , path + theActorName + "_espotted-3.mp3" );		//Enemy Spotted!
	currentActor.alias( theActorName + "CtxtEnteredCombatG" , path + theActorName + "_herecome-3.mp3" );		//Here They Come
	currentActor.alias( theActorName + "CtxtEnteredCombatH" , path + theActorName + "_headsup-3.mp3" );		//Heads up
	currentActor.alias( theActorName + "CtxtEnteredCombatI" , path + theActorName + "_herewego-3.mp3" );		//Here we go
	currentActor.alias( theActorName + "CtxtEnteredCombatJ" , path + theActorName + "_contacts-3.mp3" );		//Contacts
	currentActor.dialog( theActorName + "CtxtEnteredCombat" , "contextinitiator" , "enteredcombat" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Context "playerattacked"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtPlayerAttackedA" , path + theActorName + "_munwhat-3.mp3" ); 	//Munro, what are you doing?
	currentActor.alias( theActorName + "CtxtPlayerAttackedB" , path + theActorName + "_heywat-3.mp3" ); 		//Hey! Watch it!
	currentActor.alias( theActorName + "CtxtPlayerAttackedC" , path + theActorName + "_holdfire-3.mp3" ); 	//Hold your fire
	currentActor.alias( theActorName + "CtxtPlayerAttackedD" , path + theActorName + "_whoses-3.mp3" ); 		//Who's side are you on
	currentActor.alias( theActorName + "CtxtPlayerAttackedE" , path + theActorName + "_watchfire-3.mp3" ); 	//Watch your fire
	currentActor.alias( theActorName + "CtxtPlayerAttackedF" , path + theActorName + "_whatyoudo-3.mp3" ); 	//What are you doing
	currentActor.alias( theActorName + "CtxtPlayerAttackedG" , path + theActorName + "_checktarg-3.mp3" ); 	//Munro! Check your targets
	currentActor.dialog ( theActorName + "CtxtPlayerAttacked" , "contextinitiator" , "playerattacked" );
	wait ( .1 );		//let the server digest all of this (it's a lot)


	//-------------------------------------------------------------------------
	// Context "turnonplayer"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtTurnOnPlayerA" , path + theActorName + "_committr-3.mp3" ); 	//You're committing treason!
	currentActor.alias( theActorName + "CtxtTurnOnPlayerB" , path + theActorName + "_ltcomm-3.mp3" );		//Lieutenant, you are committing treason!
	currentActor.dialog ( theActorName + "CtxtTurnOnPlayer" , "contextinitiator" , "turnonplayer" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Context "incombat" -- General
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtInCombatA" , path + theActorName + "_coverme-3.mp3" ); 		//Cover me!
	currentActor.alias( theActorName + "CtxtInCombatC" , path + theActorName + "_lookout-3.mp3" );		//Look out!
	currentActor.alias( theActorName + "CtxtInCombatD" , path + theActorName + "_toomany-3.mp3" );		//There are too many of them!
	currentActor.alias( theActorName + "CtxtInCombatG" , path + theActorName + "_watchout-3.mp3" );		//Watch out!
	currentActor.alias( theActorName + "CtxtInCombatH" , path + theActorName + "_wantsome-3.mp3" );		//Want some more?
	currentActor.alias( theActorName + "CtxtInCombatI" , path + theActorName + "_brinon-3.mp3" );		//Bring it on!
	currentActor.alias( theActorName + "CtxtInCombatJ" , path + theActorName + "_howanot-3.mp3" );		//How about another one
	currentActor.alias( theActorName + "CtxtInCombatK" , path + theActorName + "_allyougot-3.mp3" );		//Is that all you've got?
	currentActor.dialog ( theActorName + "CtxtInCombat" , "contextinitiator" , "incombat" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Context "inpain"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtInPainC" , path + theActorName + "_pain1-3.mp3" );		//Arrrghh!
	currentActor.dialog ( theActorName + "CtxtInPain" , "contextinitiator" , "inpain" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Context "killedenemy"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtKilledEnemyA" , path + theActorName + "_takethat-3.mp3" ); 	//Take that!
	currentActor.alias( theActorName + "CtxtKilledEnemyB" , path + theActorName + "_gotone-3.mp3" ); 	//Got One!
	currentActor.dialog ( theActorName + "CtxtKilledEnemy" , "contextinitiator" , "killedenemy" );
	wait ( .1 );		//let the server digest all of this (it's a lot)


	//-------------------------------------------------------------------------
	// Context "enemyadapted"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtEnemyAdaptedA" , path + theActorName + "_adapted-3.mp3" ); 		//They've adapted
	currentActor.dialog ( theActorName + "CtxtEnemyAdapted" , "contextinitiator" , "enemyadapted" );
	wait ( .1 );		//let the server digest all of this (it's a lot)


	//-------------------------------------------------------------------------
	// Context "blockedbyplayer"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtBlockedByPlayerA" , path + theActorName + "_exme-3.mp3" ); 		//Excuse me
	currentActor.dialog ( theActorName + "CtxtBlockedByPlayer" , "contextinitiator" , "blockedbyplayer" );
	wait ( .1 );		//let the server digest all of this (it's a lot)


	//-------------------------------------------------------------------------
	// Combat +use dialog
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "PlusUseCombatA" , path + theActorName + "_muntalklater-3.mp3" ); 	//Munro, talk to me later
	currentActor.alias( theActorName + "PlusUseCombatB" , path + theActorName + "_injured-3.mp3" );			//Are you injured
	currentActor.alias( theActorName + "PlusUseCombatD" , path + theActorName + "_cantwait-3.mp3" ); 		//Can't this wait, Alex?
	currentActor.alias( theActorName + "PlusUseCombatE" , path + theActorName + "_sorrynotime-3.mp3" ); 		//Sorry, no time to talk
	currentActor.dialog ( theActorName + "PlusUseCombat" , "combatdialog" , "randompick" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Normal +use dialog
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "PlusUseNormalA" , path + theActorName + "_moveon-3.mp3" ); 			//We should move on
	currentActor.alias( theActorName + "PlusUseNormalC" , path + theActorName + "_whatisal-3.mp3" ); 		//What is it Alex?
	currentActor.alias( theActorName + "PlusUseNormalD" , path + theActorName + "_whatisit-3.mp3" ); 		//What is it?
	currentActor.alias( theActorName + "PlusUseNormalE" , path + theActorName + "_sir9-3.mp3" ); 			//Sir?
	currentActor.alias( theActorName + "PlusUseNormalF" , path + theActorName + "_canihelpu-3.mp3" ); 		//Can I help you?
	currentActor.alias( theActorName + "PlusUseNormalG" , path + theActorName + "_alex-3.mp3" ); 			//Alex?
	currentActor.dialog ( theActorName + "PlusUseNormal" , "randompick" );
	wait ( .1 );		//let the server digest all of this (it's a lot);
}

//---------------------
// globalCommon_SetupContextDialog
// Sets up the context and +use ( combat ) dialog for teammates
// context dialog for enemies should be set up in the TIKI
// This function is LONG, because I want to keep everything centralized.
//---------------------
void globalCommon_SetupContextDialog( entity currentActor , string theActorName )
{
	//Lines commented out because our game is too big, and we're blowing out MAX_SOUNDS in SV_FindIndex ();

	string path;

	//-------------------------------------------------------------------------
	// Context "enteredcombat"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtEnteredCombatA" , path + theActorName + "_anotone.mp3" ); 		//There's another one!
	currentActor.alias( theActorName + "CtxtEnteredCombatB" , path + theActorName + "_lookout.mp3" ); 		//Look out!!
	currentActor.alias( theActorName + "CtxtEnteredCombatC" , path + theActorName + "_overthere.mp3" ); 	//Over there!
	currentActor.alias( theActorName + "CtxtEnteredCombatD" , path + theActorName + "_wevegot.mp3" );		//We've Got Contacts!
	currentActor.alias( theActorName + "CtxtEnteredCombatE" , path + theActorName + "_incoming.mp3" );		//Incoming!
	currentActor.alias( theActorName + "CtxtEnteredCombatF" , path + theActorName + "_espotted.mp3" );		//Enemy Spotted!
	currentActor.alias( theActorName + "CtxtEnteredCombatG" , path + theActorName + "_herecome.mp3" );		//Here They Come
	currentActor.alias( theActorName + "CtxtEnteredCombatH" , path + theActorName + "_headsup.mp3" );		//Heads up
	currentActor.alias( theActorName + "CtxtEnteredCombatI" , path + theActorName + "_herewego.mp3" );		//Here we go
	currentActor.alias( theActorName + "CtxtEnteredCombatJ" , path + theActorName + "_contacts.mp3" );		//Contacts
	currentActor.dialog( theActorName + "CtxtEnteredCombat" , "contextinitiator" , "enteredcombat" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Context "playerattacked"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtPlayerAttackedA" , path + theActorName + "_munwhat.mp3" ); 	//Munro, what are you doing?
	currentActor.alias( theActorName + "CtxtPlayerAttackedB" , path + theActorName + "_heywat.mp3" ); 		//Hey! Watch it!
	currentActor.alias( theActorName + "CtxtPlayerAttackedC" , path + theActorName + "_holdfire.mp3" ); 	//Hold your fire
	currentActor.alias( theActorName + "CtxtPlayerAttackedD" , path + theActorName + "_whoses.mp3" ); 		//Who's side are you on
	currentActor.alias( theActorName + "CtxtPlayerAttackedE" , path + theActorName + "_watchfire.mp3" ); 	//Watch your fire
	currentActor.alias( theActorName + "CtxtPlayerAttackedF" , path + theActorName + "_whatyoudo.mp3" ); 	//What are you doing
	currentActor.alias( theActorName + "CtxtPlayerAttackedG" , path + theActorName + "_checktarg.mp3" ); 	//Munro! Check your targets
	currentActor.dialog ( theActorName + "CtxtPlayerAttacked" , "contextinitiator" , "playerattacked" );
	wait ( .1 );		//let the server digest all of this (it's a lot)


	//-------------------------------------------------------------------------
	// Context "turnonplayer"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtTurnOnPlayerA" , path + theActorName + "_committr.mp3" ); 	//You're committing treason!
	currentActor.alias( theActorName + "CtxtTurnOnPlayerB" , path + theActorName + "_ltcomm.mp3" );		//Lieutenant, you are committing treason!
	currentActor.dialog ( theActorName + "CtxtTurnOnPlayer" , "contextinitiator" , "turnonplayer" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Context "incombat" -- General
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtInCombatA" , path + theActorName + "_coverme.mp3" ); 		//Cover me!
	currentActor.alias( theActorName + "CtxtInCombatC" , path + theActorName + "_lookout.mp3" );		//Look out!
	currentActor.alias( theActorName + "CtxtInCombatD" , path + theActorName + "_toomany.mp3" );		//There are too many of them!
	currentActor.alias( theActorName + "CtxtInCombatG" , path + theActorName + "_watchout.mp3" );		//Watch out!
	currentActor.alias( theActorName + "CtxtInCombatH" , path + theActorName + "_wantsome.mp3" );		//Want some more?
	currentActor.alias( theActorName + "CtxtInCombatI" , path + theActorName + "_brinon.mp3" );		//Bring it on!
	currentActor.alias( theActorName + "CtxtInCombatJ" , path + theActorName + "_howanot.mp3" );		//How about another one
	currentActor.alias( theActorName + "CtxtInCombatK" , path + theActorName + "_allyougot.mp3" );		//Is that all you've got?
	currentActor.dialog ( theActorName + "CtxtInCombat" , "contextinitiator" , "incombat" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Context "inpain"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtInPainC" , path + theActorName + "_pain1.mp3" );		//Arrrghh!
	currentActor.dialog ( theActorName + "CtxtInPain" , "contextinitiator" , "inpain" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Context "killedenemy"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtKilledEnemyA" , path + theActorName + "_takethat.mp3" ); 	//Take that!
	currentActor.alias( theActorName + "CtxtKilledEnemyB" , path + theActorName + "_gotone.mp3" ); 	//Got One!
	currentActor.dialog ( theActorName + "CtxtKilledEnemy" , "contextinitiator" , "killedenemy" );
	wait ( .1 );		//let the server digest all of this (it's a lot)


	//-------------------------------------------------------------------------
	// Context "enemyadapted"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtEnemyAdaptedA" , path + theActorName + "_adapted.mp3" ); 		//They've adapted
	currentActor.dialog ( theActorName + "CtxtEnemyAdapted" , "contextinitiator" , "enemyadapted" );
	wait ( .1 );		//let the server digest all of this (it's a lot)


	//-------------------------------------------------------------------------
	// Context "blockedbyplayer"
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "CtxtBlockedByPlayerA" , path + theActorName + "_exme.mp3" ); 		//Excuse me
	currentActor.dialog ( theActorName + "CtxtBlockedByPlayer" , "contextinitiator" , "blockedbyplayer" );
	wait ( .1 );		//let the server digest all of this (it's a lot)


	//-------------------------------------------------------------------------
	// Combat +use dialog
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "PlusUseCombatA" , path + theActorName + "_muntalklater.mp3" ); 	//Munro, talk to me later
	currentActor.alias( theActorName + "PlusUseCombatB" , path + theActorName + "_injured.mp3" );			//Are you injured
	currentActor.alias( theActorName + "PlusUseCombatD" , path + theActorName + "_cantwait.mp3" ); 		//Can't this wait, Alex?
	currentActor.alias( theActorName + "PlusUseCombatE" , path + theActorName + "_sorrynotime.mp3" ); 		//Sorry, no time to talk
	currentActor.dialog ( theActorName + "PlusUseCombat" , "combatdialog" , "randompick" );
	wait ( .1 );		//let the server digest all of this (it's a lot)

	//-------------------------------------------------------------------------
	// Normal +use dialog
	//-------------------------------------------------------------------------
	path = "localization/sound/dialog/combat/";
	currentActor.alias( theActorName + "PlusUseNormalA" , path + theActorName + "_moveon.mp3" ); 			//We should move on
	currentActor.alias( theActorName + "PlusUseNormalC" , path + theActorName + "_whatisal.mp3" ); 		//What is it Alex?
	currentActor.alias( theActorName + "PlusUseNormalD" , path + theActorName + "_whatisit.mp3" ); 		//What is it?
	currentActor.alias( theActorName + "PlusUseNormalE" , path + theActorName + "_sir9.mp3" ); 			//Sir?
	currentActor.alias( theActorName + "PlusUseNormalF" , path + theActorName + "_canihelpu.mp3" ); 		//Can I help you?
	currentActor.alias( theActorName + "PlusUseNormalG" , path + theActorName + "_alex.mp3" ); 			//Alex?
	currentActor.dialog ( theActorName + "PlusUseNormal" , "randompick" );
	wait ( .1 );		//let the server digest all of this (it's a lot);
}



//---------------------
// globalCommon_SetupCombatAnimation
// sets up the actor to use a specific animation before entering combat, and sets
// the masterstate map appropriately as well.
//---------------------
void globalCommon_SetupCombatAnimation( entity currentActor , string theAnimation )
{
	currentActor.masterstatemap ( "ai/humanoids/humanoid_ambushmasterstatemap.st" );
	currentActor.setstringvar ( "ambushanim" , theAnimation );
}


//====================================================================================================================================================
//====================================================================================================================================================
//  TELSIA KLEEYA END CHOICE STUFF
//====================================================================================================================================================
//====================================================================================================================================================

//---------------------
// globalCommon_PointKleeya
// give kleeya a point in the race towards the perfect couple
//---------------------
void globalCommon_LoveChoice_Kleeya()
{
    float choice;
	choice = getfloatvar( "game.globalKleeyaChoice" );
	if(cvar_bool_multiplayer)
	{
		choice = getCvarInt("coop_lcK");
	}
    choice++;
    setfloatvar( "game.globalKleeyaChoice", choice );
	if(cvar_bool_multiplayer)
	{
		stuffcmd("seta coop_lcK "+choice+"\n");
	}
}

//---------------------
// globalCommon_PointTelsia
// give telsia a point in the race towards the perfect couple....ohhhh I sense a cat-fight comin' on.....
//---------------------
void globalCommon_LoveChoice_Telsia()
{
    float choice;
	choice = getfloatvar( "game.globalTelsiaChoice" );
	if(cvar_bool_multiplayer)
	{
		choice = getCvarInt("coop_lcT");
	}
    choice++;
    setfloatvar( "game.globalTelsiaChoice", choice );
	if(cvar_bool_multiplayer)
	{
		stuffcmd("seta coop_lcT "+choice+"\n");
	}
}

//---------------------
// globalCommon_PointNone
// give the none choice a point....munro's shootin' himself in the foot, he ain't gettin' any for a loooong time....
//---------------------
void globalCommon_LoveChoice_None()
{
    float choice;
	choice = getfloatvar( "game.globalNoneChoice" );
	if(cvar_bool_multiplayer)
	{
		choice = getCvarInt("coop_lcN");
	}
    choice++;
    setfloatvar( "game.globalNoneChoice", choice );
	if(cvar_bool_multiplayer)
	{
		stuffcmd("seta coop_lcN "+choice+"\n");
	}
}

