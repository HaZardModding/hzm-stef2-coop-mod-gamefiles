/*ArmorDeflection
electriclines
electriclines-yellow
disruptor_death
orangemist
transport
transport-borg
transport-idryll
transport-romulan
phaser_death
photon_death
sniper_death
electriclines-idryll
electriclines-borgdisable
stasis*/

//eWalkto = spawn("script_model","model","models/enviro/enterprise_clothing_evo_boots.tik","notsolid","1");
//eWalkto = spawn("script_model","model","models/enviro/enterprise_clothing_boots-straight.tik","notsolid","1");	
//eWalkto = spawn("script_model","model","models/fx/fx-sphere.tik","notsolid","1");
//eWalkto = spawn("script_model","model","models/fx/fx-redplasma.tik","notsolid","1");
//eWalkto = spawn("script_model","model","models/fx/fx-plasmaring.tik","notsolid","1");
//eWalkto = spawn("script_model","model","sysimg/icons/items/rune_armorpiercing.spr","notsolid","1");
//eWalkto = spawn("script_model","model","models/fx/fx-sphere-quadraped2.tik","notsolid","1");
//eWalkto = spawn("script_model","model","models/fx/fx-sphere-idryllphoton.tik","notsolid","1");
//eWalkto = spawn("script_model","model","models/fx/fx-sphere-idryllmortar.tik","notsolid","1");
//eWalkto = spawn("script_model","model","models/fx/fx-sphere-fieldgenerator.tik","notsolid","1");
//eWalkto = spawn("script_model","model","models/fx/fx-smoke-gray-directional.tik","notsolid","1");

/* animations
compressionrifle_putaway
detpack_plant_duck					<- use
detpack_plant						<- use
conv-overthere						<- use
conv-fingerup-warning				<- use
conv-fingerpoint-atyou
from_crouch
to_crouch
crouch_idle
diveroll_L
diveroll_R
ent-compstation-gesture
conv-idle
conv-yes
conv-no
conv-wtf
conv-look
conv-comehere
conv-backthere
conv-affirmative
conv-laugh1
conv-idle-look
conv-wavehello
conv-talk-handsonhips
conv-handsweep
conv-handflick-hellno
conv-embarrassment
conv-crossarms
conv-gesture
conv-gesture1
conv-gestureL
conv-gestureR
conv-talk1 , 2 ,3
conv-shrug
conv-shakehead
conv-scratchingchin-thinking
conv-poundfist
ent-guard-gesture
ent-guard-gesture1
ent-guard-idle
ent-guard-idle-look
ent-guard-scan
ent-idryll-shuttle-gesture
ent-idryll-shuttle-gesture1
ent-idryll-shuttle-idle
ent-idryll-shuttle-idle-look
ent-island-gesture
ent-island-gesture1
ent-island-idle
ent-island-idle-look
ent-island-scan
hypo_draw
hypo_draw_duck
hypo_fire
kneel_working_up
kneel_working_idle
kneel_working_down
livelong
long_death


//.enemytype("anyname");	//if enemies of different actortype are of the same enemytype (name) they will not attack other 
//.actortype("monster");	//monster,enemy,civilian,friend,animal,teammate
//.addcustomthread( String threadType, String threadName ) //meleehit,damaged
*/

string	selectionShader = "photon_death";

void	coop_pcaSelectionManager(entity ePlayer);
float	coop_pcaActorWalkto(entity eActor,vector vOrigin,string sAnim,entity eTarget);
void	coop_pcaActorWaitForAnimation(entity eCurrent,string sAnim,float fDelay);
string	coop_pcaGetDataFor(entity eCurrent,string sData);
string	coop_pcaButtonDetect(entity ePlayer);
float	coop_pcaSelectedMarker(entity ePlayer,entity sSelected);
void	coop_pcaSelectedMarkerClear(entity ePlayer,entity sSelected);
void	coop_pcaInteractive(entity eInteractive);
void	coop_pcaNotInteractive(entity eInteractive);
void	coop_pcaSelectable(entity eSelectable);
float	coop_pcaIsSelectable(entity eSelectable);
void	coop_pcaSelectableRemove(entity eSelectable);
float	coop_pcaCheckEntityLocked(entity eCurrent);
entity	coop_pcaSelectedReturnEntity(entity ePlayer);
float	coop_pcaSelectedReturnEntityEntnum(entity ePlayer);
void	coop_pcaJustLeft(entity ePlayer);
void	coop_pcaJustEntered(entity ePlayer);
float	coop_pcaActorGoTo(entity ePlayer,entity eCurrent);
string	coop_pcaGetIcon(entity eCurrent);
void	coop_pcaHandleSelect(entity ePlayer,entity eCurrent);
void	coop_pcaHandleHover(entity ePlayer,entity eCurrent,entity eMarker);
void	coop_pcaHideTarget();
void	coop_pcaShowTarget();
float	coop_pcaIsInteractive(entity eCurrent);
entity	coop_pcaActorReturnControllingPlayer(entity eActor);
float	coop_pcaActorControlledByPlayerEntnum(entity eActor);
void	coop_pcaActorMonitor(entity eActor);
void	coop_pcaSetValidTarget(entity eCurrent,float fValid);
void	coop_pcaFailOnDeath(entity eCurrent,float fFail,string sReason);
void	coop_pcaFailOnDeathLoop(entity eCurrent,float fFail,string sReason);
void	coop_pcaMissionFailure(string sReason);
void	coop_pcaDamaged();
void	coop_pcaActivateUnit(entity eUnit);
float	coop_pcSetBeamOutCapable(entity eActor,float fAllow);
float	coop_pcaCheckBeamOut(entity eActor);
void	coop_pcaSetAnimationFor(entity eActor,string sAction, string sAnimation);
string	coop_pcaGetAnimationFor(entity eActor,string sAction);
void	coop_pcaSetDialogSelect(entity eActor, string sDialog);
string	coop_pcaGetDialogSelect(entity eActor);
void	coop_pcaSetDialogHeal(entity eActor, string sDialog);
string	coop_pcaGetDialogHeal(entity eActor);
void	coop_pcaDialogPlay(entity eActor,string sDialog);
float	coop_pcaCheckValidAction(string sAction);
float	coop_pcaCheckValidAbility(string sAbility);
void	coop_pcaSetAbility(entity eActor,string sAbility,float fHas);
float	coop_pcaHasAbility(entity eActor,string sAbility);
float	coop_pcaGetStartHealth(entity eActor);
void	coop_pcaSetStartHealth(entity eActor, float fHealth);


void coop_pcaSelectionManager(entity ePlayer)
//------------------------------------------------------------------------------
//show selected entity
//------------------------------------------------------------------------------
{
	string sLastBtn;
	string sCurrentBtn;
	string sCurrentClass;
	string sSelectedClass;	
	entity eCurrent;
	entity eLast;
	entity eSelected;
	entity eActor;
	
	sLastBtn = "NIL";
	
	//run only one instance
	if(ePlayer.getFloatVar("_pointAndClick_selectorRunning")){return;}
	ePlayer.setFloatVar("_pointAndClick_selectorRunning",1);
	ePlayer.setFloatVar("_pointAndClick_entitySelected",-1);
	ePlayer.disableuseweapon(1);
	ePlayer.hide();
	ePlayer.notsolid();
	
	entity eMarker;
	eMarker = spawn("script_model","model","sysimg/icons/mp/team_blue.spr","notsolid","1","hide","1");
	globalCoop_main_waitAFrame();
	//eMarker.rendereffects("+depthhack");
	
	while(doesEntityExist(ePlayer)){
		if(ePlayer.getHealth() <= 0 || ePlayer.isSpectator()){
			eMarker.remove();
			return;
		}	
	
		if(ePlayer.checkThirdperson()){
			ePlayer.pointofview();
		}
		
		entity eActor;
		eActor = coop_pcaSelectedReturnEntity(ePlayer);		
		eCurrent = ePlayer.getTargetedEntity();
		if(doesEntityExist(eActor)){
			if(eActor.getSubclassName() == "Actor"){
				float f100Percent;
				float f1Percent;
				float fCurrentHealth;
				f100Percent = coop_pcaGetStartHealth(eActor);
				fCurrentHealth = eActor.getHealth();
				f1Percent = (f100Percent / 100);
				ePlayer.setstat( "generic", (fCurrentHealth / f1Percent));
			}
		}
		
		if(doesEntityExist(eCurrent)){
			//grab current targeted class
			sCurrentClass = eCurrent.getSubclassName();
			
			//grab selected data
			eSelected = coop_pcaSelectedReturnEntity(ePlayer);
			if(doesEntityExist(eSelected)){ sSelectedClass=eSelected.getSubclassName(); }
			else{sSelectedClass = "";}
			
			//handle hover
			if(eLast != eCurrent){
				coop_pcaHandleHover(ePlayer,eCurrent,eMarker);
			}

			//grab button
			sCurrentBtn = coop_pcaButtonDetect(ePlayer);
			
			//only respond if button state has changed
			if(sCurrentBtn != sLastBtn){
				//---------------------------------
				//regardless of whats being targeted
				//---------------------------------
				if(sCurrentBtn == "use"){
					ePlayer.hudprint("use button does not do anything right now (unfinished)\n");
				}
				
				//---------------------------------
				//if a entity is targeted
				//---------------------------------
				if(sCurrentClass != "World"){
					//fire is pressed, try select entity
					if(sCurrentBtn == "fire"){
						coop_pcaHandleSelect(ePlayer,eCurrent);
					}
					//alt
					else if(sCurrentBtn == "alt"){
						//we have actor selected, try go there
						if(sSelectedClass == "Actor"){
							if(coop_pcaActorGoTo(ePlayer,eCurrent)){
								wait(0.2);
							}
						}
					}
				}
				//---------------------------------
				//a object other than world is targeted
				//---------------------------------
				else{
					if(sCurrentBtn == "alt"){
						if(sSelectedClass == "Actor"){
							if(coop_pcaActorGoTo(ePlayer,eCurrent)){
								wait(0.2);
							}
						}
					}
				}
				wait(0.1);
			}
			eLast = eCurrent;
		}
		
		//---------------------------------
		//keep track of last button
		//---------------------------------
		sLastBtn = sCurrentBtn;
		globalCoop_main_waitAFrame();
	}
	
	//remove marker
	if(doesEntityExist(eMarker)){
		eMarker.remove();
	}
}

float coop_pcaGetStartHealth(entity eActor)
//------------------------------------------------------------------------------
//GET HEALTH THIS ACTOR STARTED WITH
//------------------------------------------------------------------------------
{
	float fStartHealth;
	fStartHealth = 75;
	if(doesEntityExist(eActor)){
		if(eActor.getHealth() > 0){
			if(eActor.doesVarExist("_pointAndClick_healthStart")){
				fStartHealth = eActor.getFloatVar("_pointAndClick_healthStart");
			}
		}
	}
	return fStartHealth;
}

void coop_pcaSetStartHealth(entity eActor, float fHealth)
//------------------------------------------------------------------------------
//SET HEALTH THIS ACTOR SHOULD HAVE FROM THE START
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eActor)){
		eActor.setStringVar("_pointAndClick_healthStart",fHealth);
		eActor.health(fHealth);
	}
}

void coop_pcaSetDialogHeal(entity eActor, string sDialog)
//------------------------------------------------------------------------------
//SET SOUND THAT SHOULD BE PLAYED WHEN ACTOR IS HEALING
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eActor)){
		eActor.setStringVar("_pointAndClick_soundHeal",sDialog);
	}
}

string coop_pcaGetDialogHeal(entity eActor)
//------------------------------------------------------------------------------
//SET SOUND THAT SHOULD BE PLAYED WHEN ACTOR IS BEING HEALING
//------------------------------------------------------------------------------
{
	string sDialog;
	if(doesEntityExist(eActor)){
		if(eActor.doesVarExist("_pointAndClick_soundHeal")){
			sDialog = eActor.getStringVar("_pointAndClick_soundHeal");
		}
	}
	return ""+sDialog;
}

void coop_pcaSetDialogSelect(entity eActor, string sDialog)
//------------------------------------------------------------------------------
//SET SOUND THAT SHOULD BE PLAYED WHEN ACTOR IS BEING SELECTED
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eActor)){
		eActor.setStringVar("_pointAndClick_soundSelect",sDialog);
	}
}

string coop_pcaGetDialogSelect(entity eActor)
//------------------------------------------------------------------------------
//SET SOUND THAT SHOULD BE PLAYED WHEN ACTOR IS BEING SELECTED
//------------------------------------------------------------------------------
{
	string sDialog;
	if(doesEntityExist(eActor)){
		if(eActor.doesVarExist("_pointAndClick_soundSelect")){
			sDialog = eActor.getStringVar("_pointAndClick_soundSelect");
		}
	}
	return ""+sDialog;
}

void coop_pcaDialogPlay(entity eActor,string sDialog)
//------------------------------------------------------------------------------
//PLAY SOUND ON ACTOR
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eActor)){
		if(eActor.getHealth() > 0){
			float fPlaying;
			fPlaying = eActor.getFloatVar("_pointAndClick_soundPlaying");
			sDialog = eActor.getStringVar("_pointAndClick_soundSelect");
			if(sDialog != ""){
				eActor.setFloatVar("_pointAndClick_soundPlaying",1);
				eActor.simplePlayDialog(sDialog,1,2048);
				waitDialogLength(sDialog);
				wait(1);
				if(doesEntityExist(eActor)){
					eActor.setFloatVar("_pointAndClick_soundPlaying",0);
				}
			}else{
				wait(1);
			}
		}
	}
}

float coop_pcaCheckValidAbility(string sAbility)
//------------------------------------------------------------------------------
// CHECK IF ABILITY IS VALID
//------------------------------------------------------------------------------
{
	if(sAbility == "heal"){ return 1;}
	print("P.a.Click: Invalid ability: "+sAbility+"- valid: heal\n");
	return 0;
}

void coop_pcaSetAbility(entity eActor,string sAbility,float fHas)
//------------------------------------------------------------------------------
// SET IF THIS ACTOR HAS A SPECIFIC ABILITY OR NOT
//------------------------------------------------------------------------------
{
	if(coop_pcaCheckValidAbility(sAbility)){
		if(doesEntityExist(eActor)){
			eActor.setFloatVar("_pointAndClick_abiliy_"+sAbility,fHas);
		}
	}
}

float coop_pcaHasAbility(entity eActor,string sAbility)
//------------------------------------------------------------------------------
// CHECK IF ABILITY IS VALID
//------------------------------------------------------------------------------
{
	if(coop_pcaCheckValidAbility(sAbility)){
		if(doesEntityExist(eActor)){
			if(eActor.getHealth() > 0){
				if(eActor.doesVarExist("_pointAndClick_abiliy_"+sAbility)){
					if(eActor.getFloatVar("_pointAndClick_abiliy_"+sAbility)){
						return 1;
					}
				}
			}
		}
	}
	print("P.a.Click: "+eActor.getTargetName()+"does not have ability: "+sAbility+"\n");
	return 0;
}

float coop_pcaCheckValidAction(string sAction)
//------------------------------------------------------------------------------
// CHECK IF ACTION IS VALID
//------------------------------------------------------------------------------
{
	if(sAction == "walk"){ return 1;}
	if(sAction == "idle"){ return 1;}
	if(sAction == "use"){ return 1;}
	if(sAction == "pickup"){ return 1;}
	if(sAction == "crouch"){ return 1;}
	if(sAction == "scared"){ return 1;}
	if(sAction == "look"){ return 1;}
	if(sAction == "heal"){ return 1;}
	print("P.a.Click: Invalid action: "+sAction+"- valid: idle,walk,use,pickup,crouch,scared,look,heal\n");
	return 0;
}

void coop_pcaSetAnimationFor(entity eActor,string sAction, string sAnimation)
//------------------------------------------------------------------------------
//set animation for a ocation/action
//Example "use","conv-fingerup-warning"
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eActor)){
		if(coop_pcaCheckValidAction(sAction)){
			eActor.setStringVar("_pointAndClick_action_"+sAction,sAnimation);
		}
	}
}

string coop_pcaGetAnimationFor(entity eActor,string sAction)
//------------------------------------------------------------------------------
//play animation for a ocation/action
//Example "use"
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eActor)){
		if(coop_pcaCheckValidAction(sAction)){
			string sAnim;		
			if(eActor.doesVarExist("_pointAndClick_action_"+sAction)){
				sAnim = eActor.getStringVar("_pointAndClick_action_"+sAction);
			}else{
				if(sAction == "walk"){ sAnim="run"; }
				else if(sAction == "idle"){ sAnim="idle"; }
				else if(sAction == "use"){ sAnim="conv-fingerup-warning"; } //conv-fingerup-warning, push-button-open,conv-overthere
				else if(sAction == "pickup"){ sAnim="detpack_plant"; }
				else if(sAction == "crouch"){ sAnim="crouch_idle"; } //from_crouch,crouch_idle,to_crouch,sit_down_idle
				else if(sAction == "scared"){ sAnim="startled"; } //scared,startled,brace_impact_duck
				else if(sAction == "look"){ sAnim="conv-look"; } //conv-look,conv-scratchingchin-thinking,conv-gesture1
				else if(sAction == "heal"){ sAnim="idle"; }
				//laying_down,laying,laying_getup,laying_idle,laying_talk
				//sit_down_start,sit_down_idle,sit_down_end
				//twitch
				//gesture_come
				//cin-m3_drop
				//cin-m3_fromhunch,cin-m3_hunch,cin-m3_tohunch
				//cin-m3_fromscan,cin-m3_scan,cin-m3_toscan
				//cin-m3_greet
				//cin-m3_lean
				//cin-m3_staying
				//communicator
			}
		}
	}
	if(sAnim == ""){
		print("P.a.Click: No Animation for action: "+sAction+"- valid: use,pickup,crouch,scared,look,walk\n");
	}
	return ""+sAnim;
}

string coop_pcaButtonDetect(entity ePlayer)
//------------------------------------------------------------------------------
//detect butten pressed by player
//------------------------------------------------------------------------------
{
	string sButton;
	sButton = "";
	//player pressed fire
	if(ePlayer.checkFire()){
		sButton = "fire";
	}
	//player pressed use
	else if(ePlayer.checkFirealt()){
		sButton = "alt";
	}
	//player pressed use
	else if(ePlayer.checkUse()){
		sButton = "use";
	}
	/*
	ePlayer.checkMenu();
	ePlayer.checkAnyButton();
	ePlayer.checkThirdperson();
	ePlayer.checkJump();
	ePlayer.checkCrouch();
	ePlayer.checkRun();
	ePlayer.checkForward();
	ePlayer.checkBackward();
	ePlayer.checkReload();
	ePlayer.checkDropRune();
	ePlayer.checkLeft();
	ePlayer.checkRight();
	ePlayer.checkLeanLeft();
	ePlayer.checkLeanRight();
	*/
	return ""+sButton; //needs to be done this way or it will return a empty string
}

void coop_pcaActorMonitor(entity eActor)
//------------------------------------------------------------------------------
//check if actor is still alive
//------------------------------------------------------------------------------
{
	//if(already handled)return;
	while(doesEntityExist(eActor)){
		if(eActor.getHealth() <= 0){
			entity ePlayer;
			ePlayer = coop_pcaActorReturnControllingPlayer(eActor);
			if(doesEntityExist(ePlayer)){
				ePlayer.widgetCmd("pacActiveSel","shader weapons/empty");
			}
			eActor.clearcustomshader(selectionShader);
			eActor.renderEffects("-depthhack");
			return;
		}
		wait(0.1);
	}
}

void coop_pcaActorWaitForAnimation(entity eCurrent,string sAnim,float fDelay)
//------------------------------------------------------------------------------
//handle animation
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eCurrent)){
		if(eCurrent.getSubclassName() == "Actor"){ eCurrent.ai_off(); }
		
		eCurrent.setFloatVar("_pointAndClick_inAnimation",1);
		waitForAnimation(eCurrent,sAnim,fDelay);
		
		if(doesEntityExist(eCurrent)){
			eCurrent.setFloatVar("_pointAndClick_inAnimation",0);
			if(eCurrent.getSubclassName() == "Actor"){
				eCurrent.ai_on();
			}
		}
	}
}

float coop_pcSetBeamOutCapable(entity eActor,float fAllow)
//------------------------------------------------------------------------------
//started by trigger - beams out actor
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eActor)){
		eActor.setFloatVar("_pointAndClick_canBeamOut",fAllow);
	}
}

float coop_pcaCheckBeamOut(entity eActor)
//------------------------------------------------------------------------------
//started by trigger - beams out actor
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eActor)){
		if(eActor.doesVarExist("_pointAndClick_canBeamOut")){
			if(eActor.getFloatVar("_pointAndClick_canBeamOut") == 1){
				return 1;
			}
		}
	}
	return 0;
}

void coop_pcaBeamOut()
//------------------------------------------------------------------------------
//started by trigger - beams out actor
//------------------------------------------------------------------------------
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		entity eActivator;
		eActivator = eTrigger.getLastActivatingEntity();
		if(doesEntityExist(eActivator)){
			//check if we are allowed to beam out
			if(coop_pcaCheckBeamOut(eActivator) == 0){
				return;
			}
			
			//make sure this triggers only once
			coop_pcSetBeamOutCapable(eActivator,0);
			eActivator.touchTriggers(0);
			
			//wait for actor to stop moving
			vector vVelocity;
			vVelocity = eActivator.getVelocity();
			while(doesEntityExist(eActivator) == 1 && vectorLength(vVelocity) > 2){
				globalCoop_main_waitAFrame();
			}
			if(doesEntityExist(eActivator)){
				//make actor stop first and turn off ai  before it gets removed or the waitFor(ent) function will get stuck
				eActivator.ai_on();
				coop_pcaSelectableRemove(eActivator);
				globalCoop_main_waitAFrame();
				eActivator.displayEffect("TransportOut","Federation");
				wait(1.4);
				if(doesEntityExist(eActivator)){
					eActivator.remove();
				}
			}
		}
	}
}

void coop_pcaHideTarget()
//------------------------------------------------------------------------------
//started by trigger - hides entity that is the trigger its target
//------------------------------------------------------------------------------
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){		
		entity eTarget;
		eTarget = eTrigger.getTargetEntity();
		if(doesEntityExist(eTarget)){
			eTarget.hide();
			float fTime;
			string sTime;
			//entity eActivator;
			//eActivator = eTrigger.getLastActivatingEntity();
			//if(doesEntityExist(eActivator)){}
			sTime = coop_pcaGetDataFor(eTrigger,"time");
			if(sTime != ""){
				fTime = getFloatFromString(sTime);
				wait(fTime);
				if(doesEntityExist(eTarget)){
					eTarget.show();
				}
			}
		}
		else{
			print("P.a.Click: coop_pcaHideTarget - Trigger("+eTrigger.getTargetName()+") has no target!\n");
			eTrigger.selfdetonate();
		}
	}
}

void coop_pcaShowTarget()
//------------------------------------------------------------------------------
//started by trigger - shows entity that is the trigger its target
//------------------------------------------------------------------------------
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		entity eTarget;
		eTarget = eTrigger.getTargetEntity();
		if(doesEntityExist(eTarget)){
			eTarget.show();
			float fTime;
			string sTime;
			//entity eActivator;
			//eActivator = eTrigger.getLastActivatingEntity();
			//if(doesEntityExist(eActivator)){}
			sTime = coop_pcaGetDataFor(eTrigger,"time");
			if(sTime != ""){
				fTime = getFloatFromString(sTime);
				wait(fTime);
				if(doesEntityExist(eTarget)){
					eTarget.hide();
				}
			}
		}
		else{
			print("P.a.Click: coop_pcaShowTarget - Trigger("+eTrigger.getTargetName()+") has no target!\n");
			eTrigger.selfdetonate();
		}
	}
}


void coop_pcaPickupItem()
//------------------------------------------------------------------------------
//started by trigger - makes actor pickup specified item
//------------------------------------------------------------------------------
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		entity eActivator;
		eActivator = eTrigger.getLastActivatingEntity();
		if(doesEntityExist(eActivator)){
			string sItem;
			
			entity eItem;
			eItem = eTrigger.getTargetEntity();
			if(doesEntityExist(eItem)){
				sItem = eItem.getModelName();
				if(eActivator.getSubclassName() == "Actor"){
					string sAnim;
					sAnim = coop_pcaGetAnimationFor(eActivator,"pickup");
					eActivator.animateonce(sAnim); //detpack_plant_duck
					coop_pcaActorWaitForAnimation(eActivator,sAnim,-0.05 );
//$player0.hudprint(sAnim+"\n");
					sAnim = coop_pcaGetAnimationFor(eActivator,"idle");
					eActivator.anim("sAnim"); //if it is not a actor, make sure we force idle afterwards
				}
				if(doesEntityExist(eItem)){eItem.remove();}
			}else{
				sItem = coop_pcaGetDataFor(eTrigger,"item");
			}
			//coop_pcaAddToInventory();
			//centerprint("Added to inventory: "+sItem+"\n");
		}
	}
}

string coop_pcaGetDataFor(entity eCurrent,string sData)
//------------------------------------------------------------------------------
//returns string data variable contens of given entity
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eCurrent)){
		float fVarNum;
		if(sData == "icon")						{fVarNum=10;}
		else if(sData == "iconheight")			{fVarNum=9;}
		else if(sData == "item")				{fVarNum=8;}
		else if(sData == "animation")			{fVarNum=7;}
		else if(sData == "time")				{fVarNum=6;}
		else if(sData == "action")				{fVarNum=5;}
		else if(sData == "descriptionGerman")	{fVarNum=2;}
		else if(sData == "descriptionEnglish")	{fVarNum=1;}
		else{
			print("P.a.Click: coop_pcaGetDataFor - invalid query: "+sData+"\n");
		}
		
		if(fVarNum < 1 || fVarNum > 10){
			print("P.a.Click: coop_pcaGetDataFor - out of range with: "+fVarNum+"\n");
			return "";
		}
		
		string sValue;
		string sUserVarName;
		sUserVarName = "uservar"+fVarNum;
		if(eCurrent.doesVarExist(sUserVarName)){
			sValue = eCurrent.getStringVar(sUserVarName);
		}else{
			sValue = "";
		}
		return ""+sValue;//needs to be done this way or it will return a empty string
	}
}

void coop_pcaNotInteractive(entity eInteractive)
//------------------------------------------------------------------------------
//disallow to be seleted
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eInteractive)){
		string sClass;
		sClass = eInteractive.getSubclassName(); 
		eInteractive.setFloatVar("_pointAndClick_interactive",0);
		if(sClass == "ScriptSlave"){
			eInteractive.notsolid();
		}
	}
}

void coop_pcaInteractive(entity eInteractive)
//------------------------------------------------------------------------------
//allow to be seleted
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eInteractive)){
		string sClass;
		sClass = eInteractive.getSubclassName(); 
		eInteractive.setFloatVar("_pointAndClick_interactive",1);
		if(sClass == "ScriptSlave"){
			eInteractive.contents( "targetable" );
		}
	}
}

float coop_pcaIsSelectable(entity eSelectable)
//------------------------------------------------------------------------------
//allow to be seleted
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eSelectable)){
		if(eSelectable.doesVarExist("_pointAndClick_selectable")){
			if(eSelectable.getFloatVar("_pointAndClick_selectable")){
				return 1;
			}
		}
	}
	return 0;
}

void coop_pcaSelectable(entity eSelectable)
//------------------------------------------------------------------------------
//allow to be seleted
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eSelectable)){
		//already setup - exit
		if(eSelectable.doesVarExist("_pointAndClick_selectable")){
			if(eSelectable.getFloatVar("_pointAndClick_selectable") == 1){
				return;
			}
		}
		
		eSelectable.setFloatVar("_pointAndClick_selectable",1);
		eSelectable.setFloatVar("_pointAndClick_inAnimation",0);
		eSelectable.updatebosshealth( 0,0); //disable bosshealth bars
		eSelectable.immortal(0); //allow to get killed
		eSelectable.flags("-notarget"); //be a target for other ai

		if(eSelectable.getSubclassName() != "Actor"){
			eSelectable.contents( "targetable" );
		}
		//tunoff actor ai on default
		else{
			coop_pcaSetStartHealth(eSelectable,eSelectable.getHealth());
			thread coop_pcaActorMonitor(eSelectable);
			eSelectable.ai_off();
			eSelectable.actorondamage("coop_pcaDamaged");
		}
	}
}

void coop_pcaSelectableRemove(entity eSelectable)
//------------------------------------------------------------------------------
//disallow to be seleted
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eSelectable)){
		//clear data also from player
		float fPlayer;
		entity ePlayer;
		ePlayer = coop_pcaActorReturnControllingPlayer(eSelectable);
		if(doesEntityExist(ePlayer)){
			float fActNum;
			fActNum = coop_pcaSelectedReturnEntityEntnum(ePlayer);
			if(fActNum == eSelectable.getEntNum()){
				ePlayer.widgetCmd("pacActiveSel","shader weapons/empty");
				ePlayer.setFloatVar("_pointAndClick_entitySelected",-1);
			}
		}
		
		//make unusable
		eSelectable.setFloatVar("_pointAndClick_selectable",0);
		eSelectable.setFloatVar("_pointAndClick_controlledByPlayer",-1);
		eSelectable.setFloatVar("_pointAndClick_entityLocked",0);
		eSelectable.clearcustomshader(selectionShader);
		eSelectable.renderEffects("-depthhack");		
	}
}

float coop_pcaIsInteractive(entity eCurrent)
//------------------------------------------------------------------------------
//checks if object is interactive
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eCurrent)){
		float fInteractive;
		if(eCurrent.doesVarExist("_pointAndClick_interactive")){
			fInteractive = eCurrent.getFloatVar("_pointAndClick_interactive");
			return fInteractive;
		}
		if(eCurrent.doesVarExist("_pointAndClick_selectable")){
			fInteractive = eCurrent.getFloatVar("_pointAndClick_selectable");
			if(fInteractive == 1){
				float f2;
				if(eCurrent.doesVarExist("_pointAndClick_entityLocked")){
					f2 = eCurrent.getFloatVar("_pointAndClick_entityLocked");
				}
				if(f2 == 0){
					return 1;
				}				
			}
		}
	}
	return 0;
}

float coop_pcaActorWalkto(entity eActor,vector vOrigin,string sAnim,entity eTarget)
//------------------------------------------------------------------------------
//make actor go to a place
//------------------------------------------------------------------------------
{
	vector vOffset;
	vector vCurrent;
	vOffset = vOrigin;
	vOffset_z = (vOffset_z + 30);
	
	entity eWalkto;
	//eWalkto = spawn("script_model","model","models/fx/fx-blueplasma.tik","notsolid","1");
	//eWalkto = spawn("script_model","model","sysimg/icons/mp/specialty_sniper.spr","notsolid","1");
//eWalkto = spawn("script_model","model","sysimg/icons/items/rune_armorpiercing.spr","scale","1","notsolid","1","origin",""+vOffset);
	eWalkto = spawn("script_model","model","sysimg/icons/items/powerup_speed.spr","scale","1","notsolid","1","origin",""+vOffset);
	globalCoop_main_waitAFrame();
	//eWalkto.rendereffects("+depthhack");
	//eWalkto.scale(1.5);
	//eWalkto.noshadow();
	//eWalkto.mass(0);
	//eWalkto.gravity(0);
	//eWalkto.forcealpha(1);
	//eWalkto.fade(0.05,0.5);
	//eWalkto.setSize('-4 -4 -70','4 4 0');
	//eWalkto.droptoFloor();
	//globalCoop_main_waitAFrame();
	
	vCurrent = eActor.getOrigin();
	
	//check if this entity has a pathnode that has the same targetname, we want to go to it instead.
	vector vPathnode;
	float fPathPathnode;
	vPathnode = getPathnodeOrigin(eTarget.getRawTargetName());
	if(vectorLength(vPathnode) > 0){
		fPathPathnode = 1;
		globalCoop_actor_walkTo(eActor,eTarget.getRawTargetName(),sAnim);
	}else{
		fPathPathnode = 0;
		globalCoop_actor_walkToVector(eActor,vOrigin,sAnim);
	}
	
	if(doesEntityExist(eActor)){
		//$player0.hudprint("target ent:"+eTarget.getTargetName()+"\n");
		
/*entity eTraget;
eTraget = eCurrent.getTargetEntity();
if(doesEntityExist(eTraget)){
vTarget = eTraget.getOrigin();
}*/

		//make sure it is always deleted for sure
		if(doesEntityExist(eWalkto)){
			eWalkto.remove();
		}
	
		//if walked distance is very short, assume player wants them to turn
		if(doesEntityExist(eWalkto) == 1 && fPathPathnode != 1){
			if(vectorLength( (vCurrent - eActor.getOrigin()) ) < 30 || eTarget.getSubclassName() != "World"){
				//turn towards beakon if player clicked on world
				if(eTarget.getSubclassName() == "World"){
					eActor.turntowardsEntity(eWalkto);
//$player0.hudprint("world\n");
				}
				//turn towards a object player clicked on
				else{
					eActor.turntowardsEntity(eTarget);
//$player0.hudprint("target:"+eTarget.getTargetName()+"\n");
				}
				wait(0.5);
			}
		}
		
		//play animation if a action is set
		if(doesEntityExist(eTarget)){
			if(doesEntityExist(eActor) == 1 && eActor.getHealth() > 0){
				if(eTarget.getSubclassName() == "Actor"){
					if(eTarget.getHealth() > 0 && coop_pcaHasAbility(eActor,"heal") == 1){
						vector vTarget;
						vector vDoctor;
						vTarget = eTarget.getOrigin();
						vDoctor = eActor.getOrigin();
						if(vectorLength(vTarget - vDoctor) < 150){
							string sAnim;
							sAnim	= coop_pcaGetAnimationFor(eActor,"heal");
							if(sAnim != ""){
								//play dialog
								string sDialog;
								sDialog = coop_pcaGetDialogHeal(eActor);
								if(sDialog != ""){
									coop_pcaDialogPlay(eActor,sDialog);
								}
								
								//play animation and heal
								eActor.anim(sAnim);
								coop_pcaActorWaitForAnimation(eActor,sAnim,0.05 );
								if(eTarget.getHealth() > 0){
									float fOldHealth;
									fOldHealth = eTarget.getHealth();
									float fNewHealth;
									fNewHealth = coop_pcaGetStartHealth(eTarget);
									eTarget.health(fNewHealth);
									//string sTargetname;
									//sTargetname = $eTarget.getTargetName();
									//$player0.hudprint("healed "+sTargetname+" "+fOldHealth+" "+fNewHealth+" \n");
								}
							}
						}else{
							$player0.hudprint("Out of healing range\n");
						}
					}
				}else{
					string sAction;
					sAction = coop_pcaGetDataFor(eTarget,"action");
					if(sAction != ""){
						string sAnim;
						sAnim	= coop_pcaGetAnimationFor(eActor,sAction);
						eActor.anim(sAnim);
						coop_pcaActorWaitForAnimation(eActor,sAnim,0.05 );
						
						if(doesEntityExist(eTarget)){
							//try to use what ever the current target is targeting
							if(doesEntityExist(eActor) == 1){
								if(eActor.getHealth() > 0){
									entity ePlayer;
									ePlayer = coop_pcaActorReturnControllingPlayer(eActor);
									if(doesEntityExist(ePlayer)){
										entity eTargetOfTarget;
										eTargetOfTarget = eTarget.getTargetEntity();
										if(doesEntityExist(eTargetOfTarget)){
											ePlayer.useentity(eTargetOfTarget);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		//make sure ai is always turned back on afterwards
		if(doesEntityExist(eActor)){
			eActor.ai_on();
		}
	}
	//make sure it is always deleted for sure
	if(doesEntityExist(eWalkto)){
		eWalkto.remove();
	}	
}

float coop_pcaActorGoTo(entity ePlayer,entity eCurrent)
//------------------------------------------------------------------------------
//make actor go to a place
//------------------------------------------------------------------------------
{
	if(doesEntityExist(ePlayer)){
		entity eActor;
		eActor = coop_pcaSelectedReturnEntity(ePlayer);
		
		if(	doesEntityExist(eActor) != 1 ||
			eActor.getHealth() <= 0 ||
			eActor.getSubclassName() != "Actor" ||
			eActor.getFloatVar("_pointAndClick_inAnimation") == 1
		){
			return 0;
		}
		//as soon as the actor is issued a move command it will become a valid target
		coop_pcaSetValidTarget(eActor,1);
		
		string sAnim;
		sAnim = coop_pcaGetAnimationFor(eActor,"walk");
		
		if(doesEntityExist(eCurrent) == 0 || eCurrent.getSubclassName() == "World" || coop_pcaIsInteractive(eCurrent) != 1){
			thread coop_pcaActorWalkto(eActor,ePlayer.getViewtraceEndpos(),sAnim,$world);
		}else{
			//check if there is a pathnode with the same name, if so grab that location
			vector vLocation;
			vLocation = getPathnodeOrigin(eCurrent.getRawTargetName());
			//no pathnode, origin from object player is pointing on
			if(vLocation == '0 0 0'){
				eCurrent.getOrigin();
			}
			thread coop_pcaActorWalkto(eActor,vLocation,sAnim,eCurrent);
			
		}
		return 1;
	}
}

void coop_pcaMissionFailure(string sReason)
//------------------------------------------------------------------------------
//runs mission failure
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_failWithReason(sReason);
}

void coop_pcaFailOnDeath(entity eCurrent,float fFail,string sReason)
//------------------------------------------------------------------------------
//returns size for icon for entity
//------------------------------------------------------------------------------
{
	thread coop_pcaFailOnDeathLoop(eCurrent,fFail,sReason);
}

void coop_pcaFailOnDeathLoop(entity eCurrent,float fFail,string sReason)
//------------------------------------------------------------------------------
//returns size for icon for entity
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eCurrent)){
		if(fFail == 0){
			eCurrent.setFloatVar("_pointAndClick_failOnDeath",0);
		}else{
			if(eCurrent.doesVarExist("_pointAndClick_failOnDeath")){
				if(eCurrent.getFloatVar("_pointAndClick_failOnDeath") == 1){
					return;
				}
			}
			eCurrent.setFloatVar("_pointAndClick_failOnDeath",1);
		}
		
		if(sReason == ""){
			"You lost crucial unit: "+eCurrent.getRawTargetName();
		}
		
		while(doesEntityExist(eCurrent)){
			if(eCurrent.getFloatVar("_pointAndClick_failOnDeath") == 0){
				return;
			}

			if( eCurrent.getHealth() <= 0){
				coop_pcaMissionFailure(sReason+"\n");
				return;
			}
			wait(2);
		}	
	}
}

void coop_pcaSetValidTarget(entity eCurrent,float fValid)
//------------------------------------------------------------------------------
//makes enemies ignore or attack this as a valid target
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eCurrent)){
		eCurrent.setValidTarget(fValid);
	}
}

string coop_pcaGetIconSize(entity eCurrent)
//------------------------------------------------------------------------------
//returns size for icon for entity
//------------------------------------------------------------------------------
{
	float fHeight = 82;
	string sIconSize;
	if(doesEntityExist(eCurrent)){
		sIconSize = coop_pcaGetDataFor(eCurrent,"iconheight");
	}
	//clear shader
	if(sIconSize == ""){
		sIconSize = "105 7 82 "+fHeight;
	}else{
		fHeight = fHeight * getFloatFromString(sIconSize);
		sIconSize = "105 7 82 "+fHeight;
	}
	return ""+sIconSize; //needs to be done this way or it will return a empty string	
}

string coop_pcaGetIcon(entity eCurrent)
//------------------------------------------------------------------------------
//returns icon for entity
//------------------------------------------------------------------------------
{
	string sIcon;
	if(doesEntityExist(eCurrent)){
		sIcon = coop_pcaGetDataFor(eCurrent,"icon");
	}
	
	//clear shader
	if(sIcon == ""){
		sIcon = "weapons/empty";
	}
	
	return ""+sIcon; //needs to be done this way or it will return a empty string
}

float coop_pcaSelectedMarker(entity ePlayer,entity eSelected)
//------------------------------------------------------------------------------
//marks as selected
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eSelected) == 1){
		coop_pcaSelectedMarkerClear(ePlayer,eSelected);
		//if it has a actual model we can applay the shader
		if(getIntStringFind(eSelected.getModelName(),".tik")){
			float f1,f2;
			f1=coop_pcaSelectedReturnEntityEntnum(ePlayer);
			f2=eSelected.getEntNum();
			if(f1 != f2){
				//ePlayer.hudprint("sel:"+eSelected.getTargetName()+" ( "+f1+" ) ( "+f2+" ) \n");
				eSelected.renderEffects("+depthhack");
				eSelected.setcustomshader(selectionShader);
				eSelected.setFloatVar("_pointAndClick_entityLocked",1);
				eSelected.setFloatVar("_pointAndClick_controlledByPlayer",ePlayer.getEntNum());
				ePlayer.widgetCmd("pacActiveSel","shader "+coop_pcaGetIcon(eSelected));
				ePlayer.widgetCmd("pacActiveSelDescr","labeltext "+eSelected.getStringVar("uservar1"));
				return 1;
			}else{
				//ePlayer.hudprint("unsel:"+eSelected.getTargetName()+" ( "+f1+" ) ( "+f2+" ) \n");
				ePlayer.widgetCmd("pacActiveSel","shader weapons/empty");
				coop_pcaSelectedMarkerClear(ePlayer,eSelected);
				ePlayer.setFloatVar("_pointAndClick_entitySelected",-1);
				eSelected.setFloatVar("_pointAndClick_controlledByPlayer",-1);
				return 0;
			}
		}
	}
	return 0;
}

void coop_pcaSelectedMarkerClear(entity ePlayer,entity eSelected)
//------------------------------------------------------------------------------
//unmarks selected
//------------------------------------------------------------------------------
{
	if(doesEntityExist(ePlayer)){
		float lastSelEntNum;
		entity eLastSel;
		lastSelEntNum = coop_pcaSelectedReturnEntityEntnum(ePlayer);
		if(lastSelEntNum > -1){//make sure we don't grab bad last entity
			//if(lastSelEntNum != eSelected.getEntNum()){
				eLastSel = getEntity("*"+lastSelEntNum);
				if(doesEntityExist(eLastSel)){
					//ePlayer.hudprint("clear:"+eLastSel.getTargetName()+"\n");
					eLastSel.clearcustomshader(selectionShader);
					eLastSel.setFloatVar("_pointAndClick_entityLocked",0);
					eLastSel.renderEffects("-depthhack");
				}
			//}
		}
	}	
}

float coop_pcaCheckEntityLocked(entity eCurrent)
//------------------------------------------------------------------------------
//checks if the entity is locked
//------------------------------------------------------------------------------
{
	float fVar;
	if(eCurrent.doesVarExist("_pointAndClick_entityLocked")){
		fVar = eCurrent.getFloatVar("_pointAndClick_entityLocked");
	}else{
		fVar = 0;
	}
	return fVar;
}

entity coop_pcaActorReturnControllingPlayer(entity eActor)
//------------------------------------------------------------------------------
//returns player currently controlling this actor
//------------------------------------------------------------------------------
{
	entity ePlayer;
	if(doesEntityExist(eActor)){
		float fPlayerNum;
		fPlayerNum = coop_pcaActorControlledByPlayerEntnum(eActor);
		if(fPlayerNum > -1){
			ePlayer = getEntity("*"+fPlayerNum);
		}
	}
	return ePlayer;
}

float coop_pcaActorControlledByPlayerEntnum(entity eActor)
//------------------------------------------------------------------------------
//returns entity number of player this actor is controlled by
//------------------------------------------------------------------------------
{
	if(eActor.doesVarExist("_pointAndClick_controlledByPlayer")){
		float fSelected;
		float fPlayer;
		fPlayer = eActor.getFloatVar("_pointAndClick_controlledByPlayer");
		entity ePlayer;
		if(fPlayer > -1){
			ePlayer = getEntity("*"+fPlayer);
			//make sure player is valid, player does still have this actor selected
			if(doesEntityExist(ePlayer)){
				fSelected = coop_pcaSelectedReturnEntityEntnum(ePlayer);
				if(ePlayer.getHealth() > 0 && ePlayer.isSpectator() != 1 && fSelected == eActor.getEntNum()){
					return fPlayer;
				}
			}
		}
		eActor.setFloatVar("_pointAndClick_controlledByPlayer",-1);
	}
	return -1;
}

entity coop_pcaSelectedReturnEntity(entity ePlayer)
//------------------------------------------------------------------------------
//returns entity of selected actor
//------------------------------------------------------------------------------
{
	entity eSelected;
	float entnum;
	entnum = coop_pcaSelectedReturnEntityEntnum(ePlayer);
	if(entnum > -1){
		eSelected = getEntity("*"+entnum);
		if(doesEntityExist(eSelected)){
			return eSelected;
		}
	}
	return eSelected;
}

float coop_pcaSelectedReturnEntityEntnum(entity ePlayer)
//------------------------------------------------------------------------------
//returns entity number of selected actor
//------------------------------------------------------------------------------
{
	float fVar;
	if(ePlayer.doesVarExist("_pointAndClick_entitySelected")){
		fVar = ePlayer.getFloatVar("_pointAndClick_entitySelected");
	}
	else{
		fVar = -1;
	}
	return fVar;
}

string coop_pcaHandleGetDescr(entity ePlayer,entity eCurrent)
//------------------------------------------------------------------------------
//return description of entity
//------------------------------------------------------------------------------
{
	string sPrintInfo;
	sPrintInfo = "";
	string sGermanDescr;
	string sEnglishDescr;
	if(eCurrent.doesVarExist("uservar2")){
		sGermanDescr = eCurrent.getStringVar("uservar2");
	}
	if(eCurrent.doesVarExist("uservar1")){
		sGermanDescr = eCurrent.getStringVar("uservar2");
	}
	
	if(sGermanDescr != "" && ePlayer.hasLanguageGerman() == 1){
		sPrintInfo = sGermanDescr;
	}else{
		sPrintInfo = sGermanDescr;
	}
	return ""+sPrintInfo; //needs to be done this way or it will return a empty string
}

void coop_pcaHandleSelect(entity ePlayer,entity eCurrent)
//------------------------------------------------------------------------------
//handle ui for when player is hovering and then selecting(fire) on something
//------------------------------------------------------------------------------
{
	if(coop_pcaIsSelectable(eCurrent) == 1){
		if(doesEntityExist(eCurrent)){
			//if it is actually marked
			if(coop_pcaSelectedMarker(ePlayer,eCurrent)){
				if(eCurrent.getSubclassName() == "Actor"){
					string sDialog;
					sDialog = coop_pcaGetDialogSelect(eCurrent);
					if(sDialog != ""){
						thread coop_pcaDialogPlay(eCurrent,sDialog);
					}
				}
				ePlayer.setFloatVar("_pointAndClick_entitySelected",eCurrent.getEntNum());
			}
		}
	}
}

void coop_pcaHandleHover(entity ePlayer,entity eCurrent,entity eMarker)
//------------------------------------------------------------------------------
//handle ui for when player is hovering/targeting on something
//------------------------------------------------------------------------------
{
	//float entnum;
	//entnum = eCurrent.getEntNum();
	//ePlayer.setFloatVar("_pointAndClick_entityHover",entnum);
	ePlayer.widgetCmd("pacActiveHov","shader "+coop_pcaGetIcon(eCurrent));
	//ePlayer.widgetCmd("pacActiveHov","rect "+coop_pcaGetIconSize(eCurrent));
		
	//place on top of current entity bbox
	if(doesEntityExist(eCurrent) == 1 && doesEntityExist(eMarker) == 1){
		if(eCurrent.getSubclassName() != "World" && coop_pcaIsInteractive(eCurrent) == 1){
			vector vOrigin,vMax;
			vMax	= eCurrent.getMaxs();
			vOrigin = eCurrent.getOrigin();
			vOrigin_z += (vMax_z + 50);
			eMarker.warp(vOrigin);
			
			if(coop_pcaCheckEntityLocked(eCurrent) == 0 || eCurrent.getEntNum() == ePlayer.getFloatVar("_pointAndClick_entitySelected")){
				//has a target (usually a trigger)
				if(eCurrent.getTargetEntity()){
					eMarker.model("sysimg/icons/items/powerup_strength.spr");
				}else{
					eMarker.model("sysimg/icons/mp/team_blue.spr");
				}
				eMarker.show();
			}
		}else{
			eMarker.hide();
		}
	}
	
	//ePlayer.hudprint("new entity: "+eCurrent.getRawTargetname()+" "+sCurrentClass+" ("+entnum+") @["+eCurrent.getOrigin()+"]\n");
}

void coop_pcaActivateUnit(entity eUnit)
//------------------------------------------------------------------------------
//activates unit if not currenly in use by player
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eUnit)){
		float fActivate;
		fActivate=0;
		if(coop_pcaIsSelectable(eUnit) == 1){
			fActivate = 1;
			if(coop_pcaCheckEntityLocked(eUnit) == 1){
				fActivate = 0;
			}
		}
		
		//activate ai and allow to be attacked
		if(fActivate == 1){
			eUnit.ai_on();
			coop_pcaSetValidTarget(eUnit,1);				
		}
	}
}

void coop_pcaDamaged()
//------------------------------------------------------------------------------
//executed when actor takes damage - used to turn on ai if it is being attacked
//------------------------------------------------------------------------------
{
	entity eActivator;
	eActivator = getCurrentEntity();
	if(doesEntityExist(eActivator)){
		if(eActivator.getSubclassName() == "Actor"){
			eActivator.actorondamage("");
			//globalCoop_main_waitAFrame();
			coop_pcaActivateUnit(eActivator);
			
			wait(2);
			eActivator.actorondamage("coop_pcaDamaged");	
		}
	}
}

void coop_pcaJustLeft(entity ePlayer)
//------------------------------------------------------------------------------
//manage huds and other stuff
//------------------------------------------------------------------------------
{
	if(doesEntityExist(ePlayer)){
		SendClientCommand(ePlayer,"ui_addhud coop_radar");
		SendClientCommand(ePlayer,"ui_addhud coop_class");
		ePlayer.widgetCmd("pacActiveHovDescr","labeltext ~");
		ePlayer.widgetCmd("pacActiveSel","shader weapons/empty");
		ePlayer.widgetCmd("pacActiveHov","shader weapons/empty");
		ePlayer.removehud("coop_pacActive");
		ePlayer.setFloatVar("_pointAndClick_selectorRunning",0);
		entity eActor;
		eActor = coop_pcaSelectedReturnEntity(ePlayer);
		if(doesEntityExist(eActor)){
			coop_pcaSelectedMarkerClear(ePlayer,eActor);
			if(coop_pcaActorControlledByPlayerEntnum(eActor) == ePlayer.getEntNum()){
				eActor.setFloatVar("_pointAndClick_controlledByPlayer",-1);
			}
		}
		ePlayer.setFloatVar("_pointAndClick_entitySelected",-1);
	}
}

void coop_pcaJustEntered(entity ePlayer)
//------------------------------------------------------------------------------
//manage huds and other stuff
//------------------------------------------------------------------------------
{
	if(doesEntityExist(ePlayer)){
		ePlayer.widgetCmd("pacActiveHovDescr","labeltext ~");
		ePlayer.widgetCmd("pacActiveSel","shader weapons/empty");
		ePlayer.flags("+notarget");
		thread coop_pcaSelectionManager(ePlayer);
		wait(0.25);
		if(doesEntityExist(ePlayer)){
			ePlayer.addhud("coop_pacActive");
			SendClientCommand(ePlayer,"ui_removehud coop_radar");
			SendClientCommand(ePlayer,"ui_removehud coop_class");	
		}
	}
}