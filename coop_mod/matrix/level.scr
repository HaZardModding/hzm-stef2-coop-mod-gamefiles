//-----------------------------------------------------------------------------------
// Script By:	Christian Sebastian Strahl (Chrissstrahl)
// Created on:	2007.09.29
// E-Mail:		chrissstrahl@yahoo.de
//-----------------------------------------------------------------------------------
// CONTAININS LEVEL INTERACTION RUTINES USED BY THE CO-OP MOD
//-----------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////Functions
////////////////////////////////////////////////////////////////////////////////

void globalCoop_level_waitForDoorToClose(entity eDoor,float fLock)
//----------------------------------------------------------------------
// wait for door to close, optionally lock
//----------------------------------------------------------------------
{
	if(doesEntityExist(eDoor)){
		//open=1,opening=2,closing=3,closed=4
		float iLastState,iCurState,iTimeOut;
		
		if(fLock){
			eDoor.lock();
		}
		eDoor.close();
		while(doesEntityExist(eDoor) == 1 && iCurState != 4){
			globalCoop_main_waitAFrame();
			if(iLastState == iCurState){
				iTimeOut++;
				if(iTimeOut == (2 * getCvarInt("sv_fps")) ){ //wait 2 sec
					eDoor.close();
					iTimeOut=0;
				}
			}
			iLastState = iCurState;
			iCurState = eDoor.getDoorState();
		}
	}
}

void globalCoop_level_onTouch(entity eOnTouch,string sThread)
//----------------------------------------------------------------------
// Set thread to start if this entity gets damaged
//----------------------------------------------------------------------
{
//CHECK IF ENTITY EXISTS, DO NOTHING IF NOT
	if(doesEntityExist(eOnTouch)){
		eOnTouch.noTouch();
		globalCoop_main_waitAFrame();
		eOnTouch.onTouch(sThread);
		pause();
	}
}


void globalCoop_level_onUse(entity eOnUse,string sThread)
//----------------------------------------------------------------------
// Set thread to start if this entity gets used
//----------------------------------------------------------------------
{
//CHECK IF ENTITY EXISTS, DO NOTHING IF NOT
	if(doesEntityExist(eOnUse)){
		eOnUse.noUse();
		globalCoop_main_waitAFrame();
		eOnUse.onUse(sThread);
		pause();
	}
}


void globalCoop_level_onDamage(entity eOnDamage,string sThread)
//----------------------------------------------------------------------
// Set thread to start if this entity gets damaged
//----------------------------------------------------------------------
{
//CHECK IF ENTITY EXISTS, DO NOTHING IF NOT
	if(doesEntityExist(eOnDamage)){
		eOnDamage.nodamage();
		globalCoop_main_waitAFrame();
		eOnDamage.onDamage(sThread);
		pause();
	}
}

void globalCoop_level_onBlock(entity eOnBlock,string sThread)
//----------------------------------------------------------------------
// Set thread to start if this entity gets blocked while moving
//----------------------------------------------------------------------
{
//CHECK IF ENTITY EXISTS, DO NOTHING IF NOT
	if(doesEntityExist(eOnBlock)){
		eOnBlock.noBlock();
		globalCoop_main_waitAFrame();
		eOnBlock.onBlock(sThread);
		pause();
	}
}


void globalCoop_level_triggerEntity(entity eToTrigger)
//----------------------------------------------------------------------
// Triggers a entity, replacement function avoids game crash
//----------------------------------------------------------------------
{
//Check if entity exsits, if so trigger it
	if(doesEntityExist(eToTrigger)){
		triggerentity(eToTrigger);
	}
}


void globalCoop_level_triggerable(entity eMakeTriggerable)
//----------------------------------------------------------------------
// Makes a entity triggerable if it exist
//----------------------------------------------------------------------
{
//Check if entity exsits, if so make it trigger able
	if(doesEntityExist(eMakeTriggerable)){
		eMakeTriggerable.triggerable();
	}
}


void globalCoop_level_notTriggerable(entity eMakeNotTriggerable)
//----------------------------------------------------------------------
// Makes a entity triggerable if it exist
//----------------------------------------------------------------------
{
//Check if entity exsits, if so make it trigger able
	if(doesEntityExist(eMakeNotTriggerable))
	{
		eMakeNotTriggerable.notTriggerable();
	}
}


void globalCoop_level_remove(entity eToRemove)
//----------------------------------------------------------------------
// Removes a entity if it exists, avoids game chrash
//----------------------------------------------------------------------
{
//Check if entity exsits, if remove it
	if(doesEntityExist(eToRemove)){
		if(eToRemove.getRawTargetname() != "world"){
			eToRemove.remove();
		}
	}
}

void globalCoop_level_removePath(entity ePath)
//----------------------------------------------------------------------
// Removes Paths, reduces entity count creating TRAFFIC in multiplayer!!!
//----------------------------------------------------------------------
{
	entity eRemove;
	while(doesEntityExist(ePath)){
		eRemove = ePath;
		ePath = ePath.gettargetentity();
		globalCoop_main_waitAFrame();
		globalCoop_level_remove(eRemove);
	}
}


void globalCoop_level_hideAndNotSolid(entity eHideAndMakeNotsolid)
//----------------------------------------------------------------------
// makes a entity notsolid and hides it if exists, saves statments
//----------------------------------------------------------------------
{
	if(doesEntityExist(eHideAndMakeNotsolid))
	{
		eHideAndMakeNotsolid.hide();
		eHideAndMakeNotsolid.notSolid();
	}
}


void globalCoop_level_showAndSolid(entity eShowAndMakeSolid)
//----------------------------------------------------------------------
// makes a entity solid and shows it if exists, replacement function for multiplayer use!!!
//----------------------------------------------------------------------
{
	if(doesEntityExist(eShowAndMakeSolid))
	{
		eShowAndMakeSolid.show();
		eShowAndMakeSolid.solid();
	}
}


void globalCoop_level_hide(entity eHide)
//----------------------------------------------------------------------
// hides entity it if exists, replacement function for multiplayer use!!!
//----------------------------------------------------------------------
{
	if(doesEntityExist(eHide))
	{
		eHide.hide();
	}
}


void globalCoop_level_show(entity eShow)
//----------------------------------------------------------------------
// shows entity it if exists, replacement function for multiplayer use!!!
//----------------------------------------------------------------------
{
	if(doesEntityExist(eShow))
	{
		eShow.show();
	}
}

void globalCoop_level_callReliably(string sTreadName)
//----------------------------------------------------------------------
//Calls a thread from a trigger...
//This does not crash the game if that thread does not exist
//----------------------------------------------------------------------
{//testthread("",sTreadName); does not work proper on includes!!!!!!!!!!!
	//globalCoop_main_printTimeAndString("globalCoop_level_callReliably("+sTreadName+")");
	
	entity eTrigger;
	eTrigger = spawn("trigger_relay","thread",sTreadName);
	globalCoop_main_waitAFrame();
	//[b611] chrissstrahl - have trigger auto remove after that
	eTrigger.cnt(1);
	globalCoop_level_triggerEntity( eTrigger );
}

float globalCoop_level_getFloatVar(entity eEntity,string sVaraiableName)
//----------------------------------------------------------------------
// get the var with the given name of the entity
//----------------------------------------------------------------------
{
	if(doesEntityExist(eEntity))
	{
		if(eEntity.doesVarExist(sVaraiableName)){
			return (eEntity.getFloatVar(sVaraiableName)) ;
		}else{ //[b60021] Chrissstrahl - fixed returning -1 even tho entity exists, it should return 0 then
			return 0;
		}
	}
	return -1;
}


void globalCoop_level_setFloatVar(entity eEntity,string sVaraiableName,float fVarValue)
//----------------------------------------------------------------------
// set the var with the given name on the entity
//----------------------------------------------------------------------
{
	if(doesEntityExist(eEntity))
	{
		eEntity.setFloatVar(sVaraiableName,fVarValue);
	}
}


string globalCoop_level_getStringVar(entity eEntity,string sVaraiableName)
//----------------------------------------------------------------------
// set the var with the given name on the entity
//----------------------------------------------------------------------
{
	if(doesEntityExist(eEntity))
	{
		if(eEntity.doesVarExist(sVaraiableName)){
			return "" + (eEntity.getStringVar(sVaraiableName)); //[b60021] Chrissstrahl - fixed missing return string bugfix: return ""+
		}
	}
	return "";
}


void globalCoop_level_setStringVar(entity eEntity,string sVaraiableName,string sValueToSet)
//----------------------------------------------------------------------
// set the var with the given name on the entity
//----------------------------------------------------------------------
{
	if(doesEntityExist(eEntity))
	{
		eEntity.setStringVar(sVaraiableName,sValueToSet);
	}
}


void globalCoop_level_endProcedur()
//----------------------------------------------------------------------
// Does the level end rutine
//----------------------------------------------------------------------
{
	globalCoop_main_globalCommand("nodamage");
	thread globalCoop_player_imobilizeAll(1);
	level_ai(0);
}


void globalCoop_level_triggerLevelChange()
//----------------------------------------------------------------------
// triggers the level end trigger
//----------------------------------------------------------------------
{
	entity eTrigger;
	//[b607] chrissstrahl - changed from gamemap to just map (this works)
	eTrigger = spawn("trigger_changelevel","map",cvar_string_mapname);
	globalCoop_main_waitAFrame();
	thread globalCoop_level_triggerEntity(eTrigger);
}


void globalCoop_level_warpDroptofloor(entity eWarpDrop,vector vWarpTo)
//----------------------------------------------------------------------
// Warp entity to a location and droop it to the floor
//----------------------------------------------------------------------
{
	if(doesEntityExist(eWarpDrop))
	{
		eWarpDrop.warp(vWarpTo);
		eWarpDrop.dropToFloor();
	}
}
void globalCoop_level_moveToPos(entity eMove,vector vMoveTo)
//----------------------------------------------------------------------
// Move Entity to a specified location
//----------------------------------------------------------------------
{
	if(doesEntityExist(eMove))
	{
		eMove.time(.05);
		eMove.moveToPos(vMoveTo);
	}
}


void globalCoop_level_warpEntityToVectorSafty(entity eWarpMe,vector vOrigin)
//----------------------------------------------------------------------
// Warp given entity to the given location
//----------------------------------------------------------------------
{
//EXIT: WHEN PASSED ENTITY DOES NOT EXISTS
	if(doesEntityExist(eWarpMe))
	{
	//DON'T PLAY WITH THE WORLD! -> should tell this industry and politicans
		string sEntityTargetname;
		sEntityTargetname = eWarpMe.getRawTargetName();
		if(sEntityTargetname == "world")
		{
			return;
		}
	//RELOCATE
		eWarpMe.warp(vOrigin);
		thread globalCoop_player_makeSolidASAP(eWarpMe);
	}
}

void globalCoop_level_blocker(string sTargetname, vector vSize, vector vOrigin)
//----------------------------------------------------------------------
// adds a invisible wall to the level, blocking players, prevents them to get where they should not go
//----------------------------------------------------------------------
{
	//make sure the model touches the ground
	vOrigin_z -= 85;
	
	//make sure it is not to small
	if(vOrigin_x < 16 && vOrigin_x > -16)
	{
		if(vOrigin_x < 1){
			vOrigin_x = -16;
		}else{
			vOrigin_x = 16;
		}
	}
	if(vOrigin_y < 16 && vOrigin_y > -16)
	{
		if(vOrigin_y < 1){
			vOrigin_y = -16;
		}else{
			vOrigin_y = 16;
		}
	}

	entity eInvisibleWall;
	eInvisibleWall = spawn( "script_model","model","fx/fx_dummy.tik","targetname",sTargetname,"origin",""+vOrigin );
	globalCoop_main_waitAFrame();
	
	//set the new size
	vector vSizeMaxs;
	vector vSizeMins;
	vSizeMaxs_x = (vectorGetX(vSize) / 2);
	vSizeMaxs_y = (vectorGetY(vSize) / 2);
	vSizeMaxs_z = vectorGetZ(vSize);
	
	vSizeMins_x = (vSizeMaxs_x - vSize_x); //xSize minus xSize*2 = negative equivalent of vSize/2
	vSizeMins_y = (vSizeMaxs_y - vSize_y); //xSize minus xSize*2 = negative equivalent of vSize/2
	vSizeMins_z = -1;
	
	eInvisibleWall.setSize(vSizeMins,vSizeMaxs);
}

void globalCoop_level_gatheringAreaPlayerHandleHud(entity ePlayer, entity eTrigger,float fPlayersInside,float fPlayerExisting,float fPercentage,float fTime)
{
	if( !doesEntityExist(ePlayer) )//needs to be a seperate check or it fails
		return;
	if( !doesEntityExist(eTrigger) )//needs to be a seperate check or it fails
		return;
	
	float fPlayerNeeded = 1;
	if(fPlayerExisting == 2){
		fPlayerNeeded = 2;
	}
	else{
		fPlayerNeeded = ceil((fPlayerExisting / 100) * fPercentage);
	}
	
	string s;
	s= eTrigger.getStringVar("globalCoop_level_areaThread");
		
	if(s == "coop_endLevel"){
		globalCoop_player_transmittInstantly(ePlayer,"globalwidgetcommand coop_exit0 title "+fPlayersInside+
		";globalwidgetcommand coop_exit1 title "+fPlayerNeeded+";globalwidgetcommand coop_exit2 title "+fTime+"\n");
	}
	else{
		globalCoop_player_transmittInstantly(ePlayer,"globalwidgetcommand coop_gather0 title "+fPlayersInside+
		";globalwidgetcommand coop_gather1 title "+fPlayerNeeded+";globalwidgetcommand coop_gather2 title "+fTime+"\n");
	}
		
	if(ePlayer.getFloatVar("gatheringAreaActive"+s) == 1)
		return;
		
	ePlayer.setFloatVar("gatheringAreaActive"+s,1);
	
	if(s == "coop_endLevel")
		globalCoop_huds_Add(ePlayer,"coop_exit");
	else
		globalCoop_huds_Add(ePlayer,"coop_gather");
		
	float fHandle=1;
	while(fHandle)
	{
		globalCoop_main_waitAFrame();
		
		if(!doesEntityExist(ePlayer))
			return;
		//[b60025] chrissstrahl - Fixed: Bad Health Check
		if(ePlayer.getHealth() <= 0 || globalCoop_check_playerSpectator(ePlayer) == 1)
			fHandle = 0;
		if(!doesEntityExist(eTrigger))//needs to be a seperate check or it fails
			fHandle = 0;
		if( eTrigger.getFloatVar("globalCoop_level_areaLastActivation") + 1 < getLevelTime() )
			fHandle = 0;
	}
	
	if(s == "coop_endLevel")
		globalCoop_huds_Remove(ePlayer,"coop_exit");
	else
		globalCoop_huds_Remove(ePlayer,"coop_gather");
		
	ePlayer.setFloatVar("gatheringAreaActive"+s,0);
}

void globalCoop_level_gatheringArea(string sTargetname,string sThread,float fPercentage,vector vSize,vector vOrigin)
//----------------------------------------------------------------------
// adds a player gathering area into the level
//----------------------------------------------------------------------
{
	if(doesEntityExist(getEntity(sTargetname))){
		globalCoop_main_print("ERROR: globalCoop_level_gatheringArea named '"+sTargetname+"' already exist!\n");
		return;
	}
	entity eLevelEndTrigger;
	eLevelEndTrigger = spawn( "trigger_multiple","targetname",sTargetname,"origin",""+vOrigin );
	globalCoop_main_waitAFrame();
	
	//set the new size
	vector vSizeMaxs;
	vector vSizeMins;
	vSizeMaxs_x = vectorGetX(vSize);
	vSizeMaxs_y = vectorGetY(vSize);
	vSizeMaxs_z = vectorGetZ(vSize);
	
	vSizeMins_x = (vSizeMaxs_x - (vSizeMaxs_x * 2)); //xSize minus xSize*2 = negative equivalent of vSize/2
	vSizeMins_y = (vSizeMaxs_y - (vSizeMaxs_y * 2)); //xSize minus xSize*2 = negative equivalent of vSize/2
	vSizeMins_z = -85;
	
	eLevelEndTrigger.thread("globalCoop_level_gatheringAreaActivated");
	eLevelEndTrigger.setSize(vSizeMins,vSizeMaxs);
	eLevelEndTrigger.wait(1);
	
	if(fPercentage > 100){fPercentage = 100;}
	eLevelEndTrigger.setFloatVar("globalCoop_level_areaPercentage",fPercentage);
	eLevelEndTrigger.setStringVar("globalCoop_level_areaThread",sThread);
}


void globalCoop_level_gatheringAreaActivated()
//----------------------------------------------------------------------
// adds a player gathering araea into the level
//----------------------------------------------------------------------
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(!doesEntityExist(eTrigger)){
		globalCoop_main_print("Coop Mod - globalCoop_level_gatheringAreaActivated()");
		globalCoop_main_print("ERROR: Trigger does no longer exist, wrong trigger type");
		globalCoop_main_print("Trigger needs to stay, so that it can be triggred multiple times!");
		return;
	}
	
	//remember when last activated
	eTrigger.setFloatVar("globalCoop_level_areaLastActivation",getLevelTime());
	
	//[b60011] chrissstrahl - make sure the trigger has the right timming
	eTrigger.wait(1);
		
//SINGLEPLAYER
		if(!cvar_bool_multiplayer){
			if($player.getHealth() > 0){
				if(globalCoop_check_isEntityInsideOfEntity($player,eTrigger,0)){
					//wait for the players to be on ground, no jumping or beeing on a ladder
					if($player.isplayeronground()){
						globalCoop_level_callReliably(eTrigger.getStringVar("globalCoop_level_areaThread"));
						globalCoop_level_remove(eTrigger);
					}
				}
			}
			return;
		}

//MULTIPLAYER
		entity eActivator;
		eActivator = eTrigger.getLastActivatingEntity();		
		//check if 50% of the players are inside that trigger field	
		entity ePlayer;
		float fPlayerIdInUse;
		float fExistingPlayers;
		float fPlayersInside;
		
		//odd, needed to be declared seperate
		//the vars did not set if defined on declaration....
		fPlayersInside=0;
		fExistingPlayers=0;

		for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
			//[b60025] Chrissstrahl - using now entity num instead of targetname
			ePlayer = getEntity("*"+fPlayerIdInUse);
			if(doesEntityExist(ePlayer)){//needs to be a seperate check or it fails
				//ePlayer.hudprint("inside area\n");
				if(!globalCoop_check_playerSpectator(ePlayer)){
					fExistingPlayers++;
					if(ePlayer.getHealth() > 0){
						if(globalCoop_check_isEntityInsideOfEntity(ePlayer,eTrigger,0)){
						//wait for the players to be on ground, no jumping or beeing on a ladder
							if(ePlayer.isplayeronground()){
								//ePlayer.hudprint("on ground\n");
								ePlayer.setFloatVar("globalCoop_level_gatheringAreaActivatedInside",1);
								fPlayersInside++;
							}
						}
						else{
							ePlayer.setFloatVar("globalCoop_level_gatheringAreaActivatedInside",0);
						}
					}
				}
			}
		}
		
		//we don't want to continue unless a player is inside the area
		if( fPlayersInside == 0 ){
			return;
		}
		
		float fPercentage;
		float fTimeWaited;
		float fWaitTime = 31;
		
		fPercentage	= eTrigger.getFloatVar("globalCoop_level_areaPercentage");
		fTimeWaited	= eTrigger.getFloatVar("globalCoop_level_areaWaited");
		fTimeWaited++;
		eTrigger.setFloatVar("globalCoop_level_areaWaited",fTimeWaited);
		
		//make sure when less than three players are playing, that they can all reach the area
		if(fExistingPlayers < 2){
			fPercentage = 100;
		}
		
		//test
		//if(getCvarInt("coop_dev")){
			//fPlayersInside = 0;
			//$player0.hudprint("ins:"+fPlayersInside+" - req:"+((fExistingPlayers / 100) * fPercentage)+" - wait:"+(fWaitTime - fTimeWaited)+"\n");
		//}
		float fRequired;
		fRequired = fExistingPlayers / 100;
		fRequired = fRequired * fPercentage;
		if( fPlayersInside >= fRequired || fTimeWaited > fWaitTime){
		
		
			//remove the huds again
			for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
				//[b60025] Chrissstrahl - using now entity num instead of targetname
				ePlayer = getEntity("*"+fPlayerIdInUse);
				if( doesEntityExist(ePlayer)){//needs to be a seperate check or it fails
					if(globalCoop_check_playerSpectator(ePlayer) == 0){
						if(globalCoop_player_getLanguage(ePlayer)){
							if(eTrigger.getStringVar("globalCoop_level_areaThread") == "coop_endLevel"){
								globalCoop_huds_Remove(ePlayer,"coop_exit");
							}
							else{
								globalCoop_huds_Remove(ePlayer,"coop_gather");
							}
						}
					}
				}
			}
			globalCoop_level_callReliably(eTrigger.getStringVar("globalCoop_level_areaThread"));
			globalCoop_level_remove(eTrigger);
			return;
		}
		
		//display message every X sec
		float fDisplayWait=4;
		if((fWaitTime - fTimeWaited) < 10){
			fDisplayWait=2;
		}
		
		//display message or hud
		string sLang;
		float fTime;
		fTime = (fWaitTime - fTimeWaited);
		for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
			//[b60025] Chrissstrahl - using now entity num instead of targetname
			ePlayer = getEntity("*"+fPlayerIdInUse);
			if( doesEntityExist(ePlayer)  ){//needs to be a sepereate check or it won't work right (ef2 script issue)
				if( globalCoop_check_playerSpectator(ePlayer) == 0 && ePlayer.getHealth() > 0){

					if(globalCoop_player_getLanguage(ePlayer)){
						thread globalCoop_level_gatheringAreaPlayerHandleHud(ePlayer,eTrigger,fPlayersInside,fPercentage,fExistingPlayers,fTime);
					}else{
						//get langauge
						sLang = ePlayer.getLanguage();
						//inside
						if(ePlayer.getFloatVar("globalCoop_level_gatheringAreaActivatedInside")){
							if( sLang == "Deu" ){
								ePlayer.hudPrint("^5INFO: ^2Sie warten auf die anderen Spieler. Fortsetzung in:^5 "+ fTime +"\n");
							}else{
								ePlayer.hudPrint("^5INFO: ^2You are waiting for the other players. Continuing in:^5 "+ fTime +"\n");
							}
						}
						//outside
						else{
							if( sLang == "Deu" ){
								ePlayer.hudPrint("^5INFO: ^2Das Team wartet, bitte begeben Sie sich zum Sammelpunkt (" + fTime +").\n");
							}else{
								ePlayer.hudPrint("^5INFO: ^2The Team is waiting, please proceed to the Gatheringarea (" + fTime +").\n");
							}
						}
					}
				}
			}
		}

		//failsafe / countdown
		if((eTrigger.getFloatVar("globalCoop_level_gatheringPlayer") + fDisplayWait) <= getLevelTime()){
			fTimeWaited++;
			eTrigger.setFloatVar("globalCoop_level_gatheringPlayer",getLevelTime());
		}
}

void globalCoop_level_testSpawn()
//----------------------------------------------------------------------
// test each spawn point with real player
//----------------------------------------------------------------------
{
	//[b607] handle call from c++ code via !testspawn, get player0 on default (if called via console script)
	entity ePlayer;
	ePlayer = getCurrentEntity();
	
	if(doesEntityExist(ePlayer)){
		if(ePlayer.getSubclassName() != "Player"){
			ePlayer = $NULL;
		}
	}
	
	//[b60025] Chrissstrahl - try grabbing next best player
	if(!doesEntityExist(ePlayer)){
		float fPlayerIdInUse=0;	
		while(fPlayerIdInUse<coop_integer_maxPlayers){
			ePlayer = getEntity("*"+fPlayerIdInUse);
			if(doesEntityExist(ePlayer)){
				fPlayerIdInUse = coop_integer_maxPlayers;
			}
			fPlayerIdInUse++;
		}
	}
		
	if(!doesEntityExist(ePlayer)){
		return;
	}
	
	//[b610] chrissstrahl - abbort if player dies or goes spec or cancels
	if(ePlayer.getFloatVar("globalCoopLevelTestingSpawns") == 1){
		ePlayer.hudprint("^3Spawnpoint check ^2abborted^3...\n");
		ePlayer.setFloatVar("globalCoopLevelTestingSpawns",0);
		return;
	}
	ePlayer.setFloatVar("globalCoopLevelTestingSpawns",1);
	
	vector vAngle;
	vector vSpawn;
	float fSpawnpointsChecked = 1;
	//[b610] chrissstrahl - abort if player dies or goes spec or cancels
	while(doesEntityExist(ePlayer)){
		if(ePlayer.gethealth() <= 0 || globalCoop_check_playerSpectator(ePlayer) == 1){
			ePlayer.setFloatVar("globalCoopLevelTestingSpawns",0);
			return;
		}
		if(ePlayer.getFloatVar("globalCoopLevelTestingSpawns") == 0){
			return;
		}
	
		//player further away as X units
		if(vectorlength( ePlayer.getOrigin() - vSpawn ) > 110){
			vSpawn = getVectorScriptVariable("coop_vector_spawnOrigin"+fSpawnpointsChecked);
			//get targetnamed info player deathmatch if spawn seams to be not set
			//get targetnamed info player deathmatch if spawn seams to be not set
			if(vSpawn == '0 0 0'){
				entity eIpd;
				eIpd = getEntity("ipd"+fSpawnpointsChecked);
				if(doesEntityExist(eIpd)){
					vSpawn = eIpd.getOrigin();
					vAngle = eIpd.getAngles();
				}
			}else{
				vAngle_y = getFloatScriptVariable("coop_float_spawnAngle"+fSpawnpointsChecked);
				if( vAngle_y == 0 ){
					vAngle_y = getFloatScriptVariable("coop_float_spawnAngle0");
				}
			}
			ePlayer.hudprint("Checking ^3spawnpoint^5 "+fSpawnpointsChecked+"^3 please move^8 to test next\n");
			ePlayer.notsolid(); //[b607] prevent player getting stuck in a player
			ePlayer.warp(vSpawn);
			ePlayer.immobilize(1);
			ePlayer.playerviewangles(vAngle);
			fSpawnpointsChecked++;
			wait(0.5);
			//[b610] chrissstrahl - make sure player is valid
			if(!doesEntityExist(ePlayer)){
				return;
			}
			if(globalCoop_check_playerSpectator(ePlayer) == 0){
				thread globalCoop_player_makeSolidASAP(ePlayer);//[b607] prevent player getting stuck in a player
				ePlayer.playerviewangles(vAngle);
			}
			ePlayer.immobilize(0);
		}
		//[b610] chrissstrahl - moved here to show test completed after the player has really completed the test
		if(fSpawnpointsChecked == 9){
			ePlayer.setFloatVar("globalCoopLevelTestingSpawns",0);
			ePlayer.hudprint("Checks COMPLETED!\n");
			return;
		}
		wait(0.25);
	}
}
void globalCoop_level_showSpawn()
//----------------------------------------------------------------------
// shows where the current spawnpoints are located
//----------------------------------------------------------------------
{
	//[b610] handle call from c++ code via !showspawn, get player0 on default (if called via console script)
	entity ePlayer;
	ePlayer = getCurrentEntity();
	if(doesEntityExist(ePlayer) != 1 || ePlayer.getSubclassName() != "Player"){
		ePlayer = $player0;
	}

	//[b610] chrissstrahl - allow cancellation
	if($world.getFloatVar("globalCoopLevelShowSpawn") == 1){
		$world.setFloatVar("globalCoopLevelShowSpawn",0);
		
		thread globalCoop_level_hideSpawn();
		ePlayer.hudprint("^5!showspawn ^2abborted^5...\n");
		return;
	}
	
	$world.setFloatVar("globalCoopLevelShowSpawn",1);
	ePlayer.hudprint("^5!showspawn started...\n");


	//if(getCvarInt("coop_dev")){ //[b607] disabled so they can be used without developer cvar set
		vector v;
		float f;
		entity eMarker,eSymbol;
		float fSpawns;
		string sSymbol;
		float fIntervalLast;
		float fIntervalMax;
		float fJustSpanwd;
		string sAnim;
		
		fSpawns=8;
		fIntervalMax=10;
		while($world.getFloatVar("globalCoopLevelShowSpawn") == 1){
			if((fIntervalLast+fIntervalMax) < getLeveltime()){
				fIntervalLast = ceil(getLevelTime());
				sAnim = "run";
			}
			else{
				sAnim = "idle";
			}
				
			for( fSpawns=1;fSpawns<=8;fSpawns++){
				eMarker = getEntity("globalCoop_level_spawnMarker"+fSpawns);
				eSymbol = getEntity("globalCoop_level_spawnSymbol"+fSpawns);
				v=getVectorScriptVariable("coop_vector_spawnOrigin"+fSpawns);
				
				//get targetnamed info player deathmatch if spawn seams to be not set
				if(v == '0 0 0'){
					entity eIpd;
					eIpd = getEntity("ipd"+fSpawns);
					if(doesEntityExist(eIpd)){
						v = eIpd.getOrigin();
						f = vectorgetY(eIpd.getAngles());
					}
				}else{
					f=getFloatScriptVariable("coop_float_spawnAngle"+fSpawns);
					if(f==0){
						f=getFloatScriptVariable("coop_float_spawnAngle0");
					}				
				}
				if(!doesEntityExist(eMarker)){
					fJustSpanwd=1;
					eMarker = spawn("script_model","model","models/char/munro_voyager.tik","targetname","globalCoop_level_spawnMarker"+fSpawns);
					sSymbol = "actionhero";
					if(fSpawns == 1)sSymbol = "award_ace";
					else if(fSpawns == 2)sSymbol = "award_expert";
					else if(fSpawns == 3)sSymbol = "award_master";
					else if(fSpawns == 4)sSymbol = "award_champion";
					else if(fSpawns == 5)sSymbol = "specialty_technician";
					else if(fSpawns == 6)sSymbol = "specialty_medic";
					else if(fSpawns == 7)sSymbol = "specialty_heavyweapons";
					else if(fSpawns == 8)sSymbol = "specialty_sniper";
					eSymbol = spawn("Object","model","sysimg/icons/mp/"+sSymbol+".spr","scale","0.4","targetname","globalCoop_level_spawnSymbol"+fSpawns);
					globalCoop_main_waitAFrame();
				}
				else{
					fJustSpanwd=0;
				}
				//f = f + 180;//+180 to correct model tiki missaligment not all models are messed up the same way
				eMarker.angle(f);
				eMarker.anim(sAnim);
				eMarker.origin(v);
				v_z += 110;
				eSymbol.origin(v);
				
				if(fJustSpanwd){
					eMarker.notsolid();
					//eMarker.setcustomshader("disruptor_death");
					eMarker.setcustomshader("phaser_death");
					eMarker.fade(0.1,0.25);
					eMarker.forcealpha(1);			
					eMarker.rendereffects("+fullbright");				
				}
				if(getCvarInt("sv_cinematic"))
				{
					eMarker.hide();
					eSymbol.hide();
				}else{
					eMarker.show();
					eSymbol.show();
				}
			}
			wait(2);
		}
	//} //[b607]
}

//[b607] added to hide shown spawn spotsymbols again
void globalCoop_level_hideSpawn()
//----------------------------------------------------------------------
// hides the spawnpoints markers again
//----------------------------------------------------------------------
{
	killthread("globalCoop_level_showSpawn");
	globalCoop_main_waitAFrame();
	float i;
	entity eSpawn;
	for(i=1;i<=8;i++){
		eSpawn = getEntity("globalCoop_level_spawnMarker"+i);
		if(doesEntityExist(eSpawn)){eSpawn.remove();}
		eSpawn = getEntity("globalCoop_level_spawnSymbol"+i);
		if(doesEntityExist(eSpawn)){eSpawn.remove();}
	}
}

