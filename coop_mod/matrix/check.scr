//-----------------------------------------------------------------------------------
// Script By:	Christian Sebastian Strahl (Chrissstrahl)
// Created on:	2007.09.29
// E-Mail:		chrissstrahl@yahoo.de
//-----------------------------------------------------------------------------------
// CONTAININS ALL CHECK RUTINES USED BY THE CO-OP MOD
//-----------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////Functions
////////////////////////////////////////////////////////////////////////////////
float globalCoop_check_isPlayer(entity e)
//------------------------------------------------------------------------------
//Cheks if given entity is a player
//------------------------------------------------------------------------------
{
	if(doesEntityExist(e)){
		if(e.getSubclassName() == "Player"){
			return 1;
		}
	}
	return 0;
}

float globalCoop_check_isActor(entity e)
//------------------------------------------------------------------------------
//Cheks if given entity is a player
//------------------------------------------------------------------------------
{
	if(doesEntityExist(e)){
		if(e.getSubclassName() == "Actor"){
			return 1;
		}
	}
	return 0;
}

float globalCoop_check_isSentient(entity e)
//------------------------------------------------------------------------------
//Cheks if given entity is a player
//------------------------------------------------------------------------------
{
	if(doesEntityExist(e)){
		string sSubClassName;
		sSubClassName = e.getSubclassName();
		if(sSubClassName == "Actor" || sSubClassName == "Player"){
			return 1;
		}
	}
	return 0;
}


float globalCoop_check_stringEntityExist(string sTargetname)
//------------------------------------------------------------------------------
//Cheks for an entity it's by the given targetname,
//------------------------------------------------------------------------------
{
	if(sTargetname != ""){
		entity e;
		e = getEntity(sTargetname+"");
		if(doesEntityExist(e) == 1 ){
			return 1;
		}
	}
	return 0;
}

float globalCoop_check_existingLivingEntity(entity e)
//------------------------------------------------------------------------------
//Cheks for an entity it's existance and health,
//------------------------------------------------------------------------------
{
	if(doesEntityExist(e)){
		if(e.getHealth() > 0){
			return 1;
		}
	}
	return 0;
}


float globalCoop_check_playerCrouching(entity ePlayer)
//------------------------------------------------------------------------------
//is player crouching 0/1
//------------------------------------------------------------------------------
{
	if(doesEntityExist(ePlayer)){
		vector vMaxs;
		vMaxs = ePlayer.getMaxs();
		if(vMaxs_z == 49){
			return 1;
		}
	}
//Return False by default
	return 0;
}


float globalCoop_check_playerInRange(entity eOrigin,float fRange)
//------------------------------------------------------------------------------
//is player withing in range of  0/1
//------------------------------------------------------------------------------
{
	if(doesEntityExist(eOrigin)){
		entity ePlayer;

//MULTIPLAYER
		if(cvar_bool_multiplayer){
			ePlayer = globalCoop_return_playerClosestActive(eOrigin);//check active players only
		}else{ //[b60012]
//GRAB ON DEFAULT
			ePlayer = $player;
		}
	
//CHECK IF THE GIVEN PLAYER IS IN RANGE
		//[b607] chrissstrahl - added health, class and spectator check
		if(doesEntityExist(ePlayer) == 1 && ePlayer.getHealth() > 0 && ePlayer.getSubclassName() == "Player" && globalCoop_check_playerSpectator(ePlayer) == 0 ){
			if(ePlayer.iswithindistanceof(eOrigin,fRange)){
				return 1;
			}
		}
	}
//Return FalsePlayerby default
	return 0;
}

float globalCoop_check_playerSpectator(entity ePlayer)
//------------------------------------------------------------------------------
//Cheks if the given player is in spectator mode, if so return 1 else 0
//------------------------------------------------------------------------------
{
	//[b60025] chrissstrahl - made singleplayer compatible
	//[b60012] chrissstrahl - using now upgraded command
	if(doesEntityExist(ePlayer) == 1 && cvar_bool_multiplayer != 0){
		return ePlayer.isSpectator();		
	}
	return 0;
}

float globalCoop_check_activeWeaponType(entity e, string sWeaponType)
//------------------------------------------------------------------------------
// Cheks the type of weapon the entity has
//------------------------------------------------------------------------------
{
	if(globalCoop_check_existingLivingEntity(e))
	{
//Create Var
		string sPlayerWeapon;
		sPlayerWeapon	=	globalCoop_return_stringActiveWeaponName(e);
		
//check quickly if the given string is equal to the weapon the dude is using
		if(sPlayerWeapon == sWeaponType)
		{
			return 1;
		}
//If tricorder
		if(sWeaponType == "tricorder" || sWeaponType == "Tricorder")
		{
			if(	sPlayerWeapon == "Tricorder" || sPlayerWeapon == "Tricorder-stx"|| sPlayerWeapon == "Tricorder-rom")
			{
				return 1;
			}
		}
//If Phaser
		if(sWeaponType == "phaser" || sWeaponType == "Phaser")
		{
			if(	sPlayerWeapon == "Phaser" || sPlayerWeapon == "Phaser-stx")
			{
				return 1;
			}
		}
	}
	return 0;
}

float globalCoop_check_isEntityTouchingOther(entity eTouch, entity eOther, float fPadding)
//------------------------------------------------------------------------------
//CHECK IF THE GIVEN ENTITIES ARE TOUCHING EACH OTHERS BOUNDINGBOXES
//------------------------------------------------------------------------------
{
//padding=add to the bounding box, or substract by using negative values
//ignore=if set to 'z' Z-coordinates will be ignored, options are x,y,z

	if(!doesEntityExist(eTouch) || !doesEntityExist(eOther)){	
		return 0;
	}
	fPadding = (fPadding + 2);//for some reason trigger their field is plus 1 or 2 units, well, so this is our bugfix for this issue
	
	vector vOriginTouch,vOriginOther,vBBoxMinsTouch,vBBoxMaxsTouch,vBBoxMinsOther,vBBoxMaxsOther;
	
	vOriginTouch = eTouch.getOrigin();
	vOriginOther = eOther.getOrigin();
	
	vBBoxMinsTouch = eTouch.getMins();
	vBBoxMaxsTouch = eTouch.getMaxs();
	vBBoxMinsOther = eOther.getMins();
	vBBoxMaxsOther = eOther.getMaxs();

	float fDistanceOrgins,fLengthBothBoxesTouchLower,fLengthBothBoxesOtherLower;
	
//if touch x is lower than other x
	fDistanceOrgins = globalCoop_return_floatLengthFromVectorCalc(vOriginTouch_x,vOriginOther_x);
	fLengthBothBoxesTouchLower	= globalCoop_return_floatLengthFromCombinedBbox(vBBoxMaxsTouch_x,vBBoxMinsOther_x);
	fLengthBothBoxesOtherLower	= globalCoop_return_floatLengthFromCombinedBbox(vBBoxMaxsOther_x,vBBoxMinsTouch_x);
	
	if(vOriginTouch_x < vOriginOther_x){
		if(fDistanceOrgins > (fLengthBothBoxesTouchLower + fPadding)){
			return 0;	//their bounding boxes do not tuch
		}
	}else if(fDistanceOrgins > (fLengthBothBoxesOtherLower + fPadding)){
		return 0;	//their bounding boxes do not tuch
	}
	
//if touch y is lower than other y
	fDistanceOrgins = globalCoop_return_floatLengthFromVectorCalc(vOriginTouch_y,vOriginOther_y);
	fLengthBothBoxesTouchLower	= globalCoop_return_floatLengthFromCombinedBbox(vBBoxMaxsTouch_y,vBBoxMinsOther_y);
	fLengthBothBoxesOtherLower	= globalCoop_return_floatLengthFromCombinedBbox(vBBoxMaxsOther_y,vBBoxMinsTouch_y);
	
	if(vOriginTouch_y < vOriginOther_y){
		if(fDistanceOrgins > (fLengthBothBoxesTouchLower + fPadding)){
			return 0;	//their bounding boxes do not tuch
		}
	}else if(fDistanceOrgins > (fLengthBothBoxesOtherLower + fPadding)){
		return 0;	//their bounding boxes do not tuch
	}
	
//if touch z is lower than other z
	fDistanceOrgins = globalCoop_return_floatLengthFromVectorCalc(vOriginTouch_z,vOriginOther_z);
	fLengthBothBoxesTouchLower	= globalCoop_return_floatLengthFromCombinedBbox(vBBoxMaxsTouch_z,vBBoxMinsOther_z);
	fLengthBothBoxesOtherLower	= globalCoop_return_floatLengthFromCombinedBbox(vBBoxMaxsOther_z,vBBoxMinsTouch_z);
	
	if(vOriginTouch_z < vOriginOther_z){
		if(fDistanceOrgins > (fLengthBothBoxesTouchLower + fPadding )){
			return 0;	//their bounding boxes do not tuch
		}
	}else if(fDistanceOrgins > (fLengthBothBoxesOtherLower + fPadding )){
		return 0;	//their bounding boxes do not tuch
	}
	return 1;
}

float globalCoop_check_isEntityInsideOfEntity(entity e1, entity e2, float fPadding)
//------------------------------------------------------------------------------
//CHECK IF ENTITY1 IS INSIDE THE BOUNDING BOX OF ENTITY2
//[b60025] Chrissstrahl - improved using ChatGTP 4o
//We are still checking against dead players, so the function can be used more wideley
//------------------------------------------------------------------------------
{
    if (doesEntityExist(e1) == 0 || doesEntityExist(e2) == 0){
		return 0;
	}

    // Declare variables
    vector vOrigin1, vBBoxMins1, vBBoxMaxs1;
    vector vOrigin2, vBBoxMins2, vBBoxMaxs2;
    
    // Get bounding box data
    vBBoxMins1 = e1.getMins();
    vBBoxMaxs1 = e1.getMaxs();
    vBBoxMins2 = e2.getMins();
    vBBoxMaxs2 = e2.getMaxs();
    
    // Adjust bounding box for players
    if (globalCoop_check_isPlayer(e1)) {
		if(globalCoop_check_playerSpectator(e1)){
			return 0;
		}
        vBBoxMins1 = '-22 -22 0';
        vBBoxMaxs1 = '22 22 96';
    }
    if (globalCoop_check_isPlayer(e2)) {
		if(globalCoop_check_playerSpectator(e2)){
			return 0;
		}
        vBBoxMins2 = '-22 -22 0';
        vBBoxMaxs2 = '22 22 96';
    }
    
    // Get entity origins
    vOrigin1 = e1.getOrigin();
    vOrigin2 = e2.getOrigin();
	
    // Check if e1 is inside e2's bounding box
    if (globalCoop_check_isBoundingBox2InsideOfBoundingBox1( vOrigin1, vBBoxMins1, vBBoxMaxs1,vOrigin2, vBBoxMins2, vBBoxMaxs2, fPadding)){
        return 1;
    }
    
    return 0;
}

float globalCoop_check_isBoundingBox2InsideOfBoundingBox1(
    vector vOrigin1, vector vBBoxMins1, vector vBBoxMaxs1,
    vector vOrigin2, vector vBBoxMins2, vector vBBoxMaxs2,
    float fPadding)
//------------------------------------------------------------------------------
//CHECK IF THE GIVEN BOUNDINGBOXES ARE TOUCHING OR INSIDE OF EACH OTHER BOUNDINGBOX
//[b60025] chrissstrahl - function improved with ChatGTP 4o
//------------------------------------------------------------------------------
{
	//[b60025] Chrissstrahl - make sure if it is the same origin/entity we get a early out
	if(vOrigin1 == vOrigin2){
		return 1;
	}

    // Compute absolute min/max positions in world space
    vector min1, max1;
    vector min2, max2;
    
    // Adjust bounding box min/max with padding on a per-axis basis
    min1_x = vOrigin1_x + vBBoxMins1_x - fPadding;
    min1_y = vOrigin1_y + vBBoxMins1_y - fPadding;
    min1_z = vOrigin1_z + vBBoxMins1_z - fPadding;
    
    max1_x = vOrigin1_x + vBBoxMaxs1_x + fPadding;
    max1_y = vOrigin1_y + vBBoxMaxs1_y + fPadding;
    max1_z = vOrigin1_z + vBBoxMaxs1_z + fPadding;
    
    min2_x = vOrigin2_x + vBBoxMins2_x;
    min2_y = vOrigin2_y + vBBoxMins2_y;
    min2_z = vOrigin2_z + vBBoxMins2_z;
    
    max2_x = vOrigin2_x + vBBoxMaxs2_x;
    max2_y = vOrigin2_y + vBBoxMaxs2_y;
    max2_z = vOrigin2_z + vBBoxMaxs2_z;
    
    // AABB Overlap check
    if (max1_x < min2_x || min1_x > max2_x) return 0;
    if (max1_y < min2_y || min1_y > max2_y) return 0;
    if (max1_z < min2_z || min1_z > max2_z) return 0;
    
    return 1; // Overlapping or inside
}


float globalCoop_check_isEntityInsideOfPlayer(entity e1,float fPadding)
//------------------------------------------------------------------------------
//CHECK IF ENTITY1 IS INDIDE OF THE BOUNDINBOX OF ANY PLAYER
//------------------------------------------------------------------------------
{
	if(doesEntityExist(e1)){
		float iEntNum;
		float fPlayerIdInUse;
		entity ePlayer;
		iEntNum = e1.getEntNum();
		for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
			//[b60025] Chrissstrahl - using now entity num instead of targetname
			ePlayer = getEntity("*"+fPlayerIdInUse);
			
			if(doesEntityExist(ePlayer)){
		//DON'T CHECK THE PLAYER BEEING STUCK INSIDE HIM SELF!	
				if(iEntNum != fPlayerIdInUse){	//[b60025] Chrissstrahl - using now entity num instead of targetname
		//DONT CHECK DEAD PPL
					if(ePlayer.getHealth() > 0){
		//DONT CHECK SPECTATOR
						if(!globalCoop_check_playerSpectator(ePlayer)){
							if(	globalCoop_check_isEntityInsideOfEntity(e1,ePlayer,fPadding) ){
								return 1;
							}
						}
					}
				}
			}
		}
	}
	return 0;
}


float globalCoop_check_isPowerOfGiven(float fValue,float fGiven)
//----------------------------------------------------------------------
// RETURN TRUE OR FALSE IF THE VALUE IS A POWER OF THE GIVEN
//----------------------------------------------------------------------
{
	float fValueCalc;
	fValueCalc = (fValue / fGiven);
	fValueCalc = floor(fValueCalc);
	if((fValueCalc * fGiven) == fValue){
		return 1;
	}
	return 0;
}



