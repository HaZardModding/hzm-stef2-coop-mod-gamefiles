//-------------------------------------------
//
//  EF2 Level Script File
//
//  Level:	  Drull Ruins 3 Boss Fight: Level B
//  Script By:    Jared 'BirdDawg' Hefty, Josh Martel
//  Geometry By:  Richard 'Charon' Heath, Jared 'BirdDawg' Hefty
//
//--------------------------------------------

void main();
void spawnWaves ();
void runPowerupConsoles ();
void endIntroCinematic ();
void bossDialog ();
void randomCommanderDialog ();
void earthquakes ();
void tryToRemoveAllMonsters ();
void disconnectPathNodesInGrid( string basename, float width, float height, float colA, float rowA, float colB, float rowB );
void disconnectAllPathNodesInGrid( string basename, float width, float height );


//hzm coop mod - chrissstrahl - include the required coop level-scripts
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
string	coop_returnMeRandomPlayerTargetName();
entity	coop_returnMeARandomPlayer();
void	coop_endLevel();
entity	entityPlayerGlobal;

#include "coop_mod/matrix/main.scr"
#include "coop_mod/matrix/global/global_common.scr"
#include "coop_mod/matrix/global/global_playerLoadout.scr"
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////


//from m10/m10_common.scr
void animActor ( entity e , string animation , string finishedAnim )
{
	if ( doesEntityExist ( e ) )
	{
		e.anim ( animation );
		waitforanimation ( e , animation );
		e.anim ( finishedAnim );
	}
}

//#include "maps/global_scripts/global_debugutils.scr"
#include "maps/global_scripts/global_math.scr"
#include "maps/global_scripts/global_cinematicFX.scr"
#include "maps/m11/m11_beamInAmmo.scr"

void runShieldPanelAttack ();
void incrementStageCinematic ();

float MAX_DISTANCE = 1000000;

float totalCreaturesKilled = 0;
float totalCreaturesAlive = 0;
float maxTotalCreaturesAlive = 3;
float maxTotalCreaturesKilled = 6;

float TOTAL_SPAWNERS = 16;						//How many spawners to choose from
float SPAWNER_RESET_TIME = 5;					//seconds a spawner has to wait before it can be chosen again

//---------------------
void main()
//---------------------
{
	//hzm coop mod chrissstrahl - default overwrite - show sucess hud
	coop_bool_showMissionSucessHud	= 1;
	
	//hzm coop mod chrissstrahl - set spawn positions
	coop_float_spawnAngle0 				= 270;
	coop_vector_spawnOrigin8 			= '404 6831 -695';
	coop_vector_spawnOrigin7 			= '330 6831 -695';
	coop_vector_spawnOrigin6 			= '260 6831 -695';
	coop_vector_spawnOrigin5 			= '190 6831 -695';
	coop_vector_spawnOrigin4 			= '120 6831 -695';
	coop_vector_spawnOrigin3 			= ' 50 6831 -695';
	coop_vector_spawnOrigin2 			= '-20 6831 -695';
	coop_vector_spawnOrigin1 			= '-90 6831 -695';

	//hzm coop mod chrissstrahl - set background story - it is a local string, so no need for seperate _deu
	coop_string_story = "$$Ruins3LoadingText$$";
	
	//hzm coop mod chrissstrahl - set tactical info
	coop_string_objectiveTacticalInfo1 = "";
	coop_string_objectiveTacticalInfo2 = "";
	coop_string_objectiveTacticalInfo3 = "";
	
	//hzm coop mod chrissstrahl - needs to be done very early or players spawn with no weapon in their hands
	thread globalLoadout_AssignWeapons ( "m11l3b_drull_ruins3" );
	
	$world.entity_fade_dist( 18000 );
	$world.farplane_color( '.4 0.20 0.00' );
	$world.farplane( 15000 );
	$world.farplane_cull ( 1 );
	$world.farplane_fog ( 1 );
	stuffcmd ( "r_light_emphasize 100\n" );

	soundtrack ( "music/m11l3b-drull_ruins3_boss.mus" );
	$finalboss.ai_off();
	$finalboss.hide();
	$finalboss.notsolid();
	$finalboss.touchtriggers( 0 );

	$world.light_intensity( "flicker1", 0 );
	$world.light_lightstyle( "flicker1", "zxazcyazauwxazdaawtbzcya" );

	cam.load ( "m11l3b_commanderzoomcam" );
//	cam.load ( "m11l3b_commanderdeathcam" );
	cam.load ( "m11l3b_munroentrancecam" );

	cam.load ( "m11l3b_cmdrShot1" );
	cam.load ( "m11l3b_cmdrShot2" );
	cam.load ( "m11l3b_cmdrShot3" );
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);

	cam.load ( "m11l3b_archShot1" );
	cam.load ( "m11l3b_archShot2" );
	cam.load ( "m11l3b_archShot3" );
	cam.load ( "m11l3b_archShot4" );
	cam.load ( "m11l3b_archShot5" );
	cam.load ( "m11l3b_archShot6" );
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);

	cam.load ( "m11l3b_archDeathShot1" );
	cam.load ( "m11l3b_archDeathShot2" );
	cam.load ( "m11l3b_archDeathShot3" );

	cam.load ( "m11l3b_transitioncam1" );
	cam.load ( "m11l3b_transitioncam2" );
	cam.load ( "m11l3b_transitioncam3" );
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);

	cam.load ( "m11l3b_bossintrocam1" );
	cam.load ( "m11l3b_munrobossintrocam1" );
	cam.load ( "m11l3b_munrobossintrocam2" );

	cam.load( "m11l3b_stage4death" );
	cam.load( "m11l3b_stage4death_2" );
	cam.load( "m11l3b_stage4death_3" );
	cam.load( "m11l3b_stage4death_4" );
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);

	spawn ( "Camera" , "targetname" , "commanderZoomCam" );
	spawn ( "Camera" , "targetname" , "cmdrDeath1" );
	spawn ( "Camera" , "targetname" , "cmdrDeath2" );
	spawn ( "Camera" , "targetname" , "cmdrDeath3" );

	spawn ( "Camera" , "targetname" , "archShot1" );
	spawn ( "Camera" , "targetname" , "archShot2" );
	spawn ( "Camera" , "targetname" , "archShot3" );
	spawn ( "Camera" , "targetname" , "archShot4" );
	spawn ( "Camera" , "targetname" , "archShot5" );
	spawn ( "Camera" , "targetname" , "archShot6" );
	
	spawn ( "Camera" , "targetname" , "munroEntranceCam" );
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);

	$world.light_lightstyle ( "powerupDoorLight1" , "a" , 0 );
	$world.light_lightstyle ( "powerupDoorLight2" , "a" , 0 );
	$world.light_lightstyle ( "powerupDoorLight3" , "a" , 0 );
	$world.light_lightstyle ( "powerupDoorLight4" , "a" , 0 );

	$powerupDoorGreen1.hide ();
	$powerupDoorGreen2.hide ();
	$powerupDoorGreen3.hide ();
	$powerupDoorGreen4.hide ();

	spawn ( "Actor" , "model" , "models/char/hazardteam_munro.tik" , "targetname" , "munro" );
	wait ( .1 );
	$munro.ai_off ();
	$munro.hide ();
	$munro.notsolid ();
	$munro.notarget ();

	$t6.nottriggerable ();
	$t8.nottriggerable ();

	//--- loadout the player
	waitForPlayer();

	thread earthquakes ();

	$commanderPanel1.time ( 10 );
	$commanderPanel1.rotateY ( 4 );

	$commanderPanel2.time ( 10 );
	$commanderPanel2.rotateY ( 3 );

	$commanderPanel2.time ( 10 );
	$commanderPanel2.rotateY ( 5 );

	$renegade_romulan.anim ( "suldok_sit" );
	$renegade_romulan.removeactorweapon ( "RomulanDisruptor" );
	$finalboss.killthread ( "finalBoss_killthread" );
	
	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$StopCommander$$","incomplete",1,1);
}


//============================================================================================== FINAL BOSS STUFF

float nodeNum = 0;
float stageAtLastMove = 1;
float TOTAL_NODES = 7;
entity lastNodeChosen;

void finalBoss_initNodes()
{
	float i;
	entity node;
	for ( i = 1 ; i <= TOTAL_NODES ; i++ )
	{
		node = getentity( "bossnode" + i );
		node.setfloatvar( "chosenLast", 0 );
	}
}

void finalBoss_watchHealthAndChangeStages();
void finalBoss_go()
{
	finalBoss_initNodes();

	spawn( "fx/fx-dummy.tik", "targetname", "lavashooter" );

	thread finalBoss_watchHealthAndChangeStages();

	$finalboss.hide();
	$finalboss.notsolid();
	$finalboss.touchtriggers( 0 );

	$finalboss.ai_on();
	
	//hzm coop mod chrissstrahl - make aggressive, rather than attacking $player
	$finalboss.aggressive( 1 );

	$finalboss.playdialog("localization/sound/dialog/m11l3/final_perf.mp3", 1, 10000 , 0); //I am perfection. You are flawed.
	waitForDialog( $finalboss );
	$finalboss.playdialog("localization/sound/dialog/m11l3/final_elim.mp3", 1, 10000 , 0); //I live to eliminate the imperfect species.
}

void finalBoss_end()
{
	//wait( 4 );
	clearletterbox ( .1 );
	noncinematic ();
	
	//hzm coop mod chrissstrahl - load next map
	thread coop_endLevel();
	
	/*
	spawn ( "trigger_changelevel", "targetname", "trigger_endlevel", "map", "m12-end" );
	wait ( 0.1 );
	trigger ( "$trigger_endlevel" );
	*/
}

void finalBoss_incrementStage()
{
	float theStage;
	theStage = $finalboss.getstage();

	$finalboss.ai_off();

	if( theStage == 1 )
	{
		$finalboss.surface( "material12", "+nodraw" );
		forcemusic ( "aux2","action" );
	}
	else if( theStage == 2 )
	{
		$finalboss.surface( "material11", "+nodraw" );
		forcemusic ( "aux3","action" );
	}
	else if( theStage == 3 )
	{
		$finalboss.surface( "material10", "+nodraw" );
		forcemusic ( "aux3","action" );
	}

	incrementStageCinematic ();

	$finalboss.gotonextstage();
	$finalboss.ai_on();
	
	//hzm coop mod chrissstrahl - make aggressive, rather than attacking $player
	$finalboss.aggressive( 1 );

	killthread( "spawnWaves" );
	maxTotalCreaturesAlive = 8;
	thread spawnWaves ();
}

float FINAL_BOSS_MAX_HEALTH = 3500;		// I hate to do it this way, bug I'd hate adding another event to entity even more.
float FINAL_BOSS_HEALTH_STAGE1 = 2625; 	// 75%
float FINAL_BOSS_HEALTH_STAGE2 = 1750; 	// 50%
float FINAL_BOSS_HEALTH_STAGE3 = 875; 	// 25%

void finalBoss_watchHealthAndChangeStages()
{
	float h;
	float theStage;

	h = $finalboss.gethealth();

	// STAGE 1
	while( h > FINAL_BOSS_HEALTH_STAGE1 )
	{
		h = $finalboss.gethealth();
		wait( 0.1 );
	}
	finalBoss_incrementStage();

	// stage 2
	while( h > FINAL_BOSS_HEALTH_STAGE2 )
	{
		h = $finalboss.gethealth();
		wait( 0.1 );
	}
	finalBoss_incrementStage();


	// stage 3
	while( h > FINAL_BOSS_HEALTH_STAGE3 )
	{
		h = $finalboss.gethealth();
		wait( 0.1 );
	}
	finalBoss_incrementStage();

}

void finalBoss_arriveRandomNode()
{
	vector v;
	entity shooternode;
	float nodenum;

	wait( 0.3 );
	wait( 1 );
	$finalboss.solid();
	$finalboss.touchtriggers( 1 );

	v = $finalboss.getorigin();
	v_z++;
	$finalboss.warp( v );
	wait( 0.1 );
	$finalboss.show();

	shooternode = lastNodeChosen;
	while( shooternode == lastNodeChosen )
	{
		nodenum = 1 + randomint( TOTAL_NODES );
		shooternode = getentity( "bossnode" + nodenum );
		if ( shooternode.getstringvar ( "bridgeExploded" ) != "true" )
			shooternode = lastNodeChosen;	//try again if there's a bridge over the node
		wait ( .05 );
	}

	$lavashooter.warp( shooternode.getorigin() );
	wait( 0.05 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 50 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 1, 1, 400 );
	wait( 0.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 60 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 2, 1, 400 );
	wait( 0.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 70 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 3, 1, 400 );
	wait( 1.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 50 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 1, 1, 400 );
	wait( 0.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 60 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 2, 1, 400 );
	wait( 0.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 70 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 3, 1, 400 );
	wait( 1.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 50 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 1, 1, 400 );
	wait( 1.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 60 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 2, 1, 400 );
	wait( 1.5 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 70 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 3, 1, 400 );
}

entity chooseBossNodeClosestToPlayer ()
{
	vector playerOrigin;
	entity toReturn , node;
	float i,nodeDistance, lowestDistance;
	
	//hzm coop mod chrissstrahl - make compatible to multiplayer, some how...
	entity ePlayer;
	ePlayer = coop_returnMeARandomPlayer();
	playerOrigin = ePlayer.getorigin ();

	lowestDistance = MAX_DISTANCE;
	//go through all available nodes and find the one horizontally closest to the player

	for ( i = 1 ; i <= TOTAL_NODES ; i++ )
	{
		node = getentity ( "bossnode" + i );				//grab our node
		globalCommon_AssertEntity ( node , "chooseSpawnerClosestToPlayer(): $node" + i + " is null" );
		if ( node.getfloatvar ( "chosenLast" ) == 0 )
		{
			nodeDistance = globalMath_GetXYDistance ( node.getorigin (), playerOrigin );

			if ( nodeDistance < lowestDistance )
			{
				lowestDistance = nodeDistance;	//we've found a new lowest distance
				toReturn = node;
			}
		}
	}

	if( doesEntityExist( lastNodeChosen ) )
	{
		lastNodeChosen.setfloatvar ( "chosenLast" , 0 );
	}

	lastNodeChosen = toReturn;
	toReturn.setfloatvar ( "chosenLast" , 1 );
	return toReturn;
}

entity chooseBossNodeFarthestFromPlayer ()
{
	vector playerOrigin;
	entity toReturn , node;
	float i,nodeDistance, highestDistance;
	
	//hzm coop mod chrissstrahl - make compatible to multiplayer, some how...
	entity ePlayer;
	ePlayer = coop_returnMeARandomPlayer();
	playerOrigin = ePlayer.getorigin ();

	highestDistance = 0;
	//go through all available nodes and find the one horizontally farthest from the player

	for ( i = 1 ; i <= TOTAL_NODES ; i++ )
	{
		node = getentity ( "bossnode" + i );				//grab our node
		globalCommon_AssertEntity ( node , "chooseSpawnerClosestToPlayer(): $node" + i + " is null" );
		if ( node.getfloatvar ( "chosenLast" ) == 0 )
		{
			nodeDistance = globalMath_GetXYDistance ( node.getorigin (), playerOrigin );

			if ( nodeDistance > highestDistance )
			{
				highestDistance = nodeDistance;	//we've found a new lowest distance
				toReturn = node;
			}
		}
	}

	if( doesEntityExist( lastNodeChosen ) )
	{
		lastNodeChosen.setfloatvar ( "chosenLast" , 0 );
	}

	lastNodeChosen = toReturn;
	toReturn.setfloatvar ( "chosenLast" , 1 );
	return toReturn;
}


void explodeBridge ( string bridge );
void finalBoss_gotoRandomNode()
{
	entity thenode;
	float currentStage;
	string bridgeName;
	entity bridge;


	currentStage = $finalboss.getstage();
	if( stageAtLastMove != currentStage )
	{
		$finalboss.usebehaviorpackage( "snake_stage" + $finalboss.getstage() );
		stageAtLastMove = currentStage;
	}

	$finalboss.hide();
	$finalboss.notsolid();
	$finalboss.touchtriggers( 0 );
	wait( 0.2 );

	//if the closest node to the player is a bridge, choose it and collapse the bridge
	//otherwise, go to the node farthest away and do some distance attacks
	thenode = chooseBossNodeClosestToPlayer ();

	bridgeName = thenode.getstringvar ( "uservar1" );	//holds the basename of the bridge that this is under

	//give the player some warning before the bridge explodes
	if ( bridgeName!="" && thenode.getstringvar ( "bridgeExploded" ) != "true")
	{
		explodeBridge ( bridgeName );
		thenode.setstringvar ( "bridgeExploded" , "true" );	//mark it as exploded
	}
//	else
//		thenode = chooseBossNodeFarthestFromPlayer ();

	$finalboss.warp( thenode.getorigin() );
}

void explodeBridge ( string bridge )
{
	entity lavaBurst1,lavaBurst2,lavaBurst3,lavaBurst4;
	entity bridgeEnt,bridgeClip,quake,safetyTrigger;
	float i;
	string prefixname;

	lavaBurst1 = getentity ( bridge + "LavaBurst1" );
	lavaBurst2 = getentity ( bridge + "LavaBurst2" );
	lavaBurst3 = getentity ( bridge + "LavaBurst3" );
	lavaBurst4 = getentity ( bridge + "LavaBurst4" );

	for( i = 1; i <= 2; i++ )
	{
		prefixname = bridge + "_" + i + "_";
		disconnectAllPathNodesInGrid( prefixname, 2, 2 );
	}

	bridgeEnt = getentity ( bridge );
	bridgeClip = getentity ( bridge + "Clip" );
	safetyTrigger = getentity ( bridge + "SafetyTrigger" );


	quake = spawn ("func_earthquake" );

	triggerEntity ( lavaBurst1 );
	triggerEntity ( quake );
	wait ( .75 );
	triggerEntity ( lavaBurst2 );

	wait ( .5 );
	triggerEntity ( lavaBurst3 );
	triggerEntity ( quake );
	wait ( .5 );
	triggerEntity ( lavaBurst4 );

	wait ( 1 );
	$finalBoss.notsolid ();
	safetyTrigger.triggerable ();	//throw the player free
	triggerEntity ( quake );
	triggerEntity ( bridgeEnt );		//func_explodeobject
	bridgeClip.remove ();

	lavaBurst1.remove ();
	lavaBurst2.remove ();
	lavaBurst3.remove ();
	lavaBurst4.remove ();

	wait ( .3 );
	$finalBoss.solid ();
	safetyTrigger.remove ();


}

void finalBoss_fireHeatSeekers()
{
	$lavashooter.warp( $finalboss.getorigin() );
	wait( 0.05 );

	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 50 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 1, 1, 400 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 60 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 2, 1, 400 );
	$lavashooter.projectileattackentity( "projectile/projectile-snake-lavaattack.tik", coop_returnMeRandomPlayerTargetName(), 70 );
	$lavashooter.playsound( "sound/weapons/whooshshort.wav", 3, 1, 400 );
 }

void introCinematic ()		//called from trigger_once
{
	//hzm coop mod chrissstrahl - get player that activated this sequence, for later reference
	entity eTrigger;
	eTrigger			= getCurrentEntity();
	entityPlayerGlobal	= eTrigger.getLastActivatingEntity();

	cam_fadeout( .5, 0, 0, 0, 1, 0 );
	threadname ( "introCinematic" );
	cinematic ();
        allowMusicDucking( 0 );
    	music ("aux1");

	freezeplayer ();
	
	//fakeplayer ();//hzm coop mod chrissstrahl - will not work
	//hzm coop mod chrissstrahl - spawn a actor, because fakeplayer does not work right
	spawn ( "Actor" , "model" , "models/char/hazardteam_munro.tik" , "ai_off" , "1" , "targetname" , "fakeplayer" );
	wait ( .1 );
	$fakeplayer.notsolid();
	$fakeplayer.notarget();
	$fakeplayer.killattach();
	
	
	letterbox ( .1 );
	skipthread ( "endIntroCinematic" );

	$fakeplayer.warpto ( "$fakeplayerEntranceNodeStart" );
	
	wait ( .1 );
	vector v;
	v = $fakeplayer.getorigin ();
	v_y = v_y - 16;
	v_z = v_z + 8;
	$fakeplayer.origin ( v );

	$munroEntranceCam.follow ( $m11l3b_munroentrancecam );
	$munroEntranceCam.watch ( "$fakeplayer" );
	$munroEntranceCam.fov ( 50 );
	$munroEntranceCam.cut ();

	cuecamera ( $munroEntranceCam );
	cam_fadein( .5, 0, 0, 0, 1, 0 );

	$fakeplayer.playdialog("localization/sound/dialog/m11l3/munro_itsover.mp3", 1, 10000, 0); //End of the line for the Empty Crown. It's over!
	$fakeplayer.walkto ( "$fakeplayerEntranceNode" , "make_it_work_walk" );

	waitForDialog( $fakeplayer );

	$commanderZoomCam.follow ( $m11l3b_commanderzoomcam );

	$commanderZoomCam.fov ( 70 );
	$commanderZoomCam.cut();
	cuecamera ( $commanderZoomCam );

	wait ( .5 );

	$fakeplayer.warpto ( "$fakeplayerEntranceNode" );

	$renegade_romulan.anim  ( "suldok_point" );
	$renegade_romulan.playdialog("localization/sound/dialog/m11l3/renrom_ohno.mp3", 1, 10000, 0); //Oh no. It's just beginning.
	waitforanimation ( $renegade_romulan , "suldok_point" );
	$renegade_romulan.anim  ( "suldok_sit" );
	waitForDialog( $renegade_romulan );

	wait ( 3.25 );
	cam_fadeout( .25, 1, 1, 1, 1, 0 );
	thread endIntroCinematic ();
}

void endIntroCinematic ()
{
	noncinematic ();
	killthread ( "introCinematic" );
	$fakeplayer.stopdialog ();
	$renegade_romulan.stopdialog ();

	$fakeplayer.warpto ( "$fakeplayerEntranceNode" );
	wait ( .05 );

	//removefakeplayer ();//hzm bla bla bla
	$fakeplayer.hide();//hzm blub blub blub
	
	//hzm coop mod chrissstrahl - grab player that was triggering this sequence, and move him, like in singleplayer
	if( doesEntityExist(entityPlayerGlobal) && entityPlayerGlobal.getHealth() > 0){
		entityPlayerGlobal.origin( $fakeplayer.getOrigin() );
	}
	
	releaseplayer ();
	cueplayer ();
	clearletterbox ( .1 );
	wait ( .25 );
	cam_fadein( .25, 0, 0, 0, 1, 0 );

	trigger ( "$firstBridge" );
	$firstBridgeClip.remove ();

	$renegade_romulan.missionobjective ( 1 );

	thread runPowerupConsoles ();
	thread randomCommanderDialog ();
	thread runShieldPanelAttack();
}


void commanderDestroyedCinematicEnd ();
void commanderDestroyedCinematic ()
{
	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$StopCommander$$","complete",1,1);
	
    allowMusicDucking( 0 );
    globalCommon_Autosave ();

	cam_fadeout( .5, 0, 0, 0, 1, 0 );
	thread tryToRemoveAllMonsters ();

	letterbox ( .1 );

	$renegade_romulan.ai_off();
	$renegade_romulan.immortal(1);
	$renegade_romulan.health(1);
	killthread ( "randomCommanderDialog" );
	wait ( 1 );
	threadname ( "commanderDestroyedCinematic" );
	cinematic ();
    	forcemusic ("aux5","action");
	spawn ( "Camera" , "targetname" , "transitionCam" );
	spawn ( "Camera" , "targetname" , "munroCam" );
	wait ( .05 );

	skipthread ( "commanderDestroyedCinematicEnd" );
	freezeplayer ();
	//fakeplayer ();//hzm coop mod chrissstrahl - not working
	//hzm coop mod chrissstrahl - show actor
	$fakeplayer.show();
	
	letterbox ( .1 );
	wait ( .05 );

	$fakeplayer.origin ( '-252.71 4646.12 -1055.96' );
	$fakeplayer.angles ( '0 270 0' );
	$fakeplayer.model ( "models/char/hazardteam_munro.tik" );
	wait ( .05 );
	$fakeplayer.removeattachedmodel ( "tag_rhand" );

	$cmdrDeath1.follow ( $m11l3b_cmdrShot1 );
	$cmdrDeath1.cut ();
	cuecamera ( $cmdrDeath1 );

	cam_fadein( .5, 0, 0, 0, 1, 0 );
	$renegade_romulan.playdialog("localization/sound/dialog/m11l3/renrom_shot.mp3", 1, 80000, 0); //Ahhhh!
	$renegade_romulan.anim ( "suldok_pain" );

	waitForDialog( $renegade_romulan );

	wait ( 1 );

	$munroCam.follow ( $m11l3b_munrobossintrocam1 );
	$munroCam.cut ();
	cuecamera ( $munroCam);
	$fakeplayer.playdialog("localization/sound/dialog/m11l3/munro_stuck.mp3", 1, 80000, 0); //The Master Control Facility is stuck in first gear. You need thousands of Exomorphs, and you only have a handful.
	wait ( 2 );

	//thread animActor ( $fakeplayer , "conv-handsweep" , "idle" );
	wait ( 2 );

	$cmdrDeath1.follow ( $m11l3b_cmdrShot1 );
	$cmdrDeath1.cut ();
	wait ( 2 );
	thread animActor ( $fakeplayer , "conv-handsweep" , "idle" );

	waitfordialog ( $fakeplayer );

	cuecamera ( $cmdrDeath1 );

	$renegade_romulan.playdialog("localization/sound/dialog/m11l3/renrom_one.mp3", 1, 80000, 0); //I only need one.
	$renegade_romulan.animateonce  ( "suldok_one" );
	wait ( 2 );

	$cmdrDeath2.follow ( $m11l3b_cmdrShot2 );
	$cmdrDeath2.cut ();
	cuecamera ( $cmdrDeath2 );

	wait ( 1.5 );

	$cmdrDeath3.follow ( $m11l3b_cmdrShot3 );
	$cmdrDeath3.cut ();
	cuecamera ( $cmdrDeath3 );

	wait ( 4 );

	//waitforanimation ( $renegade_romulan , "suldok_one" );
	//$renegade_romulan.anim ( "suldok_death" );

	//allow earthquakes to shake cinematic cameras
	$world.canShakeCamera ( 1 );
	$finalEarthquake.magnitude ( .25 );
	$finalEarthquake.duration ( 10 );
	triggerentity ( $finalEarthquake );

	$archShot1.follow ( $m11l3b_archShot1 );
	$archShot1.cut ();
	cuecamera ( $archShot1 );

	wait ( 2 );

	$finalboss.ai_off ();
	$finalboss.origin ( '0.38 3746.42 -1105.88' );
	$finalboss.angles ( '0.00 104.79 0.00' );
	$finalboss.anim ( "raise" );
	$finalboss.show();

	wait ( 1.5 );

	$archShot2.follow ( $m11l3b_archShot2 );
	$archShot2.cut ();
	cuecamera ( $archShot2 );
	$world.canShakeCamera ( 0 );

	wait ( 2.5 );

	$archShot3.follow ( $m11l3b_archShot3 );
	$archShot3.cut ();
	cuecamera ( $archShot3 );

	$finalboss.anim ( "dropdown" );

	wait ( 1.5 );

	$archShot4.follow ( $m11l3b_archShot4 );
	$archShot4.cut ();
	cuecamera ( $archShot4 );

	wait ( 1.5 );

	$archShot5.follow ( $m11l3b_archShot5 );
	$archShot5.cut ();
	cuecamera ( $archShot5 );

	wait ( 1.5 );
	$finalboss.hide ();
	$fakeplayer.model ( "char/hazardteam_munro.tik" );
	wait ( .1 );
	$fakeplayer.morph( "exp_Skeptical" );
	wait ( .5 );


	$archShot6.follow ( $m11l3b_archShot6 );
	$archShot6.cut ();
	cuecamera ( $archShot6 );

	wait ( 1 );
	//$fakeplayer.morph( "exp_brows_down" );
	$fakeplayer.morph( "exp_Disgust" );

	wait ( 3.0 );

	thread commanderDestroyedCinematicEnd ();
}

void commanderDestroyedCinematicEnd ()
{
	cam_fadeout( .5, 0, 0, 0, 1, 0 );
	noncinematic ();
	clearletterbox ( .1 );
	killthread ( "commanderDestroyedCinematic" );
	$renegade_romulan.stopdialog ();
	$transitionCam.remove ();
	$fakeplayer.stopdialog ();

	//removefakeplayer (); //hzm coop mod chrissstrahl - n
	//hzm coop mod chrissstrahl - show actor
	$fakeplayer.hide();
	
	releaseplayer ();
	clearletterbox ( .1 );
	cueplayer ();

	cam_fadein( .5, 0, 0, 0, 1, 0 );
	$finalboss.hide ();
	$finalboss.anim ( "idle" );
	$finalboss.origin ( '0 0 0' );

	wait ( 2 );

	thread finalBoss_go();
	$finalboss.show ();
	maxTotalCreaturesKilled = 6;

	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$DefeatUberMorph$$","incomplete",2,1);
}

void resetSpawner ( entity spawner )
{
	wait ( SPAWNER_RESET_TIME );
	spawner.setfloatvar ( "notChoosable" , 0.0 );
}

entity chooseSpawnerBetweenRangeFromPlayer ( float near, float far)
{
	vector playerOrigin;
	entity toReturn , spawner;
	float i,spawnerDistance, lowestDistance;
	
	//hzm coop mod chrissstrahl - make compatible to multiplayer, some how...
	entity ePlayer;
	ePlayer = coop_returnMeARandomPlayer();
	playerOrigin = ePlayer.getorigin ();
	
	lowestDistance = near;
	//go through all available spawners and find the one horizontally closest to the player
	for ( i = 1 ; i <= TOTAL_SPAWNERS ; i++ )
	{
		spawner = getentity ( "spawner" + i );				//grab our spawner
		globalCommon_AssertEntity ( spawner , "^6chooseSpawnerClosestToPlayer(): $spawner" + i + " is null" );
		if ( spawner.getfloatvar ( "notChoosable" ) == 0 )		//don't bother checking if its not choosable
		{
			spawnerDistance = globalMath_GetXYDistance ( spawner.getorigin (), playerOrigin );
			if ( (spawnerDistance <= far) && (spawnerDistance >= near ))
			{
				lowestDistance = spawnerDistance;	//we've found a new lowest distance
				toReturn = spawner;
			}
		}
	}
	if ( doesEntityExist ( toReturn ))
		toReturn.setfloatvar ( "notChoosable" , 1 );	//flag it as in-use

	return toReturn;
}

entity chooseSpawnerClosestToPlayer ()
{
	vector playerOrigin;
	entity toReturn , spawner;
	float i,spawnerDistance, lowestDistance;
	
	//hzm coop mod chrissstrahl - make compatible to multiplayer, some how...
	entity ePlayer;
	ePlayer = coop_returnMeARandomPlayer();
	playerOrigin = ePlayer.getorigin ();

	lowestDistance = MAX_DISTANCE;
	//go through all available spawners and find the one horizontally closest to the player
	for ( i = 1 ; i <= TOTAL_SPAWNERS ; i++ )
	{
		spawner = getentity ( "spawner" + i );				//grab our spawner
		globalCommon_AssertEntity ( spawner , "^6chooseSpawnerClosestToPlayer(): $spawner" + i + " is null" );
		if ( spawner.getfloatvar ( "notChoosable" ) == 0 )		//don't bother checking if its not choosable
		{
			spawnerDistance = globalMath_GetXYDistance ( spawner.getorigin (), playerOrigin );
			if ( spawnerDistance < lowestDistance )
			{
				lowestDistance = spawnerDistance;	//we've found a new lowest distance
				toReturn = spawner;
			}
		}
	}
	if ( doesEntityExist ( toReturn ))
		toReturn.setfloatvar ( "notChoosable" , 1 );	//flag it as in-use
	return toReturn;
}

void spawnWait ( entity spawner )
{
	if ( !doesEntityExist ( spawner ))
	{
		print ( "^2No spawner\n" );
		return;
	}

	spawner.setspawnkeyvalue ( "hide" , "1" );
	spawner.setspawnkeyvalue ( "anim" , "lava-raise" );
	entity creature;
	if ( (totalCreaturesAlive + 1) < maxTotalCreaturesAlive )
	{
		creature = spawner.spawnnow ();
		wait ( .05 );
		if (doesEntityExist ( creature ))
		{
			creature.ai_off ();
			creature.notsolid ();
			creature.anim ( "lava-raise" );
			creature.show ();
			waitforanimation ( creature , "lava-raise" );

			creature.solid ();
			creature.ai_on ();

			creature.killthread ( "spawnWavesKillThread" );
			totalCreaturesAlive ++;
		}
	}
	thread resetSpawner ( spawner );
}

float currentCommanderLine = 1;
float currentBossLine = 1;

void randomCommanderDialog ()
{
	while ( isActorAlive ( "renegade_romulan" ))
	{
		if (currentCommanderLine == 1 )
		{
			$renegade_romulan.playdialog("localization/sound/dialog/m11l3/renrom_hopewin.mp3", 1, 80000, 0	); //This is a fight you cannot hope to win.
			waitForDialog( $renegade_romulan );
			currentCommanderLine++;
		}
		else if ( currentCommanderLine == 2 )
		{
			$renegade_romulan.playdialog("localization/sound/dialog/m11l3/renrom_luck.mp3", 1, 80000, 0); //Your luck has abandoned you.
			waitForDialog( $renegade_romulan );
			currentCommanderLine++;
		}
		else if ( currentCommanderLine == 3 )
		{
			$renegade_romulan.playdialog("localization/sound/dialog/m11l3/renrom_surr.mp3", 1, 80000, 0); //Surrender, and we promise to show you mercy.
			waitForDialog( $renegade_romulan );
			currentCommanderLine++;
		}
		else if ( currentCommanderLine == 4 )
		{
			$renegade_romulan.playdialog("localization/sound/dialog/m11l3/renrom_brainless.mp3", 1, 80000, 0); //Kill him, you brainless Exomorphs!
			waitForDialog( $renegade_romulan );
			currentCommanderLine++;
		}
		wait ( randomfloat ( 10 ) + 8 );
	}
}

void bossDialog ()
{
	float theStage;

	theStage = $finalboss.getstage();

	if (currentBossLine == 1 )
	{
		$finalboss.stopdialog ();
		$munro.stopdialog();
		$finalboss.playdialog("localization/sound/dialog/m11l3/final_eternal.mp3", 1, 10000 , 0); //You weaken, but I am eternal. I am perfection.
		waitForDialog( $finalboss );
		$munro.playdialog("localization/sound/dialog/m11l3/munro_justbug.mp3", 1, 10000 , 0); //You're just another bug.
		waitForDialog( $munro );
		currentBossLine++;
	}
	else if ( currentBossLine == 2 )
	{
		$finalboss.stopdialog ();
		$munro.stopdialog();
		$finalboss.playdialog("localization/sound/dialog/m11l3/final_more.mp3", 1, 10000 , 0); //Your attacks only create more of my warriors! I am perfection!
		waitForDialog( $finalboss );
		$munro.playdialog("localization/sound/dialog/m11l3/munro_smaller.mp3", 1, 10000 , 0); //You're still getting smaller!
		waitForDialog( $munro );
		currentBossLine++;
	}
	else if ( currentBossLine == 3 )
	{
		$finalboss.stopdialog ();
		$munro.stopdialog();
		$finalboss.playdialog("localization/sound/dialog/m11l3/final_comp.mp3", 1, 10000 , 0); //You have competence, but not perfection. You will fail.
		waitForDialog( $finalboss );
		$munro.playdialog("localization/sound/dialog/m11l3/munro_toy.mp3", 1, 10000 , 0); //You're just a toy of the Idryll!
		waitForDialog( $munro );
/*		$finalboss.playdialog("localization/sound/dialog/m11l3/final_extinct.mp3", 1, 10000 , 0); //Ha! I crushed the Idryll! They are extinct!
		waitForDialog( $finalboss );
		$munro.playdialog("localization/sound/dialog/m11l3/munro_failed.mp3", 1, 10000 , 0); //You failed at that, too. Not so perfect, are you?
		waitForDialog( $munro );
*/
		currentBossLine++;
	}
}

void spawnWaves ()
{
	entity spawner1,spawner2,spawner3;

	totalCreaturesKilled = 0;

	while ( (totalCreaturesKilled < maxTotalCreaturesKilled))
	{
		spawner1 = chooseSpawnerBetweenRangeFromPlayer (512,1024);
		spawner2 = chooseSpawnerBetweenRangeFromPlayer (512,1024);
		spawner3 = chooseSpawnerBetweenRangeFromPlayer (512,1024);

		thread spawnWait ( spawner1 );
		wait( 0.5 );
		thread spawnWait ( spawner2 );
		wait( 0.5 );
		thread spawnWait ( spawner3 );
		wait( 1 );

		while ( (totalCreaturesAlive >= maxTotalCreaturesAlive))
			wait ( .5 );

		wait ( 4 );
	}
}

void spawnWavesKillThread ()
{
	entity e;
	e=getcurrententity ();

	totalCreaturesKilled ++;
	totalCreaturesAlive --;

	print ( e.gettargetname () + " " + totalCreaturesKilled + " ::: " + totalCreaturesAlive + "\n" );
}

void runPowerupConsoles ()
{
	float currentConsole = 1;
	entity door,consoles,indicatorRed, indicatorGreen;

	while ( 1 )
	{
		door = getentity ( "powerupDoor" + currentConsole );
		consoles = getentity ( "powerupDoorTerminals" + currentConsole );
		indicatorRed = getentity ( "powerupDoorRed" + currentConsole );
		indicatorGreen = getentity ( "powerupDoorGreen" + currentConsole );

		$world.light_lightstyle ( "powerupDoorLight" + currentConsole , "z" , 0 );
		indicatorRed.hide ();
		indicatorGreen.show ();

		door.time ( 2 );
		door.playsound ( "sound/doors/drull_smldoor_01.wav" , 3 , .7 , 512 );

		door.movedown ( 116 );
		waitfor ( door );
		door.stopsound ();
		door.playsound ( "sound/doors/drull_smldoor_stop_01.wav" , 3 , .7 , 512 );
		wait ( 15 );

		$world.light_lightstyle ( "powerupDoorLight" + currentConsole , "a" , 0 );
		indicatorRed.show ();
		indicatorGreen.hide ();

		wait ( 3 );

		door.time ( 2 );
		door.playsound ( "sound/doors/drull_smldoor_01.wav" , 3 , .7 , 512 );
		door.moveup ( 116 );
		waitfor ( door );

		door.stopsound ();
		door.playsound ( "sound/doors/drull_smldoor_stop_01.wav" , 3 , .7 , 512 );

		currentConsole ++;
		if ( currentConsole == 5 )
			currentConsole = 1;
	}
}


//random earthquakes + debris
void earthquakes ()
{
	entity quake,debris;
	vector _origin,forward;
	float fX, fY, fZ, sign;


	float ramdomQuakeIntensity;
	float randomQuakeLength;

	quake = spawn ( "func_earthquake" , "targetname" , "rockDebrisQuake" );
	
	//hzm coop mod chrissstrahl - make compatible to multiplayer, some how...
	entity ePlayer;

	while ( 1 )
	{
		wait ( randomfloat ( 10 ) + .05 );
		
		//hzm coop mod chrissstrahl - get a random player, to spawn a cavein effect near
		ePlayer = coop_returnMeARandomPlayer();
		
		_origin = ePlayer.getorigin();
		quake.origin ( _origin );

		ramdomQuakeIntensity = randomFloat( .5 ) + .1;
		randomQuakeLength = randomFloat( .4 ) + .4;

		quake.duration( ramdomQuakeIntensity );
		quake.magnitude( ramdomQuakeIntensity );

		triggerentity ( quake );

		wait ( .25 );

		debris = spawn ( "script_model" ,
						 "model" , "models/fx/fx-explosion-debris-rocks-dust-brown.tik",
						 "angles" , "-90 0 0" );
		
		//hzm coop mod chrissstrahl - make this work in multiplayer
		if(doesEntityExist(ePlayer)){
			forward = vectorforward ( ePlayer.getangles() );
		}

		fX = vectorgetx ( forward );
		fY = vectorgety ( forward );

		if ( randomint ( 2 ) == 1 )
		{
			sign = -1;
			fX *= -1;
		}

		fX *= randomfloat ( 1024 );
		fY *= randomfloat ( 1024 );

		fX += vectorgetx ( _origin );
		fY += vectorgety ( _origin );

		fX += ( sign * 256 );

		fZ = vectorgetz ( _origin );
		fZ += 1024;

		forward = _origin;
		_origin = vectorsetx ( _origin , fX );
		_origin = vectorsety ( _origin , fY );
		_origin = vectorsetz ( _origin , fZ );
		debris.origin ( _origin );
	}
}

void lavaJet ()
{
	entity caller,jet;
	vector v;

	caller = getcurrententity ();

	jet = spawn ( "script_model" );
	wait ( .05 );
	v = caller.getorigin ();

	v_z += 150;

	jet.origin ( v );

	wait ( .8 );
	jet.model ( "models/fx/fx-explosion-lavaburst-creature.tik" );

	wait ( 2 );
	jet.remove ();
}

void finalBoss_stage5_begin_snakeanim( entity snake )
{
	snake.anim( "stage4-end" );
	waitforanimation( snake, "stage4-end" );
	snake.remove();
}

void tryToRemoveAllMonsters()
{
	float f;
	stuffcmd ( "removeclass Projectile\n" );

	for( f = 0; f < 4; f++ )
	{
		killthread( "spawnWaves" );
		killthread( "spawnWait" );
		removeactorsnamed( "Crab" );
		wait( 0.5 );
	}
}

void incrementStageCinematic()
{
	if ( $finalboss.gethealth () <= 0 )
		return;

	cam_fadeout( .5, 1, 1, 1, 1, 0 );
	wait ( 1 );
	cinematic ();
	letterbox ( .1 );
        allowMusicDucking( 0 );
	wait ( .5 );
	freezeplayer ();
	level_ai ( 0 );
	thread tryToRemoveAllMonsters();

	spawn ( "Camera" , "targetname" , "transitionCam" );
	$munro.origin ( '-252.71 4646.12 -1055.96' );
	$munro.angles ( '0.00 298.28 0.00' );
	wait ( .05 );
	$finalboss.ai_off ();
	$finalboss.nodamage ();
	$finalboss.origin ( '0.38 3746.42 -1105.88' );
	$finalboss.angles ( '0.00 104.79 0.00' );
	$finalboss.show();
	$munro.show ();

	thread bossDialog();
	wait ( .5 );

	//$transitionCam.fov ( 70 );

	vector v;
	v = $finalboss.getangles ();
	if ( $finalboss.getstage() == 1 )
	{
	//	globalCineFX_CameraPathRotate ( $m11l3b_transitioncam1 , v_y , '0.38 3746.42 -1105.88' ,$finalboss.getorigin ());
		$transitionCam.follow ( $m11l3b_transitioncam1 );
                forcemusic ("aux2","action");
	}
	else if ( $finalboss.getstage() == 2 )
	{
	//	globalCineFX_CameraPathRotate ( $m11l3b_transitioncam2 , v_y , '0.38 3746.42 -1105.88' ,$finalboss.getorigin ());
		$transitionCam.follow ( $m11l3b_transitioncam2 );
                forcemusic ("aux3","action");
	}
	else if ( $finalboss.getstage() == 3 )
	{
	//	globalCineFX_CameraPathRotate ( $m11l3b_transitioncam3 , v_y , '0.38 3746.42 -1105.88' ,$finalboss.getorigin ());
		$transitionCam.follow ( $m11l3b_transitioncam3 );
                forcemusic ("aux3","action");
	}

    spawn ( "script_model" , "model" , "models/fx/fx-explosion-lavaburst-creature.tik" , "targetname" , "bossburst" );
    wait ( .1 );


	$transitionCam.cut ();
	cuecamera ( $transitionCam );
	cam_fadein( .5, 1, 1, 1, 1, 0 );
	wait ( .25 );

	$finalboss.anim ( "dropdown" );

	$bossburst.origin ( $finalboss.getorigin () );
	$bossburst.scale ( 16 );

	//waitforanimation ( $finalboss , "dropdown" );
	wait ( 4.25 );
	$finalboss.hide ();
	$bossburst.remove ();

	cam_fadeout( .5, 1, 1, 1, 1, 0 );
	wait ( .5 );

	clearletterbox ( .1 );
	releaseplayer ();

	cueplayer();
	noncinematic ();
	level_ai ( 1 );

	$finalboss.ai_on ();
	$finalboss.show ();
	cam_fadein( .5, 1, 1, 1, 1, 0 );

	$transitionCam.remove ();
	$munro.hide ();
	$munro.notsolid ();
	$finalboss.takedamage ();
}

void lavaBursts ()
{
	while ( 1 )
	{
		triggerentity ( $finalLavaburst6 );
		wait ( randomint ( 2 ));
		triggerentity ( $finalLavaburst7 );
		wait ( randomint ( 3 ));
		triggerentity ( $finalLavaburst8 );
		wait ( randomint ( 3 ));
	}

}
//---------------------------
void finalBoss_killthread()
{
	entity snake, munro, cam1, cam2;

	// get rid of any monsters hanging around
	thread tryToRemoveAllMonsters();
	killthread ( "incrementStageCinematic" );
	$finalboss.stopdialog ();
	$munro.stopdialog ();

	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$DefeatUberMorph$$","complete",2,1);

	cam1 = spawn( "Camera", "targetname", "cam1" );
	cam2 = spawn( "Camera", "targetname", "cam2" );
	spawn ( "Camera" , "targetname" , "cam3" );

	wait( 0.05 );

	cam_fadeout( 0.5, 0, 0, 0, 1 );

	wait( 0.7 );

	$finalboss.remove();
	freezeplayer ();
	//fakeplayer ();//hzm coop mod chrissstrahl - not working
	//hzm coop mod chrissstrahl - alternative/hack
	$fakeplayer.show();
	
	
	//$player.warpto ( "fakeplayerEntranceNode" );//hzm coop mod chrissstrahl - doesn't matter
	
	cinematic();
        allowMusicDucking( 0 );
    forcemusic ("aux4");

	letterbox( 0.05 );
	$fakeplayer.model ( "models/char/hazardteam_munro.tik" );
	
	//hzm coop mod chrissstrahl - kill attach, this is much cleaner and less crashier way
	$fakeplayer.killattach ();

	snake = spawn( "char/alien-type6-snake.tik", "origin", "-160.38 4246.42 -1140.88", "angles", "0.00 104.79 0.00" , "scale" , "1.7" );
	$fakeplayer.origin ( '-252.71 4646.12 -1055.96' );
	wait ( 0.05 );
	$fakeplayer.turntoangle ( 300 );
	wait( 0.05 );

	snake.ai_off();

	snake.surface( "material12", "+nodraw" );
	snake.surface( "material11", "+nodraw" );
	snake.surface( "material10", "+nodraw" );

	thread finalBoss_stage5_begin_snakeanim( snake );
	$munro.anim( "idle" );


	//allow earthquakes to shake cinematic cameras
	$world.canShakeCamera ( 1 );
	$finalEarthquake.magnitude ( .5 );
	$finalEarthquake.duration ( 30 );
	triggerentity ( $finalEarthquake );

	cam1.follow( $m11l3b_archDeathShot1 );
	cam1.cut();
	cuecamera( cam1 );

	//---------------- go
	cam_fadein( 0.5, 0, 0, 0, 1 );
	wait ( 1 );
	thread lavaBursts ();

//	$world.time_scale ( .5 ); //hzm coop mod chrissstrahl, creates nasty lag in mp, don't do it
	triggerentity ( $finalRockBurst4 );
	wait ( 7 );
	$finalLavaburst5.scale ( 1 );

//	$world.time_scale ( .35 ); //hzm coop mod chrissstrahl, creates nasty lag in mp, don't do it
	cam2.follow( $m11l3b_archDeathShot2 );
	cam2.cut();
	cuecamera( cam2 );

	wait ( 1 );

	$fakeplayer.playsound ( "sound/chars/finalboss/final_lavasplash.wav" , 1, 1, 10000 );
	snake.playsound ( "sound/chars/finalboss/final_pre3.wav" , 2, 1, 10000 );

	$finalLavaburst5.origin ( snake.getorigin () );
	triggerentity ( $finalLavaburst5 );

	cam1.follow( $m11l3b_archDeathShot3 );
	cam1.cut();
	cuecamera( cam1 );

	wait ( 2 );
//	$world.time_scale ( 1.0 );  //hzm coop mod chrissstrahl, creates nasty lag in mp, don't do it

	cam2.fov ( 40 );
	cam2.follow( $m11l3b_stage4death_3 );
	cam2.cut();
	cuecamera( cam2 );

	$fakeplayer.stopdialog();
	$fakeplayer.playdialog("localization/sound/dialog/m11l3/munro_sodamn.mp3", 1 , 10000 , 0); //Not so damn perfect now.

	triggerentity ( $finalRockBurst1 );

	waitForDialog( $fakeplayer );

	$fakeplayer.headwatch ( $finalRockBurst2 );

	$fakeplayer.anim ( "tap_comm" );
	waitforanimation ( $fakeplayer , "tap_comm" );
	$fakeplayer.anim ( "idle" );

	triggerentity ( $finalLavaburst1 );

	$fakeplayer.headwatch ( cam2 );
//	wait ( 1.5 );

	triggerentity ( $finalRockBurst2 );

//	$fakeplayer.turntoangle ( 120 );

	triggerentity ( $finalLavaburst3 );
	triggerentity ( $finalLavaburst5 );
//	wait ( 1.5 );
//	$fakeplayer.turntoangle ( 300 );
//	$world.time_scale ( 1.0 );


	$finalPlatform.time ( 5 );
	$finalPlatform.movedown ( 64 );
	triggerentity ( $finalRockBurst1 );
	triggerentity ( $finalRockBurst2 );

	wait ( .5 );
	triggerentity ( $finalLavaburst3 );

	$finalRock.time ( 2.3 );
	$finalRock.movedown ( 1900 );

	$fakeplayer.displayeffect ( "TransportOut" , "Federation" );
	$fakeplayer.fadeout ( 2.0 );

	wait ( .5 );
	$fakeplayer.headwatch ( $finalRock );
	wait ( .5 );

	//$world.time_scale ( .5 );

	wait ( .25 );
	triggerentity ( $finalRockDebris );
	$fakeplayer.playsound ( "sound/environment/rock/bigrock.wav" , 1, 1, 1000 );

	wait ( .75 );

	//----------------- stop
	cam_fadeout( 1, 0, 0, 0, 1 );
	//$world.time_scale ( 1 );  //hzm coop mod chrissstrahl, creates nasty lag in mp, don't do it
	wait( 3 );

	thread finalBoss_end();
}

void rotatePanelUp ( entity panel , float num )
{
	panel.time ( 3 );
	panel.setfloatvar ( "open" , 1 );
	if ( num == 1 )
	{
		panel.rotateZup ( 90 );
	}
	else if ( num == 2 )
	{
		panel.rotateZup ( 90 );
		panel.rotateYDown ( 45 );
	}
	else if ( num == 3 )
	{
		panel.rotateZup ( 90 );
		panel.rotateYUp ( 45 );
	}
	waitfor ( panel );
}

void rotatePanelDown ( entity panel , float num )
{
	panel.time ( 3 );
	if ( num == 1 )
	{
		panel.rotateZdown ( 90 );
	}
	else if ( num == 2 )
	{
		panel.rotateZdown ( 90 );
		panel.rotateYup ( 45 );
	}
	else if ( num == 3 )
	{
		panel.rotateZdown ( 90 );
		panel.rotateYdown ( 45 );
	}
	waitfor ( panel );
	panel.setfloatvar ( "open" , 0 );
}

void shieldPanelDisabled ()
{
	entity caller,panel,photonEmitter;
	float i,num;

	//stored on our trigger_multiple
	caller = getcurrententity ();

	if ( caller.gethealth () <= 0 )
	{
		caller.notsolid ();
		num = caller.getfloatvar ( "uservar1" );

		panel = getentity ( "shieldPanel" + num);
		photonEmitter = getentity ( "photonEmitter" + num );

		maxTotalCreaturesAlive = 3;
		thread spawnWaves ();

		//raise the shield panel
		rotatePanelUp ( panel , num );
		panel.notsolid ();

		//fire a few volleys at the player
		for ( i = 0 ; i < 4 ; i++ )
		{
			photonEmitter.projectileattackentity (  "models/projectile/projectile_rom-photonball-boss.tik" , coop_returnMeRandomPlayerTargetName() , 10 , 5 );
			wait ( 1.5 );
		}

		wait ( 2 );

		panel.solid ();
		//reset shield panel
		rotatePanelDown ( panel, num );

		caller.solid ();
		caller.health ( 100 );
	}
	thread globalCommon_OnDamage ( caller , "shieldPanelDisabled" );
}

void shieldPanelOpen ( float num)
{
	entity panel,photonEmitter;
	float i;

	panel = getentity ( "shieldPanel" + num);
	photonEmitter = getentity ( "photonEmitter" + num );

	maxTotalCreaturesAlive = 2;
	thread spawnWaves ();

	//raise the shield panel
	rotatePanelUp ( panel , num );
	panel.notsolid ();

	$renegade_romulan.anim ( "suldok_buttons" );
	waitforanimation ( $renegade_romulan , "suldok_buttons" );
	$renegade_romulan.anim ( "suldok_sit" );

	//fire a few volleys at the player
	for ( i = 0 ; i < 4 ; i++ )
	{
		photonEmitter.projectileattackentity (  "models/projectile/projectile_rom-photonball-boss.tik" , coop_returnMeRandomPlayerTargetName() , 10 , 5 );
		wait ( 1.5 );
	}

	wait ( 2 );

	panel.solid ();
	//reset shield panel
	rotatePanelDown ( panel, num );
}
void monitorCommanderHealth ()
{
	spawn ( "Actor" , "targetname" , "fakeboss" , "Name" , "$$RenegadeCommander$$"  );
	wait ( .05 );

	$fakeboss.maxbosshealth ( 500 );
	$fakeboss.updatebosshealth ( 1 );
	$fakeboss.ai_on();


	while ( $renegade_romulan.gethealth () > 1 )
	{
		wait ( .25 );
		$fakeboss.health ( $renegade_romulan.gethealth () );
	}

	$fakeboss.remove ();

	killthread ( "runShieldPanelAttack" );
	thread commanderDestroyedCinematic();
}
void runShieldPanelAttack ()
{
	float i = 1;
	$renegade_romulan.health ( 500 );
	$renegade_romulan.addcustomthread ( "damaged" , "commanderPain" );

	thread monitorCommanderHealth ();
	while ( 1 )
	{
		$renegade_romulan.solid ();
		shieldPanelOpen ( i );
		$renegade_romulan.notsolid ();
		wait ( 2 );
		i++;
		if ( i > 3 )
			i = 1;
	}
}

void commanderPain ()
{
	$renegade_romulan.anim ( "suldok_death" );
	wait ( .45 );
	$renegade_romulan.anim ( "suldok_sit" );
}

void test()
{
	string bridge;

	float i;
	string prefixname;

	bridge = "explodingBridge1";
	for( i = 1; i <= 2; i++ )
	{
		prefixname = bridge + "_" + i + "_";
		print( prefixname + "\n" );
		disconnectAllPathNodesInGrid( prefixname, 2, 2 );
	}

	bridge = "explodingBridge2";
	for( i = 1; i <= 2; i++ )
	{
		prefixname = bridge + "_" + i + "_";
		print( prefixname + "\n" );
		disconnectAllPathNodesInGrid( prefixname, 2, 2 );
	}
}

// disconnects two path nodes from eachother where the two nodes are members of a properly named grid.
// all nodes' targetnames must be formed with a basename (like "hallnode") followed with a number.
// number nodes starting at 1 (NOT '01'), and number them top-down, left right (so 2 will be on the next row, one down; NOT
//	on the next column, one over)
void disconnectPathNodesInGrid( string basename, float width, float height, float colA, float rowA, float colB, float rowB )
{
	float indexA;
	float indexB;
	string nameA;
	string nameB;

	if( rowA < 0 || rowB < 0 || colA < 0 || colB < 0 )
		return;
	if( rowA >= height || rowB >= height || colA >= width || colB >= width )
		return;

	indexA = (colA * height) + rowA + 1;
	indexB = (colB * height) + rowB + 1;

	nameA = basename + indexA;
	nameB = basename + indexB;

	disconnectPathNodes( nameA, nameB );
	disconnectPathNodes( nameB, nameA );
	//print( indexA + "," + indexB + ": " + nameA + " - " + nameB + "\n" );
}

void disconnectAllPathNodesInGrid( string basename, float width, float height )
{
	float col;			// loop counter
	float row;			// loop counter
	float width;		// how many nodes there are in the grid
	float height;		// how many columns there are in the grid
	string basename;	// the prefix targetname of all the pathnodes

	for( col = 0; col < width; col++ )
	{
		for( row = 0; row < height; row++ )
		{
			disconnectPathNodesInGrid( basename, width, height, col, row, col + 1, row - 1 );	// ne
			disconnectPathNodesInGrid( basename, width, height, col, row, col + 1, row );		// e
			disconnectPathNodesInGrid( basename, width, height, col, row, col + 1, row + 1 );	// se

			disconnectPathNodesInGrid( basename, width, height, col, row, col, row - 1 );		// n
			disconnectPathNodesInGrid( basename, width, height, col, row, col, row + 1 );		// s

			disconnectPathNodesInGrid( basename, width, height, col, row, col - 1, row - 1 );	// nw
			disconnectPathNodesInGrid( basename, width, height, col, row, col - 1, row );		// w
			disconnectPathNodesInGrid( basename, width, height, col, row, col - 1, row + 1 );	// sw
		}
	}
}


void finalBoss ()
{
	$finalboss.ai_off ();
	$finalboss.origin ( '0.38 3746.42 -1105.88' );
	$finalboss.angles ( '0.00 104.79 0.00' );
	$finalboss.anim ( "raise" );
	waitforanimation ( $finalboss , "raise" );
	$finalboss.anim ( "dropdown" );
	$finalboss.show();
}

void finalBossTransition ()
{
	$finalboss.anim ( "dropdown" );
	$finalboss.show();
	$finalboss.origin ( '0.38 3746.42 -1105.88' );
	$finalboss.angles ( '0.00 104.79 0.00' );
}

float firstTime = 0;
void finalBossDeath ()
{
	if ( firstTime == 0 )
	{
		spawn ( "Actor" , "model" , "models/char/hazardteam_munro.tik" , "ai_off" , "1" , "targetname" , "asdf" );
		wait ( .05 );
		firstTime = 1;
	}

	$finalboss.show ();
	$finalboss.origin ('-160.38 4246.42 -1140.88' );
	$finalboss.angles ( '0.00 104.79 0.00' );
	$finalboss.anim( "stage4-end" );

	$asdf.origin ( '-252.71 4646.12 -1055.96' );
	$asdf.angles ( '0 300 0' );
	
	//hzm coop mod chrissstrahl - remove any active weapon
	$asdf.killattach();
}

void suldok ()
{
	$renegade_romulan.anim ( "suldok_pain" );
	wait ( 1 );

	$fakeplayer.playdialog("localization/sound/dialog/m11l3/munro_stuck.mp3", 1, 80000, 0); //The Master Control Facility is stuck in first gear. You need thousands of Exomorphs, and you only have a handful.
	waitfordialog ( $fakeplayer );


	$renegade_romulan.playdialog("localization/sound/dialog/m11l3/renrom_one.mp3", 1, 80000, 0); //I only need one.
	$renegade_romulan.animateonce  ( "suldok_one" );
	//waitforanimation ( $renegade_romulan , "suldok_one" );
	//$renegade_romulan.animateonce ( "suldok_death" );
}

string coop_returnMeRandomPlayerTargetName()
//------------------------------------------------------------------------------
//returns the targetname of a random player - used for scripted attacks of lava balls^^
//------------------------------------------------------------------------------
{
	entity ePlayer;
	ePlayer = coop_returnMeARandomPlayer();
	return ""+ePlayer.getTargetName();
}

entity coop_returnMeARandomPlayer()
//------------------------------------------------------------------------------
//returns a random player - used for the blitz to impact upon the player
//------------------------------------------------------------------------------
{
	entity ePlayer, eRandomPlayer;
	float fExistingPlayers=-1;//want it to start at 0 later in script, see bellow
	float fRandom;
	float fPlayerIdInUse;
	float fTries;
	
	//grab each player and put it in a kind of array	
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getentity("player"+ fPlayerIdInUse);
		if(globalCoop_check_existingLivingEntity(ePlayer)){
			if(!globalCoop_check_playerSpectator(ePlayer)){
				fExistingPlayers++;
				$world.setFloatVar("hatoria_activeplayer"+fExistingPlayers,fPlayerIdInUse);
			}
		}	
	}
	
	//grab a random player id from this kinda array, try 6 times
	if( fPlayerIdInUse > 0 )//only access if there is a player
	{
		for(fTries=6;fTries>0;fTries--){
			fRandom = randomint(fExistingPlayers);
			fPlayerIdInUse = $world.getFloatVar("hatoria_activeplayer"+fRandom);
			ePlayer = getentity("player"+ fPlayerIdInUse);
			if(globalCoop_check_existingLivingEntity(ePlayer)){
				if(!globalCoop_check_playerSpectator(ePlayer)){
					fTries = 0;
					eRandomPlayer = ePlayer;
				}
			}
		}
	}
	
	//return the world if no player could be found
	if(!doesEntityExist(eRandomPlayer)){
		eRandomPlayer = $world;
	}
	return eRandomPlayer;
}

void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	//stuffcmd("seta coop_igm 7\n");//set mission number
	//stuffcmd("seta coop_igmH 0\n");//set spawn in holodeck
	//globalCoop_main_waitAFrame();
	//stuffcmd("seta coop_igmT 0\n");//set spawn in turbolift
	//stuffCMD("seta coop_igmR 0\n");//set rooms visited
	//setfloatvar("game.globalMissionEnterprise",7);
	thread globalCoop_mission_completed("m12-end");
}




