void main ();
void intro();
void intro_skip();
void intro_end();
void setupShuttleFed();
void setupEvoSuit();
void setupAirlock();
void setupActor(entity eActor,string sAnim);
void setupClips();
void setupActors();
void setupArrays();


void coop_airlockInsideUse();
void coop_airlockOutsideUse();

void door_unlock();

void klingonStation_IntroCinematicDoor();
void klingonStation_cargobayAirlockScene();
void klingonStation_cargobayPowerCoup();
void klingonStation_cargobayDistNode();
void klingonStation_hallwayKlingonSellerTalk();
void klingonStation_hallwayKlingonFriendTalk();
void klingonStation_barBattlearenaLoser();
void klingonStation_barRomulanFound();
void klingonStation_shuttlebayFerengieTakeoff();
void klingonStation_cinematicBorgArrive();
void klingonStation_barEnterCinematic();
void klingonStation_barEnterCinematicEnd();
void klingonStation_hallwayConsoleExplode();
void klingonStation_hallwayTubeExplode();
void klingonStation_PDA();


void borgCube_entranceTransport();
void borgCube_exitTransport();
void borgCube_enterCube();
void borgCube_droneMurdered();
void borgCube_chellWork_timer();
void borgCube_chellWork();
void borgCube_npcBeamIn();
void borgCube_gravunitPath1End();
void borgCube_gravunitPath2End();
void borgCube_gravunitLightBlink(entity eLight);
void borgCube_torpedo0Ready();
void borgCube_torpedo1Ready();
void borgCube_tricorderPuzzle0();
void borgCube_resetTricorderPuzzle0();
void borgCube_tricorderPuzzle1();
void borgCube_resetTricorderPuzzle1();

float KLINGONSTATION_ROMULANFOUND = 0;
float BORGCUBE_CHELLWORKING = 1;
float MAX_ARRAY_WINGS = 3;
float MAX_ARRAYS = 6;
//float MAX_FWD_SPEED = 99999;

//ACTOR_FLAG_USE_GRAVITY
//STEPMOVE_BLOCKED_BY_DOOR -> _isBlockedByDoor
//STEPMOVE_BLOCKED_BY_FALL
//STEPMOVE_STUCK
//vectorleft( Vector vector ) -> Returns the left vector of the vector. 

//#include "maps/scrtools/scriptingtools.scr"
//#include "maps/scrtools/noscript.scr"

#include "coop_mod/matrix/main.scr"
#include "coop_mod/matrix/evosuit.scr"
void	coop_endLevel();

#include "maps/global_scripts/global_math.scr"
#include "maps/global_scripts/global_acceleratedMovement.scr"

#include "maps/global_scripts/global_debugutils.scr"
#include "maps/global_scripts/global_tricorderbase.scr"
#include "maps/global_scripts/global_tricordermod.scr"


/* Effects for 
spawn models/projectile/projectile_merc-pistol.tik
spawn models/projectile/projectile_fedphotonball.tik
spawn models/projectile/projectile_attrex-security-pistol.tik
spawn models/projectile/projectile-snake-laserbeam.tik
spawn models/projectile/projectile-photonball-voyager.tik
spawn models/projectile/projectile-photonball-borg.tik
spawn models/projectile/projectile-laserbeam.tik
spawn models/projectile/projectile-klingon-rig-arm.tik
spawn models/projectile/projectile-idryllstrike.tik //this one actually strikes towards a angle over and over again
spawn models/projectile/projectile-idryll-blast2.tik //looks kinda like a wormhole effect
spawn models/projectile/projectile-idryll-blast.tik //looks kinda like a wormhole effect


*/


void ffTouchedClearShader(entity ePlayer)
{
	wait(1);
	if(doesEntityExist(ePlayer)){
		ePlayer.clearcustomshader("electriclines");
	}
}

void ffTouched()
{
	entity e;
	e = getCurrentEntity();
	if(doesEntityExist(e)){
		e.noTouch(); //make stop calling this thread

		float fTurnNonSol;
		float fRunningWithScissors=1;
		while(fRunningWithScissors){
			fRunningWithScissors = 0;
			if(doesEntityExist(e)){
				entity ePlayer;
				float fPlayerIdInUse;
				for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
					ePlayer = getEntity("*"+ fPlayerIdInUse);
					if(doesEntityExist(ePlayer)){
						//check all players touching this trigger
						if(globalCoop_check_isEntityInsideOfEntity(ePlayer,e,1)){
							fRunningWithScissors=1;
							if(ePlayer.getHealth() > 0 && ePlayer.isSpectator() != 1){
								if(coop_evosuit_playerEquiped(ePlayer) == 1 || coop_evosuit_spaceWorthy(ePlayer)){
									e.notSolid();
									ePlayer.setcustomshader("electriclines");
									thread ffTouchedClearShader(ePlayer);
									//print("NOT SOLID\n");
								}
							}
						}
					}
				}
			}
			else{
				print("ENTITY MISSING\n");
				return;
			}
			globalCoop_main_waitAFrame();
		}
		thread globalCoop_level_onTouch(e,"ffTouched");
		e.solid();
		//print("MADE SOLID\n");
	}
}


//handle borg boss
float fltBossStage = 1;
void stage_change_cinema_start()
{
	//--- increment the stage counter
	fltBossStage++;

    //--- set the boss into the next stage
    $boss1.ai_off();
    $boss1.goToStage( fltBossStage );
	//--- wait for the stage transition
	wait ( .5 );

    //--- enable the borg boss's AI
    $borg1.ai_on();
}


void testCam1End()
{
	
}

void main ()
{
	//fade cam in
	cam_fadeOut(0.05,0,0,0,1);
	
	coop_string_levelAuthor = "Luke Sutton, Chrissstrahl";
	
	//hzm coop mod chrissstrahl - declare objectives - english
	coop_string_objectiveItem1 = "$$Rotec9SecureFriendlyRomulan$$";
	coop_string_objectiveItem2 = "$$Rotec9ChallengeKlingonToGetBatleth$$";
	coop_string_objectiveItem3 = "$$Rotec9DefendStation$$";
	coop_string_objectiveItem4 = "$$Rotec9ObtainEvosuitInCargobay$$";
	coop_string_objectiveItem5 = "$$Rotec9InfiltrateBorgCube$$";
	coop_string_objectiveItem6 = "$$Rotec9ProtectChell$$";
	coop_string_objectiveItem7 = "$$Rotec9DefendDemolitionTeams$$";
	coop_string_objectiveTacticalInfo1 = "$$Rotec9Story";


	//coop_string_weapon2 = "models/weapons/worldmodel-Phaser-stx.tik";
	coop_string_weapon1 = "models/weapons/worldmodel-Tricorder-stx.tik";
	
	coop_string_weapon8 = "models/weapons/worldmodel-Batleth.tik";


	setupEvoSuit();
	setupShuttleFed();
	setupAirlock();

	//$world.physicsvar ( "gravity" , 250 );
	$world.physicsvar ( "maxspeed" , 250 );
	$world.physicsvar ( "airaccelerate" , 1.5 );
	//MAX_FWD_SPEED = $world.getPhysicsVar("maxspeed");
	
	setupClips();
	setupActors();
	setupArrays();
	
	$klingonAirductAreaportal.closePortal();
	
	$klingonStation_cargobayPowerCoup.contents("+shootable");
	$klingonStation_cargobayDistNode.contents("+shootable");
	thread globalCoop_level_onDamage($klingonStation_cargobayPowerCoup,"klingonStation_cargobayPowerCoup");
	thread globalCoop_level_onDamage($klingonStation_cargobayDistNode,"klingonStation_cargobayDistNode");
	
	
//REMOVE EM FOR EVO SUIT TESTING
/*
	$klingonAirlockActor0.remove();
	$klingonAirlockActor1.remove();
	$KlingonAirlockActPlayerClip.remove();
	$klingonStation_cargobayAirlockSceneTrigger.remove();
	*/
	
	
	entity e;
	string sForceFieldName;
	float iForceFieldCurNum = 13;
	
	sForceFieldName = "forcefield0Collision";
	print("ForceField: Running setup for "+sForceFieldName+"\n");
	e = getEntity(sForceFieldName +""+ iForceFieldCurNum);
	while(doesEntityExist(e)){
		e.solid(); //makesolid - was notsolid to allow ai passing trough
		thread globalCoop_level_onTouch(e,"ffTouched");
		iForceFieldCurNum++;
		//e.hide();
		e = getEntity(sForceFieldName +""+ iForceFieldCurNum);
	}
	print("ForceField: SETUP - $"+sForceFieldName+""+iForceFieldCurNum+" not found, assuming setup is complete.\n");
	
	
	//[b60025] chrissstrahl - make sure objects don't fade to early
	$world.entity_fade_dist( 16000 );
	
	//[b60025] chrissstrahl - hide cube
	$cubePortal.closePortal();
	
	//start cinematic
	thread intro();
	
	//$borgCube_gravNode.speed(200);
	
	
	wait(3);
	
	//remove unwanted texture from mission marker model
	$objectiveMarker0.surface("material1", "+nodraw" );
	$objectiveMarker1.surface("material1", "+nodraw" );
	$objectiveMarker2.surface("material1", "+nodraw" );
	
	vector vPos;
	vPos = $chell.getOrigin();
	vPos_z += -50;
	$objectiveMarker2.origin(vPos);
	wait(0.1);
	$objectiveMarker2.bind($chell);
	
	//ready torpedo puzzles
	wait(1);	
	
	$borgCube_generator0.rotateX(5);
	$borgCube_generator0.time(5);
	$borgCube_generator1.rotateX(5);
	$borgCube_generator1.time(5);
	
	return;
	while(1)
	{
		//$klingonForcefieldShuttlebay.setobjectparms(66.9,0);
		$klingonForcefieldShuttlebay.mask("-weaponclip");
		wait(4);
		//$klingonForcefieldShuttlebay.setobjectparms(33,0);
		$klingonForcefieldShuttlebay.mask("+weaponclip");
		wait(4);
	}
}

void intro()
//intro cinematics
{
	spawn("camera","targetname","cam1");
	
	globalCoop_main_waitForWarmupTime();
	globalCoop_main_waitAFrame();
	
	//=======================================
	//=======================================
	//fade cam in
	cam_fadeIn(0.25,0,0,0,1);
	centerprint("INTRO SKIPPED\n");
	
	return; //skip this during development
	//=======================================
	//=======================================
	//=======================================
	

	cinematic();
	freezeplayer();
	letterbox(0.1);
	
	//hzm coop mod chrissstrahl - this is only for sp
	if(getCvarInt("g_gametype") == 0){
		$player.hide();
		$player.notsolid();		
	}
	$cam1.follow($klingonStation_shuttleCinematic);
	$cam1.cut();
	globalCoop_main_waitAFrame();
	cuecamera($cam1);
	
	//fade cam in
	cam_fadeIn(0.25,0,0,0,1);
	
	$shuttleFederationOrigin1.moveup(80);
	$shuttleFederationOrigin1.moveBackward(1000);
	$shuttleFederationOrigin1.time(0.25);
	
	//shuttle move
	wait(11);
	$t303.playsound( "sound/coop_mod/shuttle_land5.wav", 1, 1, 512 );
	thread globalAccelMove( $shuttleFederationOrigin1, '1000 0 -80', 5, "rampdown", "" );
	wait(5);
	
	skipthread("");
	wait(1.5);
	
	cam_fadeout(1, 0, 0, 0, 1, 0 );
	wait(1);
	thread intro_end();
}

void intro_skip()
{
	
	killthread("intro");
	cam_fadeout( 0.5, 0, 0, 0, 1, 0 );
	
	
	wait(0.5);	
	$shuttleFederationOrigin1.stopsound();
	$shuttleFederationOrigin1.movetopos('-219 534 96');
	$shuttleFederationOrigin1.time(0.15);
	
	thread intro_end();
}

void intro_end()
{
	//end cinematic
	noncinematic();
	clearletterbox(0.1);
	cueplayer();
	//hzm coop mod chrissstrahl - this is only for sp
	if(getCvarInt("g_gametype") == 0){
		$player.show();
		$player.solid();		
	}
	
	wait(1.5);
	releaseplayer();
	cam_fadein( 2, 0, 0, 0, 1, 0 );
	
	//remove camera path
	thread globalCoop_level_removePath($klingonSpaceStationCinematic);
}

void klingonStation_IntroCinematicDoor()
//opens the door for the camera
{
	$klingonStation_shuttlebayDoor.open($world);
}

void klingonStation_hallwayCinematicTalking()
{
	$klingonStation_hallwayKlingonSittingWithFemale.anim("bar_sitting_left");
	$klingonStation_hallwayKlingonFemaleWithSitting.anim("bar_standing");
	/*
	$klingonStation_hallwayKlingonSittingWithFemale.lookat($t293);
	$klingonStation_hallwayKlingonFemaleWithSitting.lookat($klingonStation_hallwayKlingonSittingWithFemale);
	*/
}

void setupShuttleFed()
{
	$shuttleFederationClip1.bind($shuttleFederationOrigin1);
	$shuttleFederation1.bind($shuttleFederationOrigin1);
}

void setupEvoSuit()
{
	/*SET VALUES FOR EVOSUIT SCRIPT SPECIFIC FOR THIS MAP*/
	__EVOSUIT_VEC_AIRLOCK_DECOMPRESS_PUSH			= '0 500 150';
	
	__EVOSUIT_INT_SUFFICATE_WAIT					= 8;
	__EVOSUIT_INT_SUFFICATE_HURT					= 7;
	//__EVOSUIT_INT_SUFFICATE_HURT					= 77;
	__EVOSUIT_FLT_AIRSUPPLY_CONSUMPTION				= 0.01;
	//__EVOSUIT_FLT_AIRSUPPLY_CONSUMPTION				= 0.5;
	
	__EVOSUIT_FLT_SPACE_GRAVITY						= 0.15;
	
	__EVOSUIT_INT_THRUSTER_COOLDOWN_TIME			= 10;
	__EVOSUIT_INT_THRUSTER_MOVE_COST				= 0.5;
	__EVOSUIT_INT_THRUSTER_MOVE_UP_COST				= 1.5;
	__EVOSUIT_INT_THRUSTER_MOVE_DOWN_COST			= 1;
	__EVOSUIT_INT_THRUSTER_MOVE_FORCE				= 50;
	__EVOSUIT_INT_THRUSTER_EMERGENCY_COST			= 40;
}

void setupAirlock()
{
	//open airlock so we can see the actor departing
	$klingonAirlockDoorInside.open($world);
	$klingonAirlockSteamTopEffect.hide();
	$KlingonAirlockActPlayerClip.solid(); //prevents playa from blocking door
}

void setupActor(entity eActor,string sAnim)
{
	eActor.mass(99999);
	eActor.pushable(0);
	if(sAnim != ""){
		//eActor.ai_off(); //allready done in radiant
		eActor.anim(sAnim);
	}
}

void setupClips()
{
	//battle arena close it up
	$klingonStation_barBattlearenaFf.solid();
	
	//shuttlebay clip make solid after pathnodes finished connecting
	$klingonFerengieShipMonsterclip.solid();
	$klingonFerengieShipClip.solid();

	$playerclipRomulanArea.solid();
	setupActor($klingonStation_hallwayRomulanGuard1,"");
	setupActor($klingonStation_hallwayRomulanGuard2,"");
	setupActor($klingonStation_hallwayRomulanGuard3,"");
	
	$playerclipKlingonArea.solid();
	setupActor($klingonStation_hallwayKlingonGuard1,"");
	setupActor($klingonStation_hallwayKlingonGuard2,"");
	
	$klingonBorgFF.solid();
}

void setupActors()
{
	//borgCube
	thread borgCube_chellWork();
	
	/* //CHELL WORK ANIMATIONS
	ent-compstation-idle
	ent-compstation-idle-look
	ent-compstation-scan
	
	tricorder_aim
	tricorder_area_scan180
	tricorder_calm_idle1
	tricorder_calm_idle2
	tricorder_calm_idle3
	tricorder_draw
	tricorder_fire
	tricorder_idle
	tricorder_postfire
	tricorder_prefire
	tricorder_putaway
	tricorder_scan
	tricorder_scan-look
	tricorder_scan180
	tricorder_tense_idle1
	tricorder_use_start
	tricorder_use_end
	tricorder_use_loop
	tricorder_use_once
	*/
	
	thread klingonStation_hallwayCinematicTalking();
	
	thread globalCoop_level_onUse($klingonStation_hallwayKlingonSeller,"klingonStation_hallwayKlingonSellerTalk");
	
	$klingonAirlockActor1.anim("idle_armup.ska");

	$klingonStation_barkeeper.anim("bar_shake");
	
	//in alcove
	setupActor($klingonStation_cargobayAssimilated,"idle_breathing"); //stand_idle
	$klingonStation_cargobayAssimilated.flags( "-notarget" );
	$klingonStation_cargobayAssimilated.health(30);
	$klingonStation_cargobayAssimilated.immortal(0);
	
	setupActor($klingonStation_hallwayChatAtPipesFemale,"conv-affirmative");
	setupActor($klingonStation_hallwayChatAtPipesMale,"conv-affirmative");
	
	
	setupActor($klingonStation_barChatAndorianWithKlingonF,"conv-affirmative");
	setupActor($klingonStation_barChatKlingonFWithAndorian,"idle_breathing");
	
	setupActor($klingonStation_hallwayKlingonSittingWithFemale,"bar_sitting_left");
	setupActor($klingonStation_hallwayKlingonFemaleWithSitting,"bar_standing");
	
	setupActor($klingonStation_barChatKlingonSittingTable2,"bar_sitting_right");
	setupActor($klingonStation_barChatKlingonSittingTable1,"bar_sitting_relaxed");
	
	
	setupActor($klingonStation_hallwayKlingonSeller,"bar_sitting_forward");
	setupActor($klingonStation_barkeeper,"");
	setupActor($klingonStation_omag,"bar_sitting_left");
	setupActor($klingonStation_andorianWithOmag,"bar_sitting_left");
	setupActor($klingonRomBar0,"bar_sitting_left");
	setupActor($klingonRomBar1,"bar_sitting_right");
	
	
	setupActor($klingonStation_cargobayDrone1,"idle_armup.ska");
	setupActor($klingonStation_cargobayDrone3,"assimilate_hold");
	setupActor($klingonStation_cargobayDrone2,"alcove_idle");
	$klingonStation_cargobayDrone2.setactorflag ( "inalcove" , 1 );
	$klingonStation_cargobayDrone2.settendency( "hibernate" , 1.0 );
	
	setupActor($klingonStation_barRomulanFriend,"sfa_chair-idle");
	
	
	//needs to be executed in this order
	globalCoop_armory_putAwayWeapon($klingonStation_hallwayKlingonFriend);
	thread globalCoop_level_onUse($klingonStation_hallwayKlingonFriend,"klingonStation_hallwayKlingonFriendTalk");
	setupActor($klingonStation_hallwayKlingonFriend,"bar_standing");

	entity eActor;
	float fNum;
	for(fNum=0;fNum<6;fNum++){
		eActor = getEntity("klingonChat"+fNum);
		setupActor(eActor,"");
	}
	
	//change weapons
	thread globalCoop_actor_useWeapon($demolitionTeam0,"fed-IMod");
	thread globalCoop_actor_useWeapon($demolitionTeam1,"fed-IMod");
	thread globalCoop_actor_useWeapon($demolitionTeam2,"fed-IMod");
}

void setupArrays()
//PUT TOGETHER THE ARRAYS FROM THEIR PARTS
{
	float iArray,iWing,iAngle;
	entity eWing,eWingOrigin,eArrayOrigin;
	for(iArray=1;iArray<=MAX_ARRAYS;iArray++){
		for(iWing=0;iWing<MAX_ARRAY_WINGS;iWing++){
			eWing		= getEntity("sensorArray"+iArray+"Wing"+iWing);
			eWingOrigin	= getEntity("sensorArray"+iArray+"Wing"+iWing+"Origin");
			eWing.bind(eWingOrigin);
			eArrayOrigin= getEntity("sensorArray"+iArray+"Origin"+iWing);

			if(iWing == 2){ iAngle = 180; }
			else if(iWing == 1){ iAngle = 45; }
			else{ iAngle = 315; }
			
			eWingOrigin.time(0.1);
			eWingOrigin.moveto(eArrayOrigin);
			eWingOrigin.rotateYdown(iAngle);
			
			//print("sensorArray"+iArray+"Wing"+iWing+" ("+iAngle+")\n");
			//print("sensorArray"+iArray+"Wing"+iWing+"Origin ("+iAngle+")\n");
			//print("sensorArray"+iArray+"Origin"+iWing+" ("+iAngle+")\n");
			//print("----------------------\n");
		}
		wait(0.05);
	}
}

void puzzleStart()
{
	entity ePuzz,ePlayer;
	ePuzz = getCurrentEntity();
	ePlayer = ePuzz.getLastActivatingEntity();
	coop_evosuit_haltStat(ePlayer,1);
}

void puzzleAborted()
{
	entity ePuzz,ePlayer;
	ePuzz = getCurrentEntity();
	ePlayer = ePuzz.getLastActivatingEntity();
	coop_evosuit_haltStat(ePlayer,0);
}

void puzzleSolved()
{
	entity ePuzz,ePlayer;
	ePuzz = getCurrentEntity();
	ePlayer = ePuzz.getLastActivatingEntity();
	coop_evosuit_haltStat(ePlayer,0);
}

void puzzleFailed()
{
	entity ePuzz,ePlayer;
	ePuzz = getCurrentEntity();
	ePlayer = ePuzz.getLastActivatingEntity();
	coop_evosuit_haltStat(ePlayer,0);
}

void klingonStation_barEnterCinematic()
{
	//fade cam
	cam_fadeOut(0.25,0,0,0,1);
	wait(0.25);
	
	//hzm coop mod chrissstrahl - this is only for sp
	if(getCvarInt("g_gametype") == 0){
		$player.hide();
		$player.notsolid();		
	}
	$cam1.follow($klingonStation_barCinematicSplinepath);
	$cam1.cut();
	globalCoop_main_waitAFrame();
	cuecamera($cam1);

	//Battle Area Klingon
	$klingonStation_barBattlearenaWarrior1.ai_on();
	$klingonStation_barBattlearenaWarrior2.ai_on();
	$klingonStation_barBattlearenaWarrior1.immortal(1);
	$klingonStation_barBattlearenaWarrior2.immortal(1);
	
	$klingonStation_barBattlearenaWarrior1.attack($klingonStation_barBattlearenaWarrior2);
	$klingonStation_barBattlearenaWarrior2.attack($klingonStation_barBattlearenaWarrior1);
	
	$klingonStation_barBattlearenaWarrior1.health(25);
	$klingonStation_barBattlearenaWarrior2.health(25);
	//damageenemy( Float damage
	
	$klingonStation_barBattlearenaWarrior1.actortype("enemy");
	$klingonStation_barBattlearenaWarrior2.actortype("enemy");
	
	cinematic();
	freezeplayer();
	letterbox(0.1);
	
	//fade cam
	cam_fadeIn(0.5,0,0,0,1);
}

void klingonStation_barEnterCinematicEnd()
{
	//fade cam
	cam_fadeOut(0.25,0,0,0,1);
	
	//end cinematic
	noncinematic();
	clearletterbox(0.1);
	cueplayer();
	//hzm coop mod chrissstrahl - this is only for sp
	if(getCvarInt("g_gametype") == 0){
		$player.show();
		$player.solid();		
	}
	
	wait(1.5);
	releaseplayer();
	cam_fadein( 2, 0, 0, 0, 1, 0 );
	
	//remove camera path
	thread globalCoop_level_removePath($klingonStation_barCinematicSplinepath);
}


void klingonStation_barEnterCinematicCamInPosition()
{
	//allow now one of them to die
	wait(1);
	$klingonStation_barBattlearenaWarrior1.immortal(0);
	$klingonStation_barBattlearenaWarrior2.immortal(0);
}


void klingonStation_barChallenge()
{
	//don't allow the challenge before talking to the spy
	if(!KLINGONSTATION_ROMULANFOUND){
		return;
	}

	entity eTrigger;
	entity eActivator;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		eTrigger.noUse();
		
		eActivator = globalCoop_return_playerClosestActive(eTrigger);
		if(doesEntityExist(eActivator)){
			eActivator.give("models/weapons/worldmodel-Batleth.tik");
		}
	}
	
	//spacebattle attack cinematic
	thread klingonStation_cinematicBorgArrive();
}

void klingonStation_cinematicBorgArrive()
//spacebattle attack cinematic
{
	cinematic();
	freezeplayer();
	letterbox(0.1);
	
	//fade cam
	cam_fadeOut(0.25,0,0,0,1);
	wait(0.3);
	
	
	//remove ambient sound
	$klingonStation_barAmbientSound1.remove();
	$klingonStation_shuttlebayAmbient.remove();
	
	$cam1.follow($klingonSpaceStationCinematic);
	$cam1.cut();
	globalCoop_main_waitAFrame();
	cuecamera($cam1);
	
	//fade cam
	cam_fadeIn(0.5,0,0,0,1);
	
	//Ferengie shuttle fly away
	thread klingonStation_shuttlebayFerengieTakeoff();
	
	//move tile so it looks like some damage took place
	$klingonStation_hallwayFloorTile.moveup(8);
	$klingonStation_hallwayFloorTile.movewest(16);
	$klingonStation_hallwayFloorTile.rotateYdown(90);
	$klingonStation_hallwayFloorTile.time(1);
	
	wait(5);
	
	//fire torpedo from cube at camera path
	/*vector vOrigin;
	//$torpedoFireStart.projectileAttackEntity( "models/projectile/projectile-photonball-idryll-secret.tik","$"+sTargetname,5,20);
	//$torpedoFireStart.projectileAttackEntity( "weapons/projectile_photonball.tik","$"+sTargetname,5,20);
	//$torpedoFireStart.projectileAttackEntity( "weapons/projectile_photonball2.tik","$"+sTargetname,5,20);
	vOrigin	= eStreet.getOrigin();
	vOrigin_z += vectorGetZ(eStreet.getMaxs());
	ePhoton = spawn("script_object","model","weapons/projectile_photonball.tik","hide","1","origin","0 0 -99999");
	wait(0.02);
	ePhoton.show();
	ePhoton.origin($torpedoFireStart.getOrigin());
	ePhoton.setStringVar("uservar1","killmessage  was vaporized by the ^2Romulan Warbird");
	ePhoton.setStringVar("uservar2","killmessage_de  wurde vaporisiert von dem ^2Romulanischen Warbird");
	wait(0.01);
	ePhoton.movetopos(vOrigin);
	ePhoton.time(1);
	wait(1);
	spawn("explosion","model","weapons/explosion-photon-andorian.tik","origin",""+vOrigin);
	eStreet.remove();
	ePhoton.doradiusdamage(350,"Explosion",64,6000,0,0);
	ePhoton.doradiusdamage(50,"Explosion",128,400,0,0);
	ePhoton.doradiusdamage(50,"Explosion",256,100,0,0);
	ePhoton.doradiusdamage(25,"Explosion",384,50,0,0);
	ePhoton.doradiusdamage(15,"Explosion",500,50,0,0);
	ePhoton.doradiusdamage(10,"Explosion",550,50,0,0);
	ePhoton.remove();
	*/
	
	$borgCube_torpedoLauncher0.projectileAttackEntity( "models/projectile/projectile-photonball-idryll-secret.tik","$t309",5,20);
	wait(1);
	$borgCube_torpedoLauncher1.projectileAttackEntity( "models/projectile/projectile-photonball-idryll-secret.tik","$t309",5,20);
	wait(0.5);
	$borgCube_torpedoLauncher2.projectileAttackEntity( "models/projectile/projectile-photonball-idryll-secret.tik","$klingonSpaceStationCinematic",5,20);	$borgCube_torpedoLauncher0.projectileAttackEntity( "models/projectile/projectile-photonball-idryll-secret.tik","$t309",5,20);
	wait(1);
	$borgCube_torpedoLauncher1.projectileAttackEntity( "models/projectile/projectile-photonball-idryll-secret.tik","$t309",5,20);
	wait(0.5);
	$borgCube_torpedoLauncher2.projectileAttackEntity( "models/projectile/projectile-photonball-idryll-secret.tik","$klingonSpaceStationCinematic",5,20);
	wait(3);
	
	cam_fadeOut(0.25,0,0,0,1);
	wait(0.3);
	
	//end cinematic
	noncinematic();
	clearletterbox(0.1);
	cueplayer();
	//hzm coop mod chrissstrahl - this is only for sp
	if(getCvarInt("g_gametype") == 0){
		$player.show();
		$player.solid();		
	}
	
	//remove batleths from hallway
	float fNum;
	entity eBat;
	for(fNum=4;fNum>=0;fNum--){
		eBat = getEntity("klingonSellerBathlet0");
		if(doesEntityExist(eBat)){
			eBat.remove();
		}
	}
	
	
	//remove camera path
	thread globalCoop_level_removePath($klingonSpaceStationCinematic);
	
	
	//allow player to explore rest of the base
	//allow explosion effects
	$klingonStation_hallwayConsoleExplodeTrigger.triggerable();
	$klingonStation_hallwayTubeExplodeTrigger.triggerable();
	//remove clips
	$playerclipKlingonArea.remove();
	$playerclipRomulanArea.remove();
	
	//remove actors, because we are in combat now any everyone is enged in fighting
//at some point we rather want to move some actors so the combat seems a bit more intense
//the hallway is pretty thinned out as soon as the combat starts, some drones should be moved there
	$klingonStation_hallwayRomulanGuard1.remove();
	$klingonStation_hallwayRomulanGuard2.remove();
	$klingonStation_hallwayRomulanGuard3.remove();

	$klingonStation_hallwayKlingonGuard2.remove();
	
	$klingonStation_hallwayKlingonSittingWithFemale.remove();
	
	$klingonStation_hallwayKlingonFriend.remove();
	
	$klingonStation_hallwayChatAtPipesFemale.remove();
	$klingonStation_hallwayChatAtPipesMale.remove();
	
	$klingonStation_hallwayKlingonSeller.remove();
	
	
	$klingonStation_barChatKlingonSittingTable1.remove();
	$klingonStation_barChatKlingonSittingTable2.remove();

	$klingonStation_barChatAndorianWithKlingonF.remove();
	$klingonStation_barChatKlingonFWithAndorian.remove();
	
	$klingonStation_barBattlearenaWarrior1.remove();
	$klingonStation_barBattlearenaWarrior2.remove();
	
	$klingonStation_andorianWithOmag.remove();
	$klingonStation_omag.remove();
	
	$klingonStation_barkeeper.remove();
	
	//remove ambient sound of chatter
	$klingonStation_barAmbientSound1.remove();
	
	//remove guard triggers
	$klingonStation_hallwayKlingonGuardTrigger.remove();
	$klingonStation_hallwayRomulanGuardTrigger.remove();	
	
	wait(1);
	releaseplayer();
	cam_fadein( 2, 0, 0, 0, 1, 0 );
	
	//have random PDA
	thread klingonStation_PDA();
	
	$klingonStation_hallwayKlingonGuard1.actortype("teammate");
	$klingonStation_hallwayKlingonGuard1.groupactortype("teammate");
	$klingonStation_hallwayKlingonGuard1.aggressive(1);
	$klingonStation_hallwayKlingonGuard1.ai_on();
	$klingonStation_hallwayKlingonGuard1.immortal(0);
	$klingonStation_hallwayKlingonGuard1.settendency("patrol",1);
	
	//flip over chair
	$klingonStation_hallwayKlingonSittingWithFemaleChair.angles('0 135 270');
	$klingonStation_hallwayKlingonSittingWithFemaleChair.origin('989.93 659.42 39');	
	
	//ready borg
	thread globalCoop_player_makeSolidASAP($klingonStation_hallwayBorg1);
	$klingonStation_hallwayBorg1.show();
	$klingonStation_hallwayBorg1.ai_on();
	$klingonStation_hallwayBorg1.aggressive(1);
	
	//toggle redalert ambient on
	float fAlerts;
	entity eAlert;
	for(fAlerts=7;fAlerts>=0;fAlerts--){
		eAlert = getEntity("klingonStation_redalert"+fAlerts);
		if(doesEntityExist(eAlert)){
			triggerEntity(eAlert);
		}
	}
}

void klingonStation_romulanSectionEnter()
{
	$world.light_lightstyle( "klingonStation_romulanSectionLight1" ,"aaaadddjjjzzzzzssssssuuuuutttttbbbb", 0 );

	//activate drones
	float fNum;
	for(fNum=3;fNum>=0;fNum--){
		entity eActor;
		eActor = getEntity("klingonStation_romulanSectionBorg" + fNum);
		if(doesEntityExist(eActor)){
			eActor.ai_on();
			eActor.aggressive(1);
		}
	}
	//activate romulan
	$klingonStation_romulanSectionRomulan0.ai_on();
	$klingonStation_romulanSectionRomulan0.aggressive(1);
	$klingonStation_romulanSectionRomulan0.actortype("teammate");
	$klingonStation_romulanSectionRomulan0.groupactortype("teammate");
	$klingonStation_romulanSectionRomulan0.attack($klingonStation_romulanSectionBorg0);
	$klingonStation_romulanSectionRomulan0.settendency("patrol",1);
	$klingonStation_romulanSectionRomulan0.settendency("pullalarm",0);
}

void klingonStation_cinematicBorgArriveTorpedo()
{
}


void klingonStation_barRomulanFound()
//romulan informant friend found
{
	/*
	sfa_chair-idle
	sfa_chair_talk_A
	sfa_chair_talk_B
	sfa_chair_talk_C
	sfa_chair_talk_omag
	sit_elbows
	sit_lean
	sit_right
	
	*/
	cam_fadeOut(0.1,0,0,0,1);	
	wait(0.15);
	
	cinematic();
	freezeplayer();
	letterbox(0.1);
	
	wait(1);
	
	//hzm coop mod chrissstrahl - this is only for sp
	if(getCvarInt("g_gametype") == 0){
		$player.hide();
		$player.notsolid();		
	}
	
	$cam1.follow($klingonStation_barRomulanFoundCinematic);
	$cam1.cut();
	globalCoop_main_waitAFrame();
	cuecamera($cam1);
	
	//fade cam in
	cam_fadeIn(0.25,0,0,0,1);
	
	skipthread("");
	wait(1.5);
	
	$klingonStation_barRomulanFriend.animateonce("sfa_chair_talk_B");
	
	wait(1);
	
	cam_fadeout(1, 0, 0, 0, 1, 0 );
	wait(1);
	
	$klingonStation_barRomulanFriend.displayEffect("TransportOut","Federation");
	
	//end cinematic
	noncinematic();
	clearletterbox(0.1);
	cueplayer();
	//hzm coop mod chrissstrahl - this is only for sp
	if(getCvarInt("g_gametype") == 0){
		$player.show();
		$player.solid();		
	}
	
	wait(0.5);
	releaseplayer();
	cam_fadein( 1, 0, 0, 0, 1, 0 );
	
	KLINGONSTATION_ROMULANFOUND = 1;
}

void klingonStation_barBattlearenaLoser()
//Who ever louses the battle and gets killed will start this thread
//the winner will be the last attacker at the exact moment of death
{
	entity eWinner;
	eWinner = getCurrentEntity();
	if(doesEntityExist(eWinner))
	{
		eWinner.notarget();
		eWinner = eWinner.getLastAttacker();
	
		if(doesEntityExist(eWinner))
		{
			eWinner.ai_off();
			eWinner.model("models/char/klingon-m9-merc-batleth-m2-neutral.tik");
			eWinner.playsound("sound/coop_blArena/chars/klingon/batleth_m1.wav",3,3,512);
			globalCoop_main_waitAFrame();
			eWinner.animateonce("cheer");
			wait(1.6);
			eWinner.anim("idle");
			wait(0.5);
			eWinner.walkto("$klingonStation_barBattlearenaExit1");
			waitfor(eWinner);
			
			//end - fight cinematic
			thread klingonStation_barEnterCinematicEnd();
			
			if(doesEntityExist(eWinner))
			{
				$klingonStation_barBattlearenaFf.notsolid();
				$klingonStation_barBattlearenaFf.hide();
				eWinner.walkto("$klingonStation_barBattlearenaExit2");
				waitfor(eWinner);
				
				if(doesEntityExist(eWinner))
				{
					eWinner.walkto("$klingonStation_barPosition1");
					waitfor(eWinner);
					
					//now at bar, make avialable for challenge
					if(doesEntityExist(eWinner))
					{
						eWinner.onuse("klingonStation_barChallenge");
						eWinner.pause();				
					}
				}
			}
		}
	}
}

void klingonStation_hallwayConsoleExplode()
{
	vector vOrigin;
	vOrigin = $klingonStation_hallwayConsole.getOrigin();
	$klingonStation_hallwayConsole.selfdetonate();
	globalCoop_main_waitAFrame();
	$klingonStation_hallwayConsoleSparks.show();
	$klingonStation_hallwayConsoleSparks.scale(1);
	$klingonStation_hallwayConsole.remove();
	
	//borg beams in
	$klingonStation_hallwayBorg2.show();
	thread globalCoop_player_makeSolidASAP($klingonStation_hallwayBorg2);
	$klingonStation_hallwayBorg2.displayEffect("TransportIn","Borg");
	$klingonStation_hallwayBorg2.aggressive(1);
	
	//klingon warrier comes to crush borg
	//$klingonStation_hallwayKlingonFemaleWithSitting.model("models/char/klingon-m9-merc-knife-f3.tik"); //changed to make as female would fail mission if made to teammate
	$klingonStation_hallwayKlingonFemaleWithSitting.model("models/char/klingon-m9-merc-knife-m1.tik");
	thread globalCoop_player_makeSolidASAP($klingonStation_hallwayKlingonFemaleWithSitting);
	$klingonStation_hallwayKlingonFemaleWithSitting.walkto("$klingonStation_hallwayRunto1","run");
	waitFor($klingonStation_hallwayKlingonFemaleWithSitting);
	//$klingonStation_hallwayKlingonFemaleWithSitting.actortype("teammate");
	$klingonStation_hallwayKlingonFemaleWithSitting.immortal(0);
	$klingonStation_hallwayKlingonFemaleWithSitting.actortype("teammate");
	$klingonStation_hallwayKlingonFemaleWithSitting.groupactortype("teammate");
	$klingonStation_hallwayKlingonFemaleWithSitting.ai_on();
	$klingonStation_hallwayKlingonFemaleWithSitting.aggressive(1);
	$klingonStation_hallwayKlingonFemaleWithSitting.attack($klingonStation_hallwayBorg2);
	$klingonStation_hallwayKlingonFemaleWithSitting.settendency("patrol",1);
	$klingonStation_hallwayBorg2.ai_on();
	$klingonStation_hallwayBorg2.attack($klingonStation_hallwayKlingonFemaleWithSitting);
}

void klingonStation_hallwayTubeExplode()
{
	$klingonStation_hallwayTube.remove();
	$klingonStation_hallwayTubeDamaged.show();
	$klingonStation_hallwayTubeDamaged.solid();
	$klingonStation_hallwayTubeDamaged.selfdetonate();
	thread globalCoop_player_makeSolidASAP($klingonStation_hallwayTubeDamaged);
	$klingonStation_hallwayTubeExplodeSteam.show();
	$klingonStation_hallwayTubeExplodeSteam.scale(1);
	
	
	//hallway light turn off
	spawn("SFX_sparks_directional-blue-small","model","models/fx/fx-sparks-blue-directional-small.tik","origin","792 604 288","angles","119 0 234");
	$world.light_intensity( "klingonStation_hallwayLight1" , 0 );
	$klingonStation_hallwayLight1Beam.hide();
}

void playerManageEvoSuit(entity ePlayer)
//allowes player to sort of manouver in space with trusters up and down
{
return;
//ePlayer.hudprint("playerManageEvoSuit 1\n");
	vector vVelocity,vVelocityNew;
	float iStatVal = -1;
	float iLastStatVal = 123;
	float iCoolDownTimmer = 0;
	float iUpCost = 1.5;
	float iForwardCost = 0.5;
	float fRecharge = -0.5;
	float iAirSupply,fAirSupplyLastHurt;
	float bAirSupplyStopSound=1;
	float iLastAirSupply;
	float iAirSupplyConsumptionRate;

	ePlayer.addhud("cooptimerred");
	sendClientCommand(ePlayer,"set coop_timerRed Thrusters Temp");
	
	ePlayer.setFloatVar("endEvo",0);
	ePlayer.gravity(0.15);
	
	while(doesEntityExist(ePlayer)){	
		//GRAB CURRENT VELOCITY
		vVelocity = ePlayer.getVelocity();
		vVelocityNew = vVelocity;
		
		float fHealth;
		fHealth = ePlayer.getHealth();
		
		if(fHealth > 0 && ePlayer.getFloatVar("endEvo") != 1){
			if(iAirSupply <= 0){
				if((fAirSupplyLastHurt + 5) < getLevelTime()){
					fHealth = (fHealth - 10);
					if(ePlayer.getHealth() > fHealth){ ePlayer.pain(1,ePlayer,2); }
					if(fHealth <= 0){
						ePlayer.kill();
						fHealth = 0;
					}
					ePlayer.health(fHealth);
					
					fAirSupplyLastHurt=getLevelTime();
					ePlayer.stoploopsound();
					bAirSupplyStopSound=1;
				}
			}else if(bAirSupplyStopSound){
				fAirSupplyLastHurt=getLevelTime();
ePlayer.loopsound("sound/player/player_rebreath.wav",1,96);
			}
		}else{
			ePlayer.removehud("cooptimerred");
			ePlayer.removehud("cooptimerblue");
			ePlayer.stoploopsound();
			ePlayer.gravity(1);
//ePlayer.hudprint("playerManageEvoSuit 2\n");
			return;
		}
		
		if(iStatVal < 100 && ePlayer.isplayeronground() == 0){
			if(ePlayer.checkJump()){
				if(vVelocity_z < 600){ //cap max upwards velocity for thrusters
					vVelocityNew_z += 50; 
					iStatVal = (iStatVal + iUpCost);
				}
			}
			else if(ePlayer.checkCrouch()){
				if(vVelocity_z > -300){ //cap max downwards velocity for thrusters
					if(vVelocity_z > 0 ){
						vVelocityNew_z -= 50;
						iStatVal = (iStatVal + iUpCost/2);
					}else{
						vVelocityNew_z -= 30;
						iStatVal = (iStatVal + (iUpCost/1));
					}
				}
				/*
				float fPhy;
				vector vAngles;
				fPhy = $world.getPhysicsVar("gravity");
				vAngles = ePlayer.getViewAngles();
				ePlayer.hudprint("getPhysicsVar velocity: "+fPhy+" ("+vAngles+")\n");
				*/
			}
			
			if(ePlayer.checkForward()){
				iStatVal = (iStatVal + iForwardCost);
			}else if(ePlayer.checkBackward()){
				iStatVal = (iStatVal + iForwardCost);
			}
			
			if(ePlayer.checkLeft()){
				iStatVal = (iStatVal + iForwardCost);
			}else if(ePlayer.checkRight()){
				iStatVal = (iStatVal + iForwardCost);
			}
		}
		
		//make sure we don't go out of bounds
		if(iStatVal > 100){ iStatVal = 100;	}
		else if(iStatVal < 0){ iStatVal = 0;}
		if(iAirSupply < 0){iAirSupply = 0;}
		else if(iAirSupply > 100){iAirSupply = 100;}
		
		//thrusters
		if(iStatVal != iLastStatVal){
			//[b60025] chrissstrahl - updated to reduce warning message spam
			if(!ePlayer.doesVarExist("coop_evosuit_haltStat")){
				ePlayer.setFloatVar("coop_evosuit_haltStat",0.0);
			}
			
			if(ePlayer.getFloatVar("coop_evosuit_haltStat") == 0){
				ePlayer.setstat( "generic",iStatVal);
			}
		}
		//air supply
		if(iAirSupply != iLastAirSupply){
			ePlayer.setstat( "mp_generic1",iAirSupply);
		}
		iLastStatVal = iStatVal;
		iLastAirSupply = iAirSupply;

		//no thrusters used - recharge
		if(iLastStatVal == iStatVal){
			//have cooldown on recharge, once it is empty
			if(iStatVal == 100 && iCoolDownTimmer < 20){
				if(iCoolDownTimmer == 0){
					ePlayer.hudprint("Thrusters need to Cooldown!\n");
				}
				iCoolDownTimmer++;
			}else{
				iStatVal = (iStatVal + fRecharge);
				iCoolDownTimmer = 0;
			}
		}		
iAirSupply = (iAirSupply + iAirSupplyConsumptionRate);
		
		//SET NEW VELOCITY
		if(vVelocityNew != vVelocity){
			ePlayer.setVelocity(vVelocityNew);
		}
		wait(0.05);
	}
}	

/*
void coop_airlockCheckPlayer(entity ePlayer)
{
	if(ePlayer.getFloatVar("coop_airlockCheckPlayer") == 1){
//ePlayer.hudprint("coop_airlockCheckPlayer 0\n");
		return;
	}
	
	ePlayer.setFloatVar("coop_airlockCheckPlayer",1);
	float fExit=0;
	vector vPlayerOrigin;
	
	while(fExit == 0)
	{
		wait(0.05); //wait at the beginning to avoid blocking this to be started again
		
		fExit=1;
		
		if(doesEntityExist(ePlayer)){
//ePlayer.hudprint("coop_airlockCheckPlayer 1\n");
			if(ePlayer.getHealth() > 0){
//ePlayer.hudprint("coop_airlockCheckPlayer 2\n");
				if(!globalCoop_check_playerSpectator(ePlayer)){
					vPlayerOrigin = ePlayer.getOrigin();
					//check if player is outside airlock height or below
					if(vectorGetZ(vPlayerOrigin) < 16 || vectorGetZ(vPlayerOrigin) > 224 || vectorGetY(vPlayerOrigin) > 2800){

//ePlayer.setFloatVar("endEvo",1);
//ePlayer.hudprint("coop_airlockCheckPlayer 3\n");

						coop_evosuit_playerSetSpace(ePlayer,1);
						
						
						//ePlayer.gravity(0.25);
						//playerManageEvoSuit(ePlayer);
						//ePlayer.setFloatVar("coop_airlockCheckPlayer",0);
						
						
//ePlayer.hudprint("coop_airlockCheckPlayer 4\n");
						return;
					}
				}
			}
		}
	}

	if(doesEntityExist(ePlayer)){
		ePlayer.setFloatVar("coop_airlockCheckPlayer",0);
	}
}
*/

void coop_klingonAirlockBoxes()
{
	if(doesEntityExist($klingonAirlockBoxes)){
		if($klingonAirlockBoxes.getFloatVar("flownAway") == 0){
			$klingonAirlockBoxes.setFloatVar("flownAway",1);
			
			$klingonAirlockBoxes.time(1);
			$klingonAirlockBoxes.moveEast(-80);
			$klingonAirlockBoxes.moveNorth(30);
			$klingonAirlockBoxes.moveUp(20);
			wait(0.95);
			$klingonAirlockBoxes.rotateX(randomint(5));
			$klingonAirlockBoxes.rotateY(randomint(5));
			$klingonAirlockBoxes.rotateZ(randomint(5));
			$klingonAirlockBoxes.time(1.5);
			$klingonAirlockBoxes.moveNorth(151);
			wait(1.45);
			vector vVel;
			vVel = $klingonAirlockBoxes.getVelocity();
			
			waitFor($klingonAirlockBoxes);
			$klingonAirlockBoxes.setVelocity(vVel);
			wait(120);
			if(doesEntityExist($klingonAirlockBoxes)){
				$klingonAirlockBoxes.remove();
			}
		}
	}
}

//-------------------------------------
//AUTOMATICALLY STARTED BY THE COOP MOD
//-------------------------------------
void coop_justEntered()
{
	entity ePlayer;
	ePlayer = getCurrentEntity();
	if(doesEntityExist(ePlayer)){
		//-------------------------------------
		//EVOSUIT PLAYER ENTERED LEVEL
		//-------------------------------------
		coop_evosuit_justEntered(ePlayer);		
	}
}
//-------------------------------------
//AUTOMATICALLY STARTED BY THE COOP MOD
//-------------------------------------
void coop_justBecameSpectator()
{
	entity ePlayer;
	ePlayer = getCurrentEntity();
	if(doesEntityExist(ePlayer)){
		//-------------------------------------
		//EVOSUIT PLAYER BECAME SPECTATOR
		//-------------------------------------
		coop_evosuit_justBecameSpectator(ePlayer);
	}
}
//-------------------------------------
//AUTOMATICALLY STARTED BY THE COOP MOD
//-------------------------------------
void coop_justTransported()
{
	entity ePlayer;
	ePlayer = getCurrentEntity();
	if(doesEntityExist(ePlayer)){
		//-------------------------------------
		//EVOSUIT PLAYER USED TRANSPORT COMMAND
		//-------------------------------------
		coop_evosuit_justTransported(ePlayer);
	}
}
//-------------------------------------
//AUTOMATICALLY STARTED BY THE COOP MOD
//-------------------------------------
void coop_justChangedClass()
{
	entity ePlayer;
	ePlayer = getCurrentEntity();
	if(doesEntityExist(ePlayer)){
		//-------------------------------------
		//EVOSUIT MODEL CHANGED
		//-------------------------------------
		coop_evosuit_classChanged(ePlayer);		
	}
}
//-------------------------------------
//AUTOMATICALLY STARTED BY THE COOP MOD
//-------------------------------------
void coop_justChangedModel()
{
	entity ePlayer;
	ePlayer = getCurrentEntity();
	if(doesEntityExist(ePlayer)){
		//-------------------------------------
		//EVOSUIT MODEL CHANGED
		//-------------------------------------
		coop_evosuit_modelChanged(ePlayer);		
	}
}
//-------------------------------------
//AUTOMATICALLY STARTED BY THE COOP MOD
//-------------------------------------
void coop_justSpawned()
{
}
//-------------------------------------
//AUTOMATICALLY STARTED BY THE COOP MOD
//-------------------------------------
void coop_justDied()
{
return; //[b60021] chrissstrahl - this func call was fixed in c++ code
	entity ePlayer;
	entity eAttacker;
	ePlayer = getCurrentEntity();
	if(doesEntityExist(ePlayer)){
		eAttacker = ePlayer.getLastAttacker();
		if(eAttacker != ePlayer && eAttacker != $world){
			ePlayer.hudprint("You got killed by "+eAttacker.getTargetname()+"\n");
		}
	}
}
//-------------------------------------
//AUTOMATICALLY STARTED BY THE COOP MOD
//-------------------------------------
void coop_justLeft()
{
}

void coop_airlockOutsideUse()
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		eTrigger.notTriggerable();

		$klingonPressureLightsWhite.hide();
		$klingonPressureLightsRed.show();
		$world.light_intensity("klingonPressureLightsWhite",0);
		$world.light_intensity("klingonPressureLightsRed",1);
		
		//wait for door to close and lock
		globalCoop_level_waitForDoorToClose($klingonAirlockDoorInside,1);
		
		float fBlinkiBlink;
		float fOn;
		for(fBlinkiBlink=0;fBlinkiBlink<9;fBlinkiBlink++){
			if(globalCoop_check_isPowerOfGiven(fBlinkiBlink,2)){
				fOn = 1;
			}
			else{
				fOn=0;
			}
			wait(0.25);
			$world.light_intensity("klingonPressureLightsRed",fOn);
		}
		
		$klingonAirlockDoorOutside.unlock();
		$klingonAirlockDoorOutside.open($world);
		$klingonAirlockDoorOutside.playsound( "sound/environment/wind/wind_vacuum.wav", 6, .6, 256 );
		entity eDecompressionEffect;
		eDecompressionEffect = spawn("fx/fx-explosion-ice-gas-large.tik","origin","833 2683 120","angle","90");
		
		thread coop_klingonAirlockBoxes();
		
//-------------------------------------
//EVOSUIT DECOMPRESS - NOTIFIES ALL RELATED SCRIPTS
//-------------------------------------
thread coop_evosuit_airlockDecompress($coop_evosuit_airlockInsideTrigger);
//-------------------------------------
		
		wait(1);
		
		$KlingonAirlockInsideUse.triggerable();
		
		wait(2);
		if(doesEntityExist(eDecompressionEffect)){ eDecompressionEffect.remove(); }
	}
}

void coop_airlockInsideUse()
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		eTrigger.notTriggerable();
		
		globalCoop_level_waitForDoorToClose($klingonAirlockDoorOutside,1);
		wait(0.5);
		
		//$klingonAirlockSteamTopEffect.scale(1.7);
		$klingonAirlockSteamTopEffect.show();
		
		wait(2);
		
		$klingonAirlockSteamTopEffect.hide();
		
		$klingonPressureLightsRed.hide();
		$klingonPressureLightsWhite.show();
		$world.light_intensity("klingonPressureLightsRed",0);
		$world.light_intensity("klingonPressureLightsWhite",1);
		
//-------------------------------------
//EVOSUIT COMPRESS - NOTIFIES ALL RELATED SCRIPTS
//-------------------------------------
thread coop_evosuit_airlockCompress($coop_evosuit_airlockInsideTrigger);
//-------------------------------------
		
		wait(0.5);
		
		$klingonAirlockDoorInside.unlock();
		$klingonAirlockDoorInside.open($world);
		wait(1);
		$KlingonAirlockOutsideUse.triggerable();
	}
}

void klingonStation_hallwayKlingonSellerTalk()
{
	entity ePlayer;
	ePlayer = globalCoop_return_playerClosestActive($klingonStation_hallwayKlingonSeller);
	if(doesEntityExist(ePlayer)){
		$klingonStation_hallwayKlingonSeller.headwatch(ePlayer);
	}
	wait(3);
	$klingonStation_hallwayKlingonSeller.headwatchtarget("none",10);
	thread globalCoop_level_onUse($klingonStation_hallwayKlingonSeller,"klingonStation_hallwayKlingonSellerTalk");
}

void klingonStation_hallwayKlingonFriendTalk()
{
	$klingonStation_hallwayKlingonFriend.nouse();
	//centerprint("Friend: lets go to the bar...\n");
	
	$klingonStation_hallwayKlingonFriend.playDialog("localization/sound/dialog/m9l1/klingon_arrg.mp3",2,128,0);
	
	entity ePlayer;
	ePlayer = globalCoop_return_playerClosestActive($klingonStation_hallwayKlingonFriend);
	if(doesEntityExist(ePlayer)){
		$klingonStation_hallwayKlingonFriend.headwatch(ePlayer);
	}
	wait(3);
	$klingonStation_hallwayKlingonFriend.headwatchtarget("none",10);
	thread globalCoop_level_onUse($klingonStation_hallwayKlingonFriend,"klingonStation_hallwayKlingonFriendTalk");
}

void klingonStation_cargobayAirlockScene()
{
	$klingonAirlockActor0.animateonce("cin-m3_pointing");
	$klingonAirlockActor1.anim("walk_fast_armup");
	wait(1.25);
	$klingonAirlockDoorInside.close();
	wait(3);
	$KlingonAirlockActPlayerClip.remove(); //clip that prevents playa from blocking doorz
	$klingonAirlockActor0.remove();
	$klingonAirlockActor1.remove();
	
	
	//[b60025] chrissstrahl - have a shuttle loop in a path
	$shuttleFederationClip2.bind($shuttleFederationOrigin2);
	$shuttleFederation2.bind($shuttleFederationOrigin2);
	$shuttleFederationOrigin2.followpath( $t280 , "loop" , "normalangles" );
	$shuttleFederation2.show();
	$shuttleFederationClip2.solid();
}

void klingonStation_cargobayPowerCoup()
{
	/*
	//--- set the explosion spawner to spawn an explosion and trigger it
	$dis_node1_spawn.modelname ( "fx/fx-explosion-distnode.tik" );
	$dis_node1_spawn.spawntargetname ( "dis_node1_boom" );
	trigger ( "$dis_node1_spawn" );
	wait( .1 );
	$dis_node1_spawn.remove();
	*/
	
	trigger("$klingonStation_cargobayGroupEnable");
	wait(0.1);
	trigger("$klingonStation_cargobayGroupAggressive");
	
	$klingonBorgFF.remove();

	$klingonStation_cargobayPowerCoup.noDamage();
	$klingonStation_cargobayPowerCoup.model("models/enviro/borg-sphere_powercup_powercup_damaged.tik");
	
	entity eEffect;
	eEffect = spawn("Object","model","fx/fx-explosion-plasmacon-red.tik","scale","0.25","origin",""+$klingonStation_cargobayPowerCoup.getOrigin());
	wait(2);
	if(doesEntityExist(eEffect)){
		eEffect.remove();
	}
}

void klingonStation_cargobayDistNode()
{
	$klingonStation_cargobayDistNode.noDamage();
	$klingonStation_cargobayDistNode.model("models/enviro/borg-sphere_distnode_distnode_damaged.tik");

	entity eEffect;
	eEffect = spawn("Object","model","fx/fx-explosion-distnode.tik","scale","0.25","origin",""+$klingonStation_cargobayDistNode.getOrigin());
	wait(2);
	if(doesEntityExist(eEffect)){
		eEffect.remove();
	}
	
	//disable all borg on the klingon station
	/*entity eActor;
	float fNum;
	for(fNum=0;fNum<7;fNum++){
		eActor = getEntity("klingonDrone"+fNum);
		if(doesEntityExist(eActor)){
			//eActor.settendency("disable",1);
			eActor.ai_on();
		}
	}*/
	
	//disable all borg on the klingon station
	wait(0.3);
	trigger("$klingonStation_cargobayGroupDisable");	
}

void klingonStation_shuttlebayFerengieTakeoff()
{
	$klingonFerengieShipMonsterclip.remove();
	$klingonFerengieShip.bind($klingonFerengieShipOrigin);
	$klingonFerengieShipClip.bind($klingonFerengieShipOrigin);
	
	thread globalAccelMove( $klingonFerengieShipOrigin, '-1500 0 80', 3, "rampdown", "" );
	wait(3.1);
	globalAccelMove( $klingonFerengieShipOrigin, '3000 0 3000', 5, "rampdown", "" );
	
	$klingonFerengieShip.remove();
	$klingonFerengieShipOrigin.remove();
	$klingonFerengieShipClip.remove();	
}


void klingonStation_hallwayKlingonGuard()
{
	//sound\dialog\m9l2\
	//klingcomm_dor.mp3
	//klingcomm_nomatch.mp3
	//klingcomm_retreat.mp3
	$klingonStation_hallwayKlingonGuard1.playdialog( "localization/sound/dialog/m9l2/klingcomm_retreat.mp3", 1, 256, 0);
	entity ePlayer;
	ePlayer = globalCoop_return_playerClosestActive($klingonStation_hallwayKlingonGuard1);
	if(doesEntityExist(ePlayer)){
		$klingonStation_hallwayKlingonGuard1.headwatch(ePlayer);
	}
	$klingonStation_hallwayKlingonGuard1.animateonce("idle_adjust");
	wait(3);
	$klingonStation_hallwayKlingonGuard1.headwatchtarget("none",10);
}

void klingonStation_hallwayRomulanGuard()
{
	//idle_adjust
	//patrol_clean
	//patrol_search
	//patrol_spotted
	//patrol_whosthere
	//romdisruptor_melee1
	//romdisruptor_melee2
	
	//sound\dialog\m10l1\
	//romhall2_youthere.mp3
	//romguard_what.mp3
	//romguard_tightw.mp3
	$klingonStation_hallwayRomulanGuard2.animateonce("patrol_search");
	$klingonStation_hallwayRomulanGuard2.playdialog( "localization/sound/dialog/m10l1/romguard_tightw.mp3", 1, 256, 0);
}


void klingonStation_PDA()
{
	//sound\dialog\m2l2\
	//klingm1_armory2.mp3
	//klingm1_atmproc.mp3
	//klingm1_infolt.mp3
	//klingm1_press.mp3
	//klingm1_secbr.mp3
	//klingm1_secteam.mp3
	//klingm1_responset.mp3
	//klingm1_procroom.mp3
	//
	
	float fVolume = 2;
	float fRange = 256;
	float fLocationType = 0;
	float fAvailable = 8;
	
	while(1)
	{
		string sDialog;
		float fRand;
		
		fRand = randomInt(7);
		
		float fValid;
		float fCurr;
		while(!fValid){
			fValid = 1;
			if($world.doesVarExist("klingonStation_PDA"+fRand)){
				fCurr = $world.getFloatVar("klingonStation_PDA"+fRand);
				if(fCurr == 1){
					fValid = 0;
					fRand = randomInt(fAvailable);
				}
			}
			globalCoop_main_waitAFrame();
			//globalCoop_main_print("=======pda loop========");
		}
		
		//globalCoop_main_print("====AVIALABLE "+fAvailable+"=======");
		$world.setFloatVar("klingonStation_PDA"+fRand,1);
		
		fAvailable--;
		
		//all dialogs has been played
		if(fAvailable < 1){
			return;
		}
		
		
		fLocationType = randomInt(3);
		if(fRand==0){sDialog="klingm1_armory2.mp3";}
		else if(fRand==1){sDialog="klingm1_atmproc.mp3";}
		else if(fRand==2){sDialog="klingm1_infolt.mp3";}
		else if(fRand==3){sDialog="klingm1_press.mp3";}
		else if(fRand==4){sDialog="klingm1_secbr.mp3";}
		else if(fRand==5){sDialog="klingm1_secteam.mp3";}
		else if(fRand==6){sDialog="klingm1_responset.mp3";}
		else{sDialog="klingm1_procroom.mp3";}
		
		if(fLocationType == 0){
			$klingonStation_hallwayTubeDamaged_origin.playsound("localization/sound/dialog/m2l2/"+sDialog,0,fVolume,fRange);
			$klingonStation_hallwayPDA1.playsound("localization/sound/dialog/m2l2/"+sDialog,0,fVolume,fRange);
			$klingonStation_hallwayPDA2.playsound("localization/sound/dialog/m2l2/"+sDialog,0,fVolume,fRange);
		}
		else if(fLocationType == 1){
			$klingonStation_shuttlebayPDA.playsound("localization/sound/dialog/m2l2/"+sDialog,0,fVolume,fRange);
		}
		else if(fLocationType == 2){
			$klingonStation_romulanSectionPDA.playsound("localization/sound/dialog/m2l2/"+sDialog,0,fVolume,fRange);
			$klingonStation_cargobayPDA.playsound("localization/sound/dialog/m2l2/"+sDialog,0,fVolume,fRange);
		}
		else{
			$klingonStation_barPDA.playsound("localization/sound/dialog/m2l2/"+sDialog,0,fVolume,fRange);
		}
		
		//wait between 20 and 50 sec
		fRand = randomInt(30);
		wait(20 + fRand);
	}
}

void borgCube_entranceTransport()
//beaming on to the cube
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(!doesEntityExist(eTrigger)){
		return;
	}
	
	entity ePlayer;
	ePlayer = eTrigger.getLastActivatingEntity();
	
	if(!doesEntityExist(ePlayer)){
		return;
	}
	
	//set in space, the function will handle the suffication
	coop_evosuit_playerSetSpace(ePlayer,0);
}


void borgCube_exitTransport()
//beaming out of the cube
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(!doesEntityExist(eTrigger)){
		return;
	}
	
	entity ePlayer;
	ePlayer = eTrigger.getLastActivatingEntity();
	
	if(!doesEntityExist(ePlayer)){
		return;
	}
	
	//set in space, the function will handle the suffication
	coop_evosuit_playerSetSpace(ePlayer,1);
}


void borgCube_enterCube()
//started from trigger once player enters cube first time
{
	//setup all the drones
	float fDrones;
	entity eDrone;
	for(fDrones = 7;fDrones>=0;fDrones--){
		eDrone = getEntity("borgCube_drone"+fDrones);
		if(doesEntityExist(eDrone)){
			//eDrone.anim ( "alcove_idle" );
			eDrone.setactorflag ( "inalcove" , 1 );
			eDrone.settendency( "hibernate" , 1.0 );
			eDrone.ai_on();
			eDrone.killthread("borgCube_droneMurdered");
		}
	}
	
	//make forcefields solid - they needed to be notsolid for the pathnodes to connect
	float fFields;
	entity eField;
	for(fFields=3;fFields>=0;fFields--){
		eField = getEntity("borgCube_forceField"+fFields);
		if(doesEntityExist(eField)){
			eField.solid();
		}
	}
	
	//make chell work on console
	thread borgCube_chellWork_timer();
	
	//stop flickering light in romulan section
	$world.light_intensity( "klingonStation_romulanSectionLight1" , 0 );
}

void borgCube_droneMurdered()
//a drone was killed, it starts this
{
	entity eDrone;
	eDrone = getCurrentEntity();
	/*
	if(doesEntityExist(eDrone)){
		
	}
	*/
}

float actor_animateOnce(entity e,string sAnim)
{
	if(doesEntityExist(e)){
		if(e.getHealth() > 0){
			e.animateonce(sAnim);
			return 1;
		}
	}
	return 0;	
}

void borgCube_chellWorkDone()
//chell has finished his work
{
	if(doesEntityExist($chell)){
		if($chell.getHealth() > 0){
			killthread("borgCube_chellWork_timer");
			thread globalCoop_main_globalMessage("borgCube_chellWorkDone - success");
			
			$chell.missionobjective(0);
			$objectiveMarker0.hide();
			
			//disable beam
			$borgCube_energyBeam.remove();
			
			$chell.mass(200);
			$chell.pushable(1);
			$chell.immortal(1);
			globalCoop_actor_useWeapon($chell,"fed-IMod");
			$chell.ai_on();
			
			//drain coolant
			trigger("$borgCube_coolant");
			
			wait(2);
			
			//show steam
			$borgCube_powerPipe0Steam.show();
			$borgCube_powerPipe1Steam.show();
			$borgCube_powerPipe0Steam.scale(1);
			$borgCube_powerPipe1Steam.scale(1);
			

			wait(5);
			
			
			//explode
			$borgCube_powerPipe0.selfdetonate();
			$borgCube_powerPipe1.selfdetonate();
			$borgCube_powerPipe0.remove();
			$borgCube_powerPipe1.remove();
			$borgCube_powerPipe0Destroyed.show();
			$borgCube_powerPipe1Destroyed.show();
			
			//remove forcefields
			float fFields;
			entity eField;
			for(fFields=3;fFields>=0;fFields--){
				eField = getEntity("borgCube_forceField"+fFields);
				if(doesEntityExist(eField)){
					eField.remove();
				}
			}
			
			wait(3);
			
			//start beaming in npc demolition teams
			thread borgCube_npcBeamIn();
		}
	}
}

void borgCube_chellWork_timer()
//handle mission procedure
{
	thread globalCoop_main_globalMessage("borgCube_chellWork_timer");
	thread borgCube_chellWork();
	
	//make sure to stop previouse
	globalCoop_statbar_timerStop();
	wait(0.2);
	
	float fTime = 10;
	float fFailure;
	while(fTime > 0){
		fFailure = 1;
		if(doesEntityExist($chell)){
			if($chell.getHealth() > 1){
				fFailure = 0;
				
				killthread("borgCube_chellWork");
				$chell.ai_off();
				$chell.animateOnce("death");
			}
		}
		if(fFailure){
			thread globalCoop_main_globalMessage("borgCube_chellWorkDone - FAILURE");
			globalCoop_mission_failWithReason("$$Rotec9FailedChell$$");
			return;
		}
		wait(1);
	}
	
	//success - continue mission
	thread borgCube_chellWorkDone();
}

void borgCube_chellWork()
//handle animations
{
	
thread borgCube_npcBeamIn();
return;
	
	$chell.missionobjective(1);
	$chell.ai_off();
	globalCoop_armory_putAwayWeapon($chell);
	$chell.mass(9999);
	$chell.pushable(0);
	$chell.immortal(0);
	
	while(BORGCUBE_CHELLWORKING){
		if(!actor_animateOnce($chell,"ent-compstation-idle")){
			return;
		}
		waitForAnimation($chell,"ent-compstation-idle",-0.05);
		
		if(!actor_animateOnce($chell,"ent-compstation-idle")){
			return;
		}
		waitForAnimation($chell,"ent-compstation-idle-look",-0.05);
		
		if(!actor_animateOnce($chell,"ent-compstation-idle")){
			return;
		}
		waitForAnimation($chell,"ent-compstation-idle",-0.05);		
		
		if(!actor_animateOnce($chell,"ent-compstation-idle")){
			return;
		}
		waitForAnimation($chell,"ent-compstation-scan",-0.05);
	}
}

void borgCube_npcBeamIn()
{
	//beam effect for gravunit - can't play effect on it because it is not a model
	entity e;
	vector vCap;
	e = spawn("SFX_beamsparkle_boogaloo","model","models/fx/fx-beamsparkle-boogaloo2.tik","scale","1.5");
	
	
	//vector vOrigin;
	//vOrigin = $borgCube_npcBeamIn.getOrigin();

	//ready antigrav units
	//$anigravUnitFederation0Gravnode.bind($anigravUnitFederation0Origin);
	$anigravUnitFederation0Puzzle.bind($anigravUnitFederation0Origin);
	$anigravUnitFederation0Trigger.bind($anigravUnitFederation0Origin);
	$anigravUnitFederation0Cap.bind($anigravUnitFederation0Origin);
	$anigravUnitFederation0.bind($anigravUnitFederation0Origin);
	$anigravUnitFederation0WalkTo.bind($anigravUnitFederation0Origin);
	
	//$anigravUnitFederation1Gravnode.bind($anigravUnitFederation1Origin);
	$anigravUnitFederation1Puzzle.bind($anigravUnitFederation1Origin);
	$anigravUnitFederation1Trigger.bind($anigravUnitFederation1Origin);
	$anigravUnitFederation1Cap.bind($anigravUnitFederation1Origin);
	$anigravUnitFederation1.bind($anigravUnitFederation1Origin);
	$anigravUnitFederation1WalkTo.bind($anigravUnitFederation1Origin);
	
	/*
	entity eBall0;
	entity eBall1;
	eBall0 = spawn("script_model","model","models/projectile/projectile-photonball-voyager.tik","origin",""+$anigravUnitFederation0Cap.getOrigin());
	eBall1 = spawn("script_model","model","models/projectile/projectile-photonball-voyager.tik","origin",""+$anigravUnitFederation1Cap.getOrigin());
	globalCoop_main_waitAFrame();
	//bind effect to torpedo
	eBall0.bind($anigravUnitFederation0Cap);
	eBall1.bind($anigravUnitFederation1Cap);
	eBall0.scale(7);
	eBall1.scale(7);
	*/
	
	//objective marker
	vector vPos;
	vPos = $anigravUnitFederation0Origin.getOrigin();
	vPos_z += -110;
	$objectiveMarker0.origin(vPos);
	
	vPos = $anigravUnitFederation1Origin.getOrigin();
	vPos_z += -110;
	$objectiveMarker1.origin(vPos);
	
	wait(1);
	
	$objectiveMarker0.bind($anigravUnitFederation0Origin);
	$objectiveMarker1.bind($anigravUnitFederation1Origin);
	
	//Make HazardTeam NPC follow/guard the Torpedo
	//set a series of tendencies that will instruct the AI/State Files
	$demolitionTeam0.followtarget( $anigravUnitFederation0WalkTo );
	$demolitionTeam0.settendency("follow",0);
	$demolitionTeam0.settendency("followobject",1);
		
	// // // THIS WAS USED FOR TESTING
	//set max follow dist, avialable are (the bigger the object to follow the greater the distance should be)
	//There are limits imposed inside: P_Team_Combat.st, P_Team_Core.st, P_Team_Batleth_Core.st
	/*default/none: 		min/max 70->150
	followobjectdist300	min/max 150->300
	followobjectdist500	min/max 300->500
	followobjectdist750	min/max 500->750
	followobjectdist1000	min/max 750->1000 */
	//$demolitionTeam0.settendency("followobjectdist500",1);
	//$demolitionTeam0.followcombatrangemin( 300 );
	//$demolitionTeam0.followrangemin( 300  );
	

	//WAVE 1
	//WAVE 1
	//WAVE 1
	//
	//move unit	
	$anigravUnitFederation0Origin.movetopos($borgCube_gravunitBeamIn.getOrigin());
	$anigravUnitFederation0Origin.time(0.01);
	
	$demolitionTeam0.origin($borgCube_npcBeamIn.getOrigin());
	thread globalCoop_player_makeSolidASAP($demolitionTeam0);
	$demolitionTeam0.displayEffect("TransportIn","Federation");

	$anigravUnitFederation0.solid();
	$anigravUnitFederation0Cap.show();
	thread globalCoop_player_makeSolidASAP($anigravUnitFederation0);

	
	//move beam effect here
	globalCoop_main_waitAFrame();
	vCap = $anigravUnitFederation0Cap.getOrigin();
	vCap_z += -70;
	e.origin ( vCap );
	
	globalCoop_main_waitAFrame();
	$anigravUnitFederation0.show();
	
	wait(2.2);
	$demolitionTeam0.walkto("$borgCube_npcBeamInOutofway","run");
	
	e.scale(0.001);	
	
	wait(1);
	$anigravUnitFederation0Origin.followpath($borgCube_gravunitPath1);
	$anigravUnitFederation0.missionobjective(1);
	thread borgCube_gravunitLightBlink($objectiveMarker0);
	
	wait(1);
	$demolitionTeam0.ai_on();
	
	
	//wait before next torpedo is brought in
	float fWait = 1;
	vector vBeamin;
	vector vDist1;
	vector vDist2;
	vBeamin = $borgCube_npcBeamIn.getOrigin();
	while(fWait)
	{
		wait(1);
		
		if(doesEntityExist($anigravUnitFederation0Origin)){
			vDist1 = $anigravUnitFederation0Origin.getOrigin();
		}else{ vDist1 = '0 0 0'; }
		
		if(doesEntityExist($demolitionTeam0)){
			vDist2 = $demolitionTeam0.getOrigin();
		}else{ vDist2 = '0 0 0'; }
		
		fWait = 0;
		
		//wait until distance of gravunit and npc is above x units
		if(vDist1 != '0 0 0'){
			if(vectorLength(vDist1 - vBeamin) < 300){
				fWait = 1;
			}
		}
		if(vDist2 != '0 0 0'){
			if(vectorLength(vDist2 - vBeamin) < 300){
				fWait = 1;
			}
		}
	}
	
	//Make HazardTeam NPC follow/guard the Torpedo
	//set a series of tendencies that will instruct the AI/State Files
	$demolitionTeam1.followtarget( $anigravUnitFederation1WalkTo );
	$demolitionTeam1.settendency("follow",0);
	$demolitionTeam1.settendency("followobject",1);
	
	$anigravUnitFederation1Origin.movetopos($borgCube_gravunitBeamIn.getOrigin());
	$anigravUnitFederation1Origin.time(0.01);
	
	$demolitionTeam1.origin($borgCube_npcBeamIn.getOrigin());
	thread globalCoop_player_makeSolidASAP($demolitionTeam0);
	$demolitionTeam1.displayEffect("TransportIn","Federation");
	
	$anigravUnitFederation1.solid();
	$anigravUnitFederation1Cap.show();
	thread globalCoop_player_makeSolidASAP($anigravUnitFederation1);
	$anigravUnitFederation1.show();
	
	//show beam effect again
	e.scale(1.5);
	
	wait(2.2);
	$demolitionTeam0.walkto("$borgCube_npcBeamInOutofway","run");
	
	//remove beam effect
	e.remove();

	wait(1);
	$anigravUnitFederation1Origin.followpath($borgCube_gravunitPath2);
	$anigravUnitFederation1.missionobjective(1);
	thread borgCube_gravunitLightBlink($objectiveMarker1);
	
	wait(1.5);
	$demolitionTeam1.ai_on();
	
}

void borgCube_gravunitPath1End()
{
	$anigravUnitFederation0Cap.rotateZup(-90);
	$anigravUnitFederation0Cap.time(2);
	wait(1);
	$anigravUnitFederation0Trigger.triggerable();
	
	$anigravUnitFederation0Puzzle.puzzleobject_solvedthread( "borgCube_torpedo0Ready" );
	$anigravUnitFederation0Puzzle.puzzleobject_canceledthread( "borgCube_resetTricorderPuzzle0" );
	$anigravUnitFederation0Puzzle.puzzleobject_itemusedthread( "borgCube_tricorderPuzzle0" );
}

void borgCube_gravunitPath2End()
{
	$anigravUnitFederation1Cap.rotateZup(-90);
	$anigravUnitFederation1Cap.time(2);
	wait(1);
	$anigravUnitFederation1Trigger.triggerable();
	
	$anigravUnitFederation1Puzzle.puzzleobject_solvedthread( "borgCube_torpedo1Ready" );
	$anigravUnitFederation1Puzzle.puzzleobject_canceledthread( "borgCube_resetTricorderPuzzle0" );
	$anigravUnitFederation1Puzzle.puzzleobject_itemusedthread( "borgCube_tricorderPuzzle0" );
}

//---------------------
// tricorderPuzzle
// tricorder puzzle stuff
//---------------------
void borgCube_tricorderPuzzle0()
{
	globalTricorderMod_SetNumWaves ( 1 );
	globalTricorderMod_SetAllRandomParms();
	globalTricorderMod_Run( $anigravUnitFederation0Puzzle, 0 );
}

void borgCube_resetTricorderPuzzle0()
{
	$bridgePower.puzzleobject_reset();
}

void borgCube_tricorderPuzzle1()
{
	globalTricorderMod_SetNumWaves ( 1 );
	globalTricorderMod_SetAllRandomParms();
	globalTricorderMod_Run( $anigravUnitFederation1Puzzle, 0 );
}

void borgCube_resetTricorderPuzzle1()
{
	$bridgePower.puzzleobject_reset();
}

void borgCube_torpedo0Ready()
{
	$anigravUnitFederation0Cap.rotateZdown(-90);
	$anigravUnitFederation0Cap.time(2);
}

void borgCube_torpedo1Ready()
{
	$anigravUnitFederation1Cap.rotateZdown(-90);
	$anigravUnitFederation1Cap.time(2);
}

void borgCube_gravunitLightBlink(entity eLight)
{
	while(doesEntityExist(eLight)){
		//eLight.scale(0.01);
		eLight.hide();
		wait(0.5);
		if(!doesEntityExist(eLight)){
			return;
		}
		//eLight.scale(0.5);
		eLight.show();
		wait(1);
	}
}

void door_unlock()
//unlocks a targeted door from trigger activation
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		string sTargetname;
		sTargetname = eTrigger.getStringVar("uservar1");
		
		if(sTargetname == ""){
			sTargetname = eTrigger.getTarget(0);
		}
		
		if(sTargetname == ""){
			globalCoop_main_print("door_unlock()->No Target found on trigger");
			return;
		}
		
		entity eDoor;
		eDoor = getEntity(sTargetname);
		
		if(!doesEntityExist(eDoor)){
			globalCoop_main_print("door_unlock()->Target not found: "+sTargetname);
		}
		
		eDoor.unlock();
		//globalCoop_main_print("door_unlock()->UNLOCKED: "+eDoor.getTargetname());
	}
}

void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
//credits, and history of map
//mark this map as completed to the scripts (can not fail anymore)
	globalCoop_mission_accomplished();
	globalCoop_main_globalCommand("nodamage");
	
//credits, and history of map
	thread globalCoop_player_transmittToAll("exec cfg/maps/coop_rotec/cCredits.cfg\n");
	globalCoop_huds_AddAll("coop_cCredits");
	wait(10);
	
	//end server if in singleplayer
	if(getCvarInt("g_gametype") == 0){
		stuffcmd("disconnect\n");
		return;
	}
	
//load next map
	thread globalCoop_mission_completed("coop_aftermath1");
}