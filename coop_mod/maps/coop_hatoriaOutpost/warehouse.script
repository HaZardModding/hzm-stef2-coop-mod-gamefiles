//warehouse features - The purpose of this file is to keep the map-script easy to read

void warehouseEnter()
{
	entity eTrigger;
	entity eActivator;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		eActivator = eTrigger.getLastActivatingEntity();
		if(doesEntityExist(eActivator))
		{
			eActivator.origin($munro.getOrigin());
		}
	}
	
//make the players respawn, ONLY respawn at the Klingon Warehouse transporter
	$ipd1.angles('0 90 0');
	$ipd2.angles('0 90 0');
	$ipd3.angles('0 90 0');
	$ipd4.angles('0 90 0');
	$ipd5.angles('0 90 0');
	$ipd6.angles('0 90 0');
	$ipd7.angles('0 90 0');
	$ipd8.angles('0 90 0');
	$ipd1.origin('13025 -3358 -732');
	$ipd2.origin('13087 -3358 -732');
	$ipd3.origin('13146 -3358 -732');
	$ipd4.origin('13025 -3358 -732');
	$ipd5.origin('13087 -3358 -732');
	$ipd6.origin('13146 -3358 -732');
	$ipd7.origin('13025 -3358 -732');
	$ipd8.origin('13087 -3358 -732');
	
//make klingons not pushable
	$klingon3.mass(99999);
	$klingon3.pushable(0);
	$klingon4.mass(99999);
	$klingon4.pushable(0);
	
	$klingon3.damagemodifier("targetname","$player",0);
	$klingon4.damagemodifier("targetname","$player",0);

	$klingon3.damagemodifier("actortype","teammate",1);
	$klingon4.damagemodifier("actortype","teammate",1);
	
	$klingon3.damagemodifier("actortype","friend",1);
	$klingon4.damagemodifier("actortype","friend",1);
	
//make klingons a bit smarter
	$klingon3.max_inactive_time(3);
	$klingon4.max_inactive_time(3);
	
	cinematic();
	freezeplayer();
	cam_fadeOut( 0.05, 0, 0,0, 1 );
	wait(0.1);
	letterbox(0.1);
	
	//make sure no enemies enter
	$warehouseEnterDoor.close();
	$warehouseEnterDoor.lock();
	
	$cam1.follow($cin_warehouse_enter);
	$munro.origin('13393.00 -3391.00 -860.00');
	$munro.headwatch($klingon3);
	
	$cam1.cut();
	cuecamera($cam1);
	wait(0.1);
	cam_fadeIn( 1, 0, 0,0, 0 );
	
	//[b610] chrissstrahl - fix ai attacking player during cinematic
	level_ai(0);
	
//MAKE KLINGONS STAND UP
	globalCoop_actor_animateWaitForAnimation($klingon3,"from_crouch");
	$klingon3.stopanimating();
	$klingon3.anim("idle");
	$klingon3.headwatch($munro);
	
//play dialog klingon
	$klingon3.playdialog( "localization/sound/dialog/m9l1/mercm1_fedfri.mp3", 1, 500, 0);	
	waitfordialog( $klingon3 );
	
//klingon female shows
	globalCoop_actor_animateWaitForAnimation($klingon4,"from_crouch");
	$klingon4.stopanimating();
	$klingon4.anim("idle");	
	$klingon4.headwatch($munro);
	
	wait(0.5);
	$cam2.follow($cin_warehouse_munro);
	wait(0.1);
	$cam2.cut();
	cuecamera($cam2);
	
	$munro.show();
	$munro.notsolid();
	$munro.playdialog( "localization/sound/dialog/m4l1/munro_armory.mp3", 1, 500, 0);	
	waitfordialog( $munro );
	
	wait(1);
	
	$cam1.follow($cin_warehouse_armory);
	wait(0.1);
	$cam1.cut();
	cuecamera($cam1);
	
	//play dialog klingon female - is she mocking us ?
	$klingon4.playdialog( "localization/sound/dialog/m9l1/mercf1_usedtobe.mp3", 1, 500, 0);
	
	$klingon4.walkto("$warehouseBathlethNode","walk");
	waitfor($klingon4);
	
	$klingon4.turntowardsentity($warehouseBatleth);
	$klingon4.headwatch($warehouseBatlethLookAtMe,10);
	wait(4);
	
	//waitfordialog( $klingon4 );

//play dialog munro
	//entity ePlayer;
	//ePlayer = globalCoop_return_playerClosestActive($klingon3);
	//ePlayer.simpleplaydialog( "localization/sound/dialog/m4l1/munro_armory.mp3", 1, 500);	
	
	//allow enemies enter again
	$warehouseEnterDoor.unlock();
	$warehouseEnterDoor.open($world);
	$warehouseEnterDoor.wait(30);
	
	wait(0.1);
	cam_fadeOut( 0.05, 0, 0,0, 0 );
	wait(1);
	$munro.notsolid();
	$munro.hide();

	noncinematic();
	releaseplayer();
	clearletterbox(0.1);
	cam_fadeIn( 0.05, 0, 0,0, 1 );
	
	//[b610] chrissstrahl - fix ai attacking player during cinematic
	level_ai(1);
	
	$warehouseEnterDoor.wait(3);
	
//turn all players that are close towards the actor
/*
	float fPlayerIdInUse;
	//[b60025] Chrissstrahl - now using Entity numbers instead of targetnames
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getEntity("*"+ fPlayerIdInUse);
		if(globalCoop_check_existingLivingEntity(ePlayer)){
			if(!globalCoop_check_playerSpectator(ePlayer)){
				if(ePlayer.isWithinDistanceOf($klingon4,333) == 1){
					ePlayer.turntowardsentity($klingon4);
				}
			}
		}
	}
	*/
	
//klingon male ready for combat
	$klingon3.headwatchtarget("none",10);
	$klingon3.ai_on();
	$klingon3.immortal(0);
	
	wait(2);
	
//klingon female is now ready for combat
	$klingon4.headwatchtarget("none",10);
	$klingon4.ai_on();
	$klingon4.immortal(0);
	
	//wait(0.4);
//play dialog klingon - doesn't like munro asking for amory
//klingon male ready for combat
	//$klingon3.playdialog( "localization/sound/dialog/m9l1/klingon_arrg.mp3", 1, 500, 0);		
	//waitfordialog( $klingon3 );
	

	
//setnodeid( Integer id_number )
//Sets the ID number of the helper nodes that this actor can use 
//nodeID( Integer node_id )
//Assigns an ID to this node
//maxkills( Integer max_kills )
//Specifies the maximum number of kills that can be done from this node 
// minenemyrange( Float min_range )
    // Specifies the minimum range an enemy is allowed to get before actor leaves this node 
// minhealth( Float min_health )
    // Specifies the minimum health an actor is allowed to get to before leaving this node
// priority( Float priority )
    // Specfies the priority for this node 
// sendnodecommand( String commandToSend )
    // sends an event to the user of the node 
// setcoverdir( String cover_dir )
    // Specifies the direction from the cover that the AI can attack 
// setcovertype( String cover_type )
    // Specifies the covertype of the node 
// setcustomtype( String type )
    // Specifies a custom helper node type 
// setnodeanim( String animation )
    // Sets the animation that will be played by the actor on this node 
// setnodeentrythread( String thread )
    // Sets the thread that will be called by the actor when it reaches this node 
// setnodeexitthread( String thread )
    // Sets the thread that will be called by the actor when it leaves this node
// wait( Float time )
    // Makes a patrolling AI pause at this node for the specified time 
// waitforanim( Boolean wait_for_anim )
    // Makes the AI wait until the anim is finished before finishing a behavior 
// waitrandom( Float max_time )
    // Makes a patrolling AI pause randomly for a min time of 1 to a max time of specified 
}

void warehouseUnlockExitDoor()
{
//play klingon confirm sound
	$warehouseExitDoor.playsound("sound/ships/klingon/kling_beep1.wav",0,1,128);
//Unlock the door
	$warehouseExitDoor.unlock();
//open door
	$warehouseExitDoor.open($world);
//shut down ff
	thread hallwayFFOff();
//remove clip, so Monsters can attack player from both sides
	$hallwayEncounter1MoveClip.remove();//removes also hanging down ceiling part
//remove push trigger
	$hallwayEncounter1MonsterPush.remove();
//remove use symbol
	$openDoorSymbol.remove();
//upxdate objective -bypass locked door
	thread objectiveWarehouseLeft();
//turn off trigegr light
	$world.light_intensity("warehouseExitDoor",1);//turn off lights
//remove the useable symbol
	$warehouseExitDoorTriggerUsableSymbol.remove();
}


//ai walk over to the box when it was not fighting, to show the player the batleth in the box
//the node athe ai enters runs this thread, using patrol nodes
void warehouseShowBatleth()
{
//run this thread only once, the node seams to execute while ai is inside node
	if($world.getFloatVar("warehouseShowBatleth_running") == 1){
		return;
	}
	$world.setFloatVar("warehouseShowBatleth_running",1);
	
	if(doesEntityExist($klingon4)){
		$klingon4.ai_off();
		$klingon4.turntowardsentity($warehouseBatleth);
		$klingon4.headwatch($warehouseBatlethLookAtMe,10);
	}
	
//look into the box, until the player takes the batleth, or a fight starts
	float fAlive=1;
	while(fAlive)
	{
		wait(0.5);
		if( doesEntityExist($klingon4) == 1 && doesEntityExist($warehouseBatleth) == 1){
			if($klingon4.getHealth() > 0){
				if(!$klingon4.isWithinDistanceOf($t228,96)){
				//remove path 1
					$warehousePath1.remove();
					$t227.remove();
					$t228.remove();
					
					wait(1);
					fAlive=0;
				}
			}else{
				fAlive=0;
			}
		}
		else{
			fAlive=0;
		}
	}
	
	$warehouseBatlethLookAtMe.remove();
	
	if(doesEntityExist($klingon4)){
		//set new node ID, she may now return to cover
		$klingon4.setNodeId(2);
		$klingon4.headwatchtarget("none",10);
		$klingon4.ai_on();
	}
	
	fAlive=1;
	while(fAlive){
		if(doesEntityExist($klingon4)){
			if($klingon4.isWithinDistanceOf($warehouseCoverNode2,32)){
				$klingon4.setNodeId(0);
			//remove path 2
				$warehousePath2.remove();
				$t229.remove();
				$t230.remove();
			}
		}else{
			fAlive=0;
		}
		wait( 0.5 );
	}
}



void warehouseBigBoxPush()
{
	$warehouseBigBox.nouse();
	$warehouseBigBox.playsound("sound/environment/rock/rock_slab.wav",0,2,128);//snd,channel,vol,distance
	$warehouseBigBoxOrigin.moveNorth(26);//312
	$warehouseBigBoxOrigin.time(1);
	waitFor($warehouseBigBoxOrigin);
	$warehouseBigBox.stopsound(0);//channel
	if(!$warehouseBigBoxOrigin.isWithinDistanceOf($warehouseBigBoxTarget,20)){
		thread setOnUseThread($warehouseBigBox,"warehouseBigBoxPush");
	}
	else{
		$boxSymbol.remove();
	}
}


void warehousePlayerInShaft()
{
//Update objective - find way to bypass door
	thread objectiveWarehouseExitDoor();
//spawn attacker in the warehouse
	thread warehouseEncounter2Spawner();
	
	$warehouseExitDoorTriggerUsableSymbol.missionobjective(1);
}


void warehouseEncounter2Spawner()
{
//SPAN A ENEMY, will be pushed down and triggers the explosion
	$spawn1.modelName("char/alien-type1b-chewer.tik");
	$spawn1.setspawngroupID(02);
	$spawn1.setspawngroupdeaththread("warehouseEncounter2Spawner");
	$spawn1.spawnnow();
}


