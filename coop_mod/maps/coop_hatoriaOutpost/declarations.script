//VARS//////////////////////////////////////////////////////////////////////////
float fExterminated;							//default is 0
float fFallschiermspringer;						//default is 0
float fFallschiermspringerPreviouse;			//default is 0
string sPathOld;								//default is "" (empty string)
float float_landingPadPowerObjectiveShown;		//default is 0
float float_landingPlatformLightsTime;			//default is 0
float float_landingPlatformPowerPannel;			//default is 0
float float_landingPlatformFf = 1;				//default is 1
float float_landingPlatformFfDisabled;			//default is 0
float float_warehouseGrate;						//default is 0
float float_shuttleExteriorDoor;				//default is 0
float fHZMthunderMaxDistance	= 220;			//thunder bolt damage radius
float fHZMthunderDamage			= 300;			//thunder bold damage ammount
float float_badezimmerWaschbecken;				//default is 0
float float_badezimmerTolietState;				//default is 0
float float_basementWasserAbgestellt;			//default is 0
float float_holodeckProgrammRomInstallSpawn1;	//default is 0
float float_holodeckProgrammRomInstallSpawn2;	//default is 0
float float_holodeckProgramm;					//default is 0
float float_holodeckProgrammSelection;			//default is 0
float float_holodeckProgrammSelectionLast;		//default is 0
float float_holodeckProgrammSelectionActive;	//default is 0
float float_headmasterPuzzleIsSolved;			//default is 0
float float_singleplayerPuzzle;					//default is 0
float float_approachedReplicatorSolvedPuzzle;	//default is 0
entity entity_holodeck_lastActivator;			//default is NULL
//AQUARIUM//////////////////////////////////////////////////////////////////////
void aquariumFishStart();
void aquariumRoundDone();
//THUNDER///////////////////////////////////////////////////////////////////////
void blitzSetup();
void blitzStart();
void blitzImpact();
void blitzBlink();
//OBJECTIVES////////////////////////////////////////////////////////////////////
void objectiveWarehouseEntering();
void objectiveWarehouseTakenBathlet();
void objectiveWarehouseExitDoor();
void objectiveWarehouseLeft();
void objectiveFedoutpostEntering();
void objectiveFedoutpostReplicated();
void objectiveFedoutpostLandingPadRoutePannelOpen();
void objectiveFedoutpostLandingPadRoutePannel();
void objectiveFedoutpostLandingPadActivate();
void objectiveFedoutpostLandingPadLights();
void objectiveFedoutpostEvacuateToShuttle();
void objectiveFedoutpostEvacuateToShuttleComplete();
void objectiveFedoutpostEvacuateToShuttleLanded();
//REPLICATOR////////////////////////////////////////////////////////////////////
float replicator_ChekEmpty(entity eReplicator);
void replicator_AddItem(entity eReplicator,string sItemType,string sItem,float fScale,float fOffset,vector vPlayerOffset1,vector vPlayerOffset2,string sTag,string sAlias);
void replicator_AddItemAll(string sTargetname,string sItemType,string sItem,float fScale,float fOffset,vector vPlayerOffset1,vector vPlayerOffset2,string sTag,string sAlias);
void replicator_Spawn(vector vOrigin,string sTargetname,float fAngle);
void replicator_Replicate(entity eReplicator,float fItem);
void replicator_Recycle(entity eReplicator);
void replicator_Pickup(entity eReplicator,entity ePlayer);
string replicator_QueryDatabase(entity eReplicator,float fItem);
void replicator_Used();
//LANDINGPLATFORM///////////////////////////////////////////////////////////////
//landingplatfor features - The purpose of this file is to keep the map-script easy to read
void landingplatformLightsToggle();
void landingplatformLights(float fOnOrOff);
//FALLSCHIRMSPRINGERS///////////////////////////////////////////////////////////
float returnFallschirmspringerId(entity e);
void relaseFallschirmspringer(float fNumber);
void blockedFallschirmspringer();
void cageInFallschirmspringerStop();
void cageInFallschirmspringer(entity e,vector vVelocity);
void startFallschirmspringer(float fNumber,vector vStart,vector vLand,string sModel);
void fallschirmspringersStartAttack();
entity fallschirmspringerSelectStart();
vector fallschirmspringerReturnTarget(entity eStart);
void fallschirmspringerGroupdeath();
void fallschirmspringersSpawn(vector vStart,vector vLand);
//HOLODECK//////////////////////////////////////////////////////////////////////
void holodeckSelectProgram();
void holodeckEnter();
void holodeckSingleplayerLoadSavegame();
void holodeckShutdown();
void holodeckShutdownPlayer(entity ePlayer,float fProgram);
void holodeckPlayerInside(entity ePlayer);
void holodeckTakeRealWeapons(entity ePlayer);
void holodeckGiveRealWeapons(entity ePlayer);
void holodeckTransFromRom();
void holodeckTransFromRomHandle(entity ePlayer);
void holodeckTransFromBlArena();
void holodeckTransFromBlArenaHandle(entity ePlayer);
void holodeckTransFromOberlausitz();
void holodeckTransFromOberlausitzHandle(entity ePlayer);
void holodeckTransFromTo(entity eFrom,entity eTo,entity ePlayer);
void holodeckProgramRomInstallSetup();
void holodeckProgramRomInstallSpawnAi(entity eLocation);
void holodeckProgramRomInstallromInstall1Killed();
void holodeckProgramRomInstallromInstall2Killed();
void holodeckProgramRomInstallDisableFF1();
void holodeckProgramRomInstallConferenceDoor();
void holodeckProgramRomInstallTabelPannel();
void holodeckProgramBlArenaSetup();
void holodeckProgramBlArenaSetupSpawnAi(entity eLocation);
void holodeckProgramBlArenaWarriorSetup(entity eActor);
void holodeckProgramBlArenablArena1Killed();
void holodeckProgramBlArenablArena2Killed();
void holodeckProgramBlArenablArena3Killed();
void holodeckProgramBlArenablArena4Killed();
void holodeckProgramBlArenablArena5Killed();
void holodeckProgramBlArenablArena6Killed();
void holodeckProgramOberlSetup();
void holodeckProgramOberlCopyFromHZM();
//HEADMASTER////////////////////////////////////////////////////////////////////
void headmasterLightsToogle();
void headmasterlaptopUsed();
void headmasterUpdateSecurityClearance();
//WAREHOUSE/////////////////////////////////////////////////////////////////////
void warehouseEnter();
void warehouseUnlockExitDoor();
void warehouseBigBoxPush();
void warehousePlayerInShaft();
void warehouseEncounter2Spawner();
//HALLWAY///////////////////////////////////////////////////////////////////////
void hallwayEncounter1();
void hallwayEncounter1Spawner();
void hallwayEncounter1CeilingExplosionSetup();
void hallwayEncounter1CeilingExplosion();
void hallwayFFOn();
void hallwayFFOff();
//DYNAMIC LIGHT/////////////////////////////////////////////////////////////////
void dynlight();
//INFLIGHT//////////////////////////////////////////////////////////////////////
void inflightStart();
void inflightSpawn();
//SHUTTLE///////////////////////////////////////////////////////////////////////
void shuttleSetup();
void shuttleSetupTriggers();
void shuttleSetupTriggerEntity(entity e);
void shuttleBindStructural(entity e);
void shuttleBindVisual(entity e);
void shuttleExteriorDoor();
void shuttleExteriorDoorOpen();
void shuttleExteriorDoorClose();
void shuttleDoorRightRear();
void shuttleDoorLeftRear();
void shuttleDoorRightCockpit();
void shuttleDoorLeftCockpit();
void shuttleEngineLeft();
void shuttleEngineRight();
void shuttleHullTop();
void shuttleHullBottom();
void shuttleHullLeft();
void shuttleHullRight();
void shuttleHullBow();
void shuttleHullStern1();
void shuttleInverter();
void shuttleTransporter();
void shuttleTransporter1();
void shuttleTransporter2();
void shuttleLandingSequence();
void shuttleStartSequnce();
void shuttleUpdateSpawn();
void shuttleOnblockKill();
void shuttleSetOnBlockKillThread(entity e);
//BADEZIMMER////////////////////////////////////////////////////////////////////
void badezimmerWaschbecken();
void badezimmerDynlight();
void badezimmerTolietOpen();
void badezimmerTolietClose();
void badezimmerWaschbeckenWasserUp();
void badezimmerWaschbeckenWasserDown();
//DINNER ROOM///////////////////////////////////////////////////////////////////
void dinnerLiftSpawner();
void dinnerOpeningShow();
void dinnerTime();
void dinnerPlayerBeamedIn();
//basement//////////////////////////////////////////////////////////////////////
void basementWasserZufuhr();
//SINGLEPLAYER Compatibility////////////////////////////////////////////////////
void singleplayerCompatibilityHudprint(entity ePlayer,string sText);


