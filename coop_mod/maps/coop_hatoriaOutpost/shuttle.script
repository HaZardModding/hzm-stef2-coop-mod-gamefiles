//shuttle related functions - purpose: keep script organized
void shuttleSetup()
{
//setup killmessages for coop 6.0 dll
	$movementClip_ExteriorDoor_shuttleV2s.setStringVar("uservar1","killmessage= was crushed by a ^2Federation Shuttle");
	$movementClip_ExteriorDoor_shuttleV2s.setStringVar("uservar2","killmessage_de= wurde zerquetscht von einem ^2föderations Shuttle");
	
	$movementClip_hull1_shuttleV2s.setStringVar("uservar1","killmessage= was crushed by a ^2Federation Shuttle");
	$movementClip_hull1_shuttleV2s.setStringVar("uservar2","killmessage_de= wurde zerquetscht von einem ^2föderations Shuttle");
		
	$movementClip_hull2_shuttleV2s.setStringVar("uservar1","killmessage= was crushed by a ^2Federation Shuttle");
	$movementClip_hull2_shuttleV2s.setStringVar("uservar2","killmessage_de= wurde zerquetscht von einem ^2föderations Shuttle");

//Callvolume
	legacy_replace($insideShuttleArea_shuttleV2s,"shuttleStartSequnce");
	legacy_addRequiredEntity($insideShuttleArea_shuttleV2s,"team");
	wait(1);
	shuttleBindStructural($insideShuttleArea_shuttleV2s);
//func beam
	shuttleBindStructural($funcbeam_torpedo_shuttleV2s);
//DOORS
	$scriptObject_interiorDoorRightRear1_shuttleV2s.bind($origin_interiorDoorRightRear1_shuttleV2s);
	$scriptObject_interiorDoorRightRear2_shuttleV2s.bind($origin_interiorDoorRightRear2_shuttleV2s);
	$scriptObject_interiorDoorLeftRear1_shuttleV2s.bind($origin_interiorDoorLeftRear1_shuttleV2s);
	$scriptObject_interiorDoorLeftRear2_shuttleV2s.bind($origin_interiorDoorLeftRear2_shuttleV2s);
	$scriptObject_interiorDoorRightCockpit1_shuttleV2s.bind($origin_interiorDoorRightCockpit1_shuttleV2s);
	$scriptObject_interiorDoorRightCockpit2_shuttleV2s.bind($origin_interiorDoorRightCockpit2_shuttleV2s);
	$scriptObject_interiorDoorLeftCockpit1_shuttleV2s.bind($origin_interiorDoorLeftCockpit1_shuttleV2s);
	$scriptObject_interiorDoorLeftCockpit2_shuttleV2s.bind($origin_interiorDoorLeftCockpit2_shuttleV2s);
	$triggerMultiple_exteriorDoorTop_shuttleV2s.bind($origin_exteriorDoorTop_shuttleV2s);
	$triggerMultiple_exteriorDoorBottom_shuttleV2s.bind($origin_exteriorDoorBottom_shuttleV2s);
//ORIGINS
	shuttleBindStructural($movementClip_ExteriorDoor_noDrop_shuttleV2s);
	shuttleBindStructural($movementClip_ExteriorDoor_shuttleV2s);
	shuttleBindStructural($origin_shakeAnim_shuttleV2s);
	shuttleBindStructural($origin_exteriorDoorBottom_shuttleV2s);
	shuttleBindStructural($origin_exteriorDoorTop_shuttleV2s);	
	shuttleBindStructural($origin_interiorDoorRightRear1_shuttleV2s);
	shuttleBindStructural($origin_interiorDoorRightRear2_shuttleV2s);
	shuttleBindStructural($origin_interiorDoorLeftRear1_shuttleV2s);
	shuttleBindStructural($origin_interiorDoorLeftRear2_shuttleV2s);
	shuttleBindStructural($origin_interiorDoorLeftCockpit1_shuttleV2s);
	shuttleBindStructural($origin_interiorDoorLeftCockpit2_shuttleV2s);
	shuttleBindStructural($origin_interiorDoorRightCockpit1_shuttleV2s);
	shuttleBindStructural($origin_interiorDoorRightCockpit2_shuttleV2s);
	//shuttleBindStructural($spawn1_shuttleV2s);
	//shuttleBindStructural($spawn2_shuttleV2s);
//MOVEMENT CLIP
	shuttleBindStructural($movementClip_hull1_shuttleV2s);
	shuttleBindStructural($movementClip_hull2_shuttleV2s);
	shuttleBindStructural($clip_interior_shuttleV2s);
	shuttleBindStructural($movementClip_interior_shuttleV2s);
//onblock kill
	thread shuttleSetOnBlockKillThread($movementClip_hull1_shuttleV2s);
	thread shuttleSetOnBlockKillThread($movementClip_hull2_shuttleV2s);
//TRIGGERS
	shuttleBindStructural($triggerMultiple_hullBow_shuttleV2s);
	shuttleBindStructural($triggerMultiple_hullRight_shuttleV2s);
	shuttleBindStructural($triggerMultiple_hullTop_shuttleV2s);
	shuttleBindStructural($triggerMultiple_hullLeft_shuttleV2s);
	shuttleBindStructural($triggerMultiple_hullBottom_shuttleV2s);
	shuttleBindStructural($triggerMultiple_hullStern1_shuttleV2s);
	shuttleBindStructural($triggerMultiple_hullStern2_shuttleV2s);
	shuttleBindStructural($triggerMultiple_EnginesRight_shuttleV2s);
	shuttleBindStructural($triggerMultiple_EnginesLeft_shuttleV2s);
	//shuttleBindStructural($triggerMultiple_transporter1_shuttleV2s);
	//shuttleBindStructural($triggerMultiple_transporter2_shuttleV2s);
	//shuttleBindStructural($triggerUse_transporter_shuttleV2s);
	shuttleBindStructural($triggerUse_steam_shuttleV2s);
	shuttleBindStructural($triggerUse_interiorDoorRightCockpit_shuttleV2s);
	shuttleBindStructural($triggerUse_interiorDoorLeftCockpit_shuttleV2s);
	shuttleBindStructural($triggerUse_interiorDoorLeftRear_shuttleV2s);
	shuttleBindStructural($triggerUse_interiorDoorRightRear_shuttleV2s);
	shuttleBindStructural($triggerMultiple_interiorAutoOpenDoorRightRear);
	shuttleBindStructural($triggerMultiple_interiorAutoOpenDoorRightCockpit);
	shuttleBindStructural($triggerMultiple_interiorAutoOpenDoorLeftCockpit);
	shuttleBindStructural($triggerMultiple_interiorAutoOpenDoorLeftRear);
	shuttleBindStructural($triggerUse_exteriorDoor1_shuttleV2s);
	shuttleBindStructural($triggerUse_exteriorDoor2_shuttleV2s);
	shuttleBindStructural($triggerUse_engineInverter_shuttleV2s);
	shuttleBindStructural($triggerUse_exteriorDoor3_shuttleV2s);
	shuttleBindStructural($triggerHurt_engineRightFlame_shuttleV2s);
	shuttleBindStructural($triggerHurt_engineLeftFlame_shuttleV2s);
//BIND TO ORIGIN - MODELS/patches for visual effects
	shuttleBindVisual($model_sfxSteam_shuttleV2s);
	shuttleBindVisual($model_exteriorDoor_shuttleV2s);
	shuttleBindVisual($model_exterior_shuttleV2s);
	shuttleBindVisual($model_interior_shuttleV2s);
	shuttleBindVisual($model_engineRightFlame_shuttleV2s);
	shuttleBindVisual($model_engineLeftFlame_shuttleV2s);
	shuttleBindVisual($model_seat1_shuttleV2s);
	shuttleBindVisual($model_seat2_shuttleV2s);
	shuttleBindVisual($model_seat3_shuttleV2s);
	shuttleBindVisual($model_seat4_shuttleV2s);
	shuttleBindVisual($effect_damagedTopHull);
	shuttleBindVisual($effect_damagedRightHull);
	shuttleBindVisual($effect_damagedLeftHull);
	shuttleBindVisual($effect_damagedSternHull1);
	shuttleBindVisual($effect_damagedSternHull2);
	shuttleBindVisual($effect_damagedBowHull);
	shuttleBindVisual($effect_damagedBottomHull);
	$movementClip_ExteriorDoor_shuttleV2s.notsolid();
	$movementClip_ExteriorDoor_noDrop_shuttleV2s.notsolid();
//setup vars
	$model_exteriorDoor_shuttleV2s.setfloatvar("state",0 );//closed
//didn't work with models...
	$model_sfxSteam_shuttleV2s.hide();
	$model_engineRightFlame_shuttleV2s.hide();
	$model_engineLeftFlame_shuttleV2s.hide();
//hide exterior doors
	$triggerMultiple_exteriorDoorTop_shuttleV2s.hide();
	$triggerMultiple_exteriorDoorBottom_shuttleV2s.hide();
//make triggers solid
	shuttleSetupTriggers();
}

void shuttleSetupTriggers()
{
	shuttleSetupTriggerEntity($triggerMultiple_hullBow_shuttleV2s);
	shuttleSetupTriggerEntity($triggerMultiple_hullRight_shuttleV2s);
	shuttleSetupTriggerEntity($triggerMultiple_hullTop_shuttleV2s);
	shuttleSetupTriggerEntity($triggerMultiple_hullLeft_shuttleV2s);
	shuttleSetupTriggerEntity($triggerMultiple_hullBottom_shuttleV2s);
	shuttleSetupTriggerEntity($triggerMultiple_hullStern1_shuttleV2s);
	shuttleSetupTriggerEntity($triggerMultiple_hullStern2_shuttleV2s);
	shuttleSetupTriggerEntity($triggerMultiple_EnginesRight_shuttleV2s);
	shuttleSetupTriggerEntity($triggerMultiple_EnginesLeft_shuttleV2s);
}
void shuttleSetupTriggerEntity(entity e)
{
//must be done in this order, or else you mess the trigger
	e.destructible(1);
	e.triggerondamage(1);
	e.triggerondeath(1);
	e.health(100);
	e.solid();	//Make Solid,to avoid the boundingbox problem!
}

void shuttleBindStructural(entity e)
//clip and triggers
{
	if(doesEntityExist(e)){e.bind($origin_master_shuttleV2s);}
}

void shuttleBindVisual(entity e)
//models
{
	e.bind($origin_shakeAnim_shuttleV2s);
}

void shuttleExteriorDoor()
{//0=closed,1=busy,2=open,3=Waiting,4=Abbort
	if(float_shuttleExteriorDoor != 1){
		if(float_shuttleExteriorDoor == 2){//open -> Close
			shuttleExteriorDoorClose();
		}
		else{//Closed -> Open it up
			shuttleExteriorDoorOpen();
		}
	}
}
void shuttleExteriorDoorOpen()
{
	float_shuttleExteriorDoor=1;
	$triggerUse_exteriorDoor1_shuttleV2s.playsound("sound/vehicles/shuttlecraft/shuttle_beep2.wav",3 ,2 ,400 );
	wait(.025);
	$origin_exteriorDoorBottom_shuttleV2s.loopsound	("sound/vehicles/shuttlecraft/shuttle_door_open.wav",2 ,200 );
	$model_exteriorDoor_shuttleV2s.anim("closed");
	wait( 0.001 );
	$model_exteriorDoor_shuttleV2s.anim("opening");
	$origin_exteriorDoorTop_shuttleV2s.time ( 1.7 );
	$origin_exteriorDoorTop_shuttleV2s.rotateXdown ( -55 );
	$origin_exteriorDoorBottom_shuttleV2s.time ( 1.8 );
	$origin_exteriorDoorBottom_shuttleV2s.rotateXup ( -18 );
	wait(1.81);
	$origin_exteriorDoorBottom_shuttleV2s.rotateX(0);
	$origin_exteriorDoorTop_shuttleV2s.rotateX(0);
	$origin_exteriorDoorBottom_shuttleV2s.stoploopsound();
	$model_exteriorDoor_shuttleV2s.anim("open_idle");
	$movementClip_ExteriorDoor_shuttleV2s.solid();
	$origin_exteriorDoorBottom_shuttleV2s.playsound("sound/vehicles/shuttlecraft/shuttle_door_openclose_stop.wav",3 ,1 ,200 );
	$origin_exteriorDoorBottom_shuttleV2s.angles('-18 0 0');
	$origin_exteriorDoorTop_shuttleV2s.angles('55 0 0');
	float_shuttleExteriorDoor=2;//is Open
}

void shuttleExteriorDoorClose()
{
	float_shuttleExteriorDoor=1;//busy
	$movementClip_ExteriorDoor_shuttleV2s.notsolid();
	$triggerUse_exteriorDoor1_shuttleV2s.playsound	("sound/vehicles/shuttlecraft/shuttle_beep1.wav",3 ,2 ,400 );
	wait(.025);
	$origin_exteriorDoorBottom_shuttleV2s.loopsound	("sound/vehicles/shuttlecraft/shuttle_door_close.wav",2 ,200 );
	$model_exteriorDoor_shuttleV2s.anim("open_idle");
	wait( 0.001 );
	$model_exteriorDoor_shuttleV2s.anim("closing");
	$origin_exteriorDoorTop_shuttleV2s.time ( 1.7 );
	$origin_exteriorDoorTop_shuttleV2s.rotateXdown( 55 );
	$origin_exteriorDoorBottom_shuttleV2s.time ( 1.8 );
	$origin_exteriorDoorBottom_shuttleV2s.rotateXup( 18 );
	wait(1.81);
	$origin_exteriorDoorBottom_shuttleV2s.rotateX(0);
	$origin_exteriorDoorTop_shuttleV2s.rotateX(0);
	$origin_exteriorDoorBottom_shuttleV2s.stoploopsound();
	$origin_exteriorDoorBottom_shuttleV2s.playsound("sound/vehicles/shuttlecraft/shuttle_door_openclose_stop.wav",3 ,1 ,200 );
	$model_exteriorDoor_shuttleV2s.anim("closed");
	$origin_exteriorDoorBottom_shuttleV2s.angles('0 0 0');
	$origin_exteriorDoorTop_shuttleV2s.angles('0 0 0');
	float_shuttleExteriorDoor=0;//is closed
}


void shuttleDoorRightRear()
{
	if($origin_interiorDoorRightRear1_shuttleV2s.getFloatVar("open") == 2){
		return;
	}
	$triggerMultiple_interiorAutoOpenDoorRightRear.nottriggerable();
	float fMove = -28,fState=1;
 	if($origin_interiorDoorRightRear1_shuttleV2s.getFloatVar("open") == 1){
		fMove = globalCoop_return_floatNotNegative(fMove);
		fState=0;
	}
	$origin_interiorDoorRightRear1_shuttleV2s.playsound("sound/doors/enterprise_door1.wav",0,1,64);
	$origin_interiorDoorRightRear2_shuttleV2s.playsound("sound/doors/enterprise_door1.wav",0,1,64);
	$origin_interiorDoorRightRear1_shuttleV2s.setFloatVar("open",2);
	$origin_interiorDoorRightRear1_shuttleV2s.movebackward(fMove);
	$origin_interiorDoorRightRear2_shuttleV2s.moveforward(fMove);
	$origin_interiorDoorRightRear1_shuttleV2s.time(.5);
	$origin_interiorDoorRightRear2_shuttleV2s.time(.5);
	waitFor($origin_interiorDoorRightRear1_shuttleV2s);
//while doors are not shut, but suppose to be shut
	if(fState == 0){
		while(!$origin_interiorDoorRightRear1_shuttleV2s.isWithinDistanceOf($origin_interiorDoorRightRear2_shuttleV2s,51.5.5)){
			wait(.1);
		}
	}
//Update state
	$origin_interiorDoorRightRear1_shuttleV2s.setFloatVar("open",fState);
//enable auto-open trigger
	if(fState == 0){
		$triggerMultiple_interiorAutoOpenDoorRightRear.triggerable();
	}
}


void shuttleDoorLeftRear()
{
	if($origin_interiorDoorLeftRear1_shuttleV2s.getFloatVar("open") == 2){
		return;
	}
	$triggerMultiple_interiorAutoOpenDoorLeftRear.nottriggerable();
	float fMove = -28,fState=1;
 	if($origin_interiorDoorLeftRear1_shuttleV2s.getFloatVar("open") == 1){
		fMove = globalCoop_return_floatNotNegative(fMove);
		fState=0;
	}
	$origin_interiorDoorLeftRear1_shuttleV2s.playsound("sound/doors/enterprise_door1.wav",0,1,64);
	$origin_interiorDoorLeftRear2_shuttleV2s.playsound("sound/doors/enterprise_door1.wav",0,1,64);
	$origin_interiorDoorLeftRear1_shuttleV2s.setFloatVar("open",2);
	$origin_interiorDoorLeftRear1_shuttleV2s.movebackward(fMove);
	$origin_interiorDoorLeftRear2_shuttleV2s.moveforward(fMove);
	$origin_interiorDoorLeftRear1_shuttleV2s.time(.5);
	$origin_interiorDoorLeftRear2_shuttleV2s.time(.5);
	waitFor($origin_interiorDoorLeftRear1_shuttleV2s);
//while doors are not shut, but suppose to be shut
	if(fState == 0){
		while(!$origin_interiorDoorLeftRear1_shuttleV2s.isWithinDistanceOf($origin_interiorDoorLeftRear2_shuttleV2s,51.5)){
			wait(.1);
		}
	}
	$origin_interiorDoorLeftRear1_shuttleV2s.setFloatVar("open",fState);
	if(fState == 0){
		$triggerMultiple_interiorAutoOpenDoorLeftRear.triggerable();
	}
}

void shuttleDoorRightCockpit()
{
	if($origin_interiorDoorRightCockpit1_shuttleV2s.getFloatVar("open") == 2){
		return;
	}
	$triggerMultiple_interiorAutoOpenDoorRightCockpit.nottriggerable();
	float fMove = -28,fState=1;
 	if($origin_interiorDoorRightCockpit1_shuttleV2s.getFloatVar("open") == 1){
		fMove = globalCoop_return_floatNotNegative(fMove);
		fState=0;
	}
	$origin_interiorDoorRightCockpit1_shuttleV2s.setFloatVar("open",2);
	$origin_interiorDoorRightCockpit1_shuttleV2s.playsound("sound/doors/enterprise_door1.wav",0,1,64);
	$origin_interiorDoorRightCockpit2_shuttleV2s.playsound("sound/doors/enterprise_door1.wav",0,1,64);
	$origin_interiorDoorRightCockpit1_shuttleV2s.movebackward(fMove);
	$origin_interiorDoorRightCockpit2_shuttleV2s.moveforward(fMove);
	$origin_interiorDoorRightCockpit1_shuttleV2s.time(.5);
	$origin_interiorDoorRightCockpit2_shuttleV2s.time(.5);
	waitFor($origin_interiorDoorRightCockpit1_shuttleV2s);
//while doors are not shut, but suppose to be shut
	if(fState == 0){
		while(!$origin_interiorDoorRightCockpit1_shuttleV2s.isWithinDistanceOf($origin_interiorDoorRightCockpit2_shuttleV2s,51.5)){
			wait(.1);
		}
	}
	$origin_interiorDoorRightCockpit1_shuttleV2s.setFloatVar("open",fState);
	if(fState == 0){
		$triggerMultiple_interiorAutoOpenDoorRightCockpit.triggerable();
	}
}

void shuttleDoorLeftCockpit()
{
	if($origin_interiorDoorLeftCockpit1_shuttleV2s.getFloatVar("open") == 2){
		return;
	}
	$triggerMultiple_interiorAutoOpenDoorLeftCockpit.nottriggerable();
	float fMove = -28,fState=1;
 	if($origin_interiorDoorLeftCockpit1_shuttleV2s.getFloatVar("open") == 1){
		fMove = globalCoop_return_floatNotNegative(fMove);
		fState=0;
	}
	$origin_interiorDoorLeftCockpit1_shuttleV2s.playsound("sound/doors/enterprise_door1.wav",0,1,64);
	$origin_interiorDoorLeftCockpit2_shuttleV2s.playsound("sound/doors/enterprise_door1.wav",0,1,64);
	$origin_interiorDoorLeftCockpit1_shuttleV2s.setFloatVar("open",2);
	$origin_interiorDoorLeftCockpit1_shuttleV2s.movebackward(fMove);
	$origin_interiorDoorLeftCockpit2_shuttleV2s.moveforward(fMove);
	$origin_interiorDoorLeftCockpit1_shuttleV2s.time(.5);
	$origin_interiorDoorLeftCockpit2_shuttleV2s.time(.5);
	waitFor($origin_interiorDoorLeftCockpit1_shuttleV2s);
//while doors are not shut, but suppose to be shut
	if(fState == 0){
		while(!$origin_interiorDoorLeftCockpit1_shuttleV2s.isWithinDistanceOf($origin_interiorDoorLeftCockpit2_shuttleV2s,51.5)){
			wait(.1);
		}
	}
	$origin_interiorDoorLeftCockpit1_shuttleV2s.setFloatVar("open",fState);
	if(fState == 0){
		$triggerMultiple_interiorAutoOpenDoorLeftCockpit.triggerable();
	}
}

void shuttleEngineLeft()
{
//do not show damaged engine in hatoria
	return;
	
	if($triggerMultiple_EnginesLeft_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_EnginesLeft_shuttleV2s.nottriggerable();
		$model_engineLeftFlame_shuttleV2s.show();
		$model_engineLeftFlame_shuttleV2s.selfdetonate();
		$triggerHurt_engineLeftFlame_shuttleV2s.triggerable();
	}
}

void shuttleEngineRight()
{
//do not show damaged engine in hatoria
	return;
	
	if($triggerMultiple_EnginesRight_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_EnginesRight_shuttleV2s.nottriggerable();
		$model_engineRightFlame_shuttleV2s.show();
		$model_engineRightFlame_shuttleV2s.selfdetonate();
		$triggerHurt_engineRightFlame_shuttleV2s.triggerable();
	}
}


void shuttleHullTop()
{
//do not show damaged shuttle in hatoria
	return;
	
	if($triggerMultiple_hullTop_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_hullTop_shuttleV2s.nottriggerable();
		$triggerMultiple_hullTop_shuttleV2s.selfdetonate();//did not work with damage patch
		$effect_damagedTopHull.show();
		$model_sfxSteam_shuttleV2s.show();
		$model_sfxSteam_shuttleV2s.loopsound("sound/environment/steam/steam_loop04.wav",1,64);
		wait(.5);
		$triggerUse_steam_shuttleV2s.triggerable();
	}
}

void shuttleHullBottom()
{
//do not show damaged shuttle in hatoria
	return;
	
	if($triggerMultiple_hullBottom_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_hullBottom_shuttleV2s.nottriggerable();
		$effect_damagedBottomHull.show();
		$effect_damagedBottomHull.selfdetonate();
	}
}

void shuttleHullLeft()
{
//do not show damaged shuttle in hatoria
	return;
	
	if($triggerMultiple_hullLeft_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_hullLeft_shuttleV2s.nottriggerable();
		$effect_damagedLeftHull.show();
		$effect_damagedLeftHull.selfdetonate();
	}
}

void shuttleHullRight()
{
//do not show damaged shuttle in hatoria
	return;
	
	if($triggerMultiple_hullRight_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_hullRight_shuttleV2s.nottriggerable();
		$effect_damagedRightHull.selfdetonate();
		$effect_damagedRightHull.show();
	}
}

void shuttleHullBow()
{
//do not show damaged shuttle in hatoria
	return;
	
	if($triggerMultiple_hullBow_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_hullBow_shuttleV2s.nottriggerable();
		$effect_damagedBowHull.selfdetonate();
		$effect_damagedBowHull.show();
	}
}

void shuttleHullStern1()
{
//do not show damaged shuttle in hatoria
	return;
	
	if($triggerMultiple_hullStern1_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_hullStern1_shuttleV2s.nottriggerable();
		$triggerMultiple_hullStern1_shuttleV2s.selfdetonate();
		$effect_damagedSternHull1.show();
	}
}

void shuttleHullStern2()
{
//do not show damaged shuttle in hatoria
	return;
	
	if($triggerMultiple_hullStern2_shuttleV2s.getHealth() <= 0){
		$triggerMultiple_hullStern2_shuttleV2s.nottriggerable();
		$triggerMultiple_hullStern2_shuttleV2s.selfdetonate();
		$effect_damagedSternHull2.show();
	}
}


void shuttleInverter()
{
	if($model_exterior_shuttleV2s.getFloatVar("inverterOpen")==0){
		$model_exterior_shuttleV2s.setFloatVar("inverterOpen",1);
		//$model_exterior_shuttleV2s.anim("open-dmg");
		$model_exterior_shuttleV2s.anim("opening-dmg");
		wait(1.0);
		$model_exterior_shuttleV2s.anim("open-dmg");
	}else{
		$model_exterior_shuttleV2s.setFloatVar("inverterOpen",1);
		$model_exterior_shuttleV2s.anim("closing");
		wait(1.0);
		$model_exterior_shuttleV2s.anim("closed");
	}
}

void shuttleSteam()
{//disable steam
	$model_sfxSteam_shuttleV2s.hide();
	$model_sfxSteam_shuttleV2s.stoploopsound();
}


void shuttleTransporter()
{
}
void shuttleTransporter1()
{
}
void shuttleTransporter2()
{
}

void shuttleLandingSequence()
{
	$origin_master_shuttleV2s.rotateyup(180);
	$origin_master_shuttleV2s.time(.5);
	wait(1);//neeeeeeeeeeeds delay or it gets stuck!
//come down
	$origin_shakeAnim_shuttleV2s.loopsound("sound/vehicles/shuttlecraft/shuttle_interior_loop1.wav",1,180);
	$origin_master_shuttleV2s.moveToPos('6944 -320 174');//z+144
	$origin_master_shuttleV2s.time(15);
	wait(10);
	
	
	
	cam_fadeOut( 0.1, 0, 0,0, 1 );
	cinematic();
	freezeplayer();
	letterbox(0.1);
	
	$cam1.follow($cin_landingpad_shuttle);
	wait(0.1);
	$cam1.cut();
	cuecamera($cam1);
	
	//[b610] chrissstrahl - fix ai attacking player during cinematic
	level_ai(0);	
	
	cam_fadeIn( 1, 0, 0,0, 0 );
	
	waitFor($origin_master_shuttleV2s);
	
//add missionobjective marker to radar - update 02.02.2018
	$batlethSymbol.missionobjective(1);
	
	wait(6);
	noncinematic();
	releaseplayer();
	clearLetterbox(0.1);
	
	//[b610] chrissstrahl - fix ai attacking player during cinematic
	level_ai(1);
}


void shuttleStartSequnce()
{
	cam_fadeOut( 0.1, 0, 0,0, 1 );
	cinematic();
	freezeplayer();
	letterbox(0.1);
	

	
	$cam1.follow($cin_landingpad_takeoff);
	wait(0.1);
	$cam1.cut();
	cuecamera($cam1);
	cam_fadeIn( 1, 0, 0,0, 0 );
	
	//[b610] chrissstrahl - fix ai attacking player during cinematic
	level_ai(0);	

float fTime = 15;
//avoid players falling out of the  shuttle to easy
	$movementClip_ExteriorDoor_noDrop_shuttleV2s.solid();
//update spawns, in case player dies
	//thread shuttleUpdateSpawn(); //this kicks players out, BAD!
//update objectives
	thread objectiveFedoutpostEvacuateToShuttleComplete();
	wait(5);
	if(!cvar_bool_multiplayer){
		$player.nodamage();
		$player.god(1);
	}
	
	//open -> Close
	if(float_shuttleExteriorDoor == 2){
		shuttleExteriorDoorClose();
	}
	
	$batlethSymbol.remove();
//ENGAGE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	fTime = 15;
	float fDistance,fDistanceZ;
	vector vTarget,vCurrent;
	vTarget		= $shuttleDeparture.getOrigin();
	vCurrent	= $origin_master_shuttleV2s.getOrigin();
	fDistance	= ((vectorLength(vTarget - vCurrent)) / fTime);
	vTarget_x	= (vTarget_y = 0);
	vCurrent_x	= (vCurrent_y = 0);
	fDistanceZ	= ((vectorLength(vTarget - vCurrent)) / fTime);
	vCurrent	= $origin_master_shuttleV2s.getOrigin();
//substract 10 percent
	fDistance	= (fDistance	- (fDistance/10));
	fDistanceZ	= (fDistanceZ	- (fDistanceZ/10));
	while(fTime>1){
		fTime--;
		vCurrent_x -= fDistance;
		vCurrent_z += fDistanceZ;
		$origin_master_shuttleV2s.moveToPos(vCurrent);
		$origin_master_shuttleV2s.time(1);
		waitFor($origin_master_shuttleV2s);
		vCurrent = $origin_master_shuttleV2s.getOrigin();
	}
	noncinematic();
	releaseplayer();
	clearLetterbox(0.1);
	thread coop_endLevel();
}


void shuttleUpdateSpawn()
{
	vector v1,v2;
	coop_float_spawnAngle0 = 359;
	coop_float_spawnAngle1 = 359;
	coop_float_spawnAngle2 = 359;
	coop_float_spawnAngle3 = 359;
	coop_float_spawnAngle4 = 359;
	coop_float_spawnAngle5 = 359;
	coop_float_spawnAngle6 = 359;
	coop_float_spawnAngle7 = 359;
	coop_float_spawnAngle8 = 359;
	while(1){
		v1= $spawn1_shuttleV2s.getOrigin();
		v2= $spawn2_shuttleV2s.getOrigin();
//overwrite co-op spawns
		coop_vector_spawnOrigin1=v1;
		coop_vector_spawnOrigin2=v2;
		coop_vector_spawnOrigin3=v1;
		coop_vector_spawnOrigin4=v2;
		coop_vector_spawnOrigin5=v1;
		coop_vector_spawnOrigin6=v2;
		coop_vector_spawnOrigin7=v1;
		coop_vector_spawnOrigin8=v2;
		wait(.1);
	}
}


void shuttleOnblockKill()
{
	entity eBlock;
	eBlock = getCurrentEntity();
	if(doesEntityExist(eBlock)){
		eBlock.noBlock();
		entity eToucher;
		eToucher = eBlock.getLastActivatingEntity();
		if(doesEntityExist(eToucher)){
			if(eToucher.getHealth() > 0){
				eToucher.kill();
			}
		}
		wait(.1);
		if(doesEntityExist(eBlock)){
			thread shuttleSetOnBlockKillThread(eBlock);
		}
	}
}


void shuttleSetOnBlockKillThread(entity e)
{
	if(doesEntityExist(e)){
		e.noblock();
		e.onblock("shuttleOnblockKill");
		pause();
	}
}



