// Each of your releases must contain separately all original files completely
// un-modified, plus the Following two informative lines of text must be included
// in all your read-me Documents, info-files or Info-Documents and release notes, as they are:
// Based upon the HaZardModding RPG Mod, Matrix provided by HaZardModding developed for the HaZardModding Co-op Script Mod.
// HaZardModding Team Website: http://hazardmodding.chrissstrahl.de
//
// All files are additionally under the BY-SA Creative Commons License:
// http://creativecommons.org/licenses/by-sa/3.0/de/deed.en_GB
//
// =/\= COPYRIGHT & INTELLECTUAL PROPERTY
// HaZardModding RPG Script Modification for Star Trek(R): Elite Force II(TM)
// (C)2006-2009 some Rights reserved and (IP)intellectual property held by
// Christian Sebastian Strahl alias Chrissstrahl.
//
// All other trademarks and trade names are properties of their respective owners.
//
// If any part/parts of this Agreement is/are declared to be illegal or
// invalid, this/these part/parts shall be replaced with an appropriate
// context replacement and the remaining part/parts of this Agreements shall
// not be affected.
//
//
//
// YOU MAY NOT EDIT THE LINES GIVEN ABOVE, INCLUDING THIS LINE AS THEY ARE PART OF THE LICENSE AND THERE FOR PROTECTED

//////
//OVERWRITE GIVEN LICENSE - BY LICENSE OWNER FOR CO-OP HATORIA OUTPOST
//////
float replicator_ChekEmpty(entity eReplicator)
{
	if(doesEntityExist(eReplicator)){
		entity eReplicate;
		eReplicate = getEntity(eReplicator.getRawTargetname()+"Replicate");
		if(!doesEntityExist(eReplicate))
			return 1;
	}
	return 0;
}

void replicator_AddItem(entity eReplicator,string sItemType,string sItem,float fScale,float fOffset,vector vPlayerOffset1,vector vPlayerOffset2,string sTag,string sAlias)
{
	if(sItem != "" && sItem != " "){
		if(doesEntityExist(eReplicator)){
			float fIndex;
			fIndex = eReplicator.getFloatVar("itemIndex");
			fIndex++;
			eReplicator.setFloatVar("itemIndex",fIndex);
			if(doesEntityExist(eReplicator)){
				eReplicator.setFloatVar("itemIndex",fIndex);
				eReplicator.setStringVar("itemAttachTag"+fIndex,sTag);
				eReplicator.setStringVar("item"+fIndex,sItem);
				eReplicator.setStringVar("itemAlias"+fIndex,sAlias);
				eReplicator.setStringVar("itemClassName"+fIndex,sItemType);
				eReplicator.setFloatVar("itemScale"+fIndex,fScale);
				eReplicator.setFloatVar("itemOffset"+fIndex,fOffset);
				eReplicator.setVectorVar("itemPlayerOffset1"+fIndex,vPlayerOffset1);
				eReplicator.setVectorVar("itemPlayerOffset2"+fIndex,vPlayerOffset2);
				wait(.01);
			}
		}
	}
}

void replicator_AddItemAll(string sTargetname,string sItemType,string sItem,float fScale,float fOffset,vector vPlayerOffset1,vector vPlayerOffset2,string sTag,string sAlias)
{
	float fRounds;
	entity eReplicator;
	eReplicator = getEntity(sTargetname);//start with no numbers
	do//do it at last once and get then a possible valid one
	{
		if(doesEntityExist(eReplicator))
			replicator_AddItem(eReplicator,sItemType,sItem,fScale,fOffset,vPlayerOffset1,vPlayerOffset2,sTag,sAlias);
		fRounds++;
		eReplicator = getEntity(sTargetname+fRounds);
	} while(doesEntityExist(eReplicator));
}

void replicator_Spawn(vector vOrigin,string sTargetname,float fAngle)
{
	entity eReplicator;
	float fRounds = 1;
	float fExit = 0;
	while(!fExit){
		eReplicator = getEntity(sTargetname+fRounds);
		if(doesEntityExist(eReplicator))
			fRounds++;
		else
			fExit = 1;
		wait(.002);
	}
	sTargetname = (sTargetname+fRounds);
	entity eReplicatorDummy;
	entity eReplicatorTrigger;
	eReplicator = spawn("script_model","model","enviro/enterprise_electronic_food-zapper.tik","targetname",sTargetname,"origin",vectorToString(vOrigin),"angle",fAngle);
	eReplicatorDummy = spawn("script_model","model","fx/fx-dummy.tik","targetname",sTargetname+"Dummy","origin",vectorToString(vOrigin));
	vector vOriginz;
	vOriginz	=	vOrigin;
	vOriginz_z	+=	55;
	spawn("script_model","model","coop_symbols_use.tik","targetname","replicatorSymbol","origin",vectorToString(vOriginz));
	vOrigin_z += 80;
	eReplicatorTrigger = spawn("trigger_use","targetname",sTargetname+"Trigger","uservar1",sTargetname,"thread","replicator_Used","origin",vectorToString(vOrigin));
	wait(.2);
	if(doesEntityExist(eReplicator)){
		if(fAngle < 0){
			eReplicator.model("fx/fx-dummy.tik");
			eReplicator.hide();
		}
		eReplicator.contents( "notarget" );
	}
	if(doesEntityExist(eReplicatorDummy) == 1 && doesEntityExist(eReplicator) == 1){eReplicatorDummy.setSize(eReplicator.getMins(),eReplicator.getMaxs());}
	if(doesEntityExist(eReplicatorTrigger)){
		eReplicatorTrigger.setSize('-20 -20 15','20 20 15');
		eReplicatorTrigger.wait(.3);
	}
}

void replicator_Replicate(entity eReplicator,float fItem)
{
	if(doesEntityExist(eReplicator)){
		if(replicator_ChekEmpty(eReplicator)){
			if(fItem > 0){
				string sReplicateModel;
				sReplicateModel = eReplicator.getStringVar("item"+fItem);
				if(sReplicateModel != "" && sReplicateModel != " "){
					float fScale;
					float fOffset;
					string sClassName,sTag,sAlias;
					vector vPlayerOffset1,vPlayerOffset2;
					sTag			= eReplicator.getStringVar("itemAttachTag"+fItem);
					sClassName		= eReplicator.getStringVar("itemClassName"+fItem);
					fScale			= eReplicator.getFloatVar("itemScale"+fItem);
					fOffset			= eReplicator.getFloatVar("itemOffset"+fItem);
					vPlayerOffset1	= eReplicator.getVectorVar("itemPlayerOffset1"+fItem);//if '0 0 0'
					vPlayerOffset2	= eReplicator.getVectorVar("itemPlayerOffset2"+fItem);//if '0 0 0'
					sAlias			= eReplicator.getStringVar("itemAlias"+fItem);//if '0 0 0'
					entity eReplicate;
					eReplicate = spawn("script_model","model",sReplicateModel,"targetname",eReplicator.getRawTargetname()+"Replicate","scale","0","anim","idle");
					eReplicator.playsound("sound/ships/enterprise/ent_replicator.wav",3,2,64);
					wait(2);
					if(doesEntityExist(eReplicate) == 1 && doesEntityExist(eReplicator) == 1){
						vector vOrigin;
						vOrigin = eReplicator.getOrigin();
						vOrigin_z += fOffset;
						eReplicate.contents( "nottarget" );
						eReplicate.origin(vOrigin);
						vOrigin = eReplicator.getAngles();
						eReplicate.angle(vOrigin_y);
						eReplicate.forceAlpha(1);
						eReplicate.alpha(0);
						eReplicate.time(.4);
						eReplicate.moveForward(8);
						eReplicate.setStringVar("itemClassName",sClassName);
						eReplicate.setVectorVar("itemPlayerOffset1",vPlayerOffset1);
						eReplicate.setVectorVar("itemPlayerOffset2",vPlayerOffset2);
						eReplicate.setFloatVar("itemScale",fScale);
						eReplicate.setStringVar("itemAttachTag",sTag);
						eReplicate.setStringVar("itemAlias",sAlias);
						eReplicate.setFloatVar("ready",1);
						waitFor(eReplicate);
						if(doesEntityExist(eReplicate)){
							eReplicate.scale(fScale);
							eReplicate.displayEffect("TransportIn","FederationWeapons");
						}
					}
				}
			}
		}
		else{
			replicator_Recycle(eReplicator);
			thread replicator_Replicate(eReplicator,fItem);
		}
	}
}

void replicator_Recycle(entity eReplicator)
{
	if(doesEntityExist(eReplicator)){
		entity eReplicate;
		eReplicate = getEntity(eReplicator.getRawTargetname()+"Replicate");
		if(doesEntityExist(eReplicate)){
			eReplicator.playsound("sound/ships/enterprise/ent_replicator.wav",3,2,64);
			wait(2.4);
			eReplicate.displayEffect("TransportOut","FederationWeapons");
			wait(.65);
			eReplicate.forceAlpha(1);
			eReplicate.alpha(0);
			if(doesEntityExist(eReplicate))
				eReplicate.remove();
		}
	}
}

void replicator_Pickup(entity eReplicator,entity ePlayer)
{
	if(doesEntityExist(eReplicator)){
		if(doesEntityExist(ePlayer)){
			entity eReplicate;
			eReplicate = getEntity(eReplicator.getRawTargetname()+"Replicate");
			
			if(doesEntityExist(eReplicate)){
				if(eReplicate.getFloatVar("ready") != 1)
					return;
				string sAlias,sModelName,sItemClassName;
				sModelName = eReplicate.getModelName();
				sAlias = eReplicate.getStringVar("itemAlias");
				singleplayerCompatibilityHudprint(ePlayer,"^2$$PickedUp$$ a replicated^5 "+sAlias+"\n");
				
				sItemClassName = eReplicate.getStringVar("itemClassName");
				if(doesEntityExist(eReplicate))
					eReplicate.remove();
				if(sItemClassName == "script_model"){
					vector vPlayerOffset1;
					vector vPlayerOffset2;
					vPlayerOffset1 = eReplicate.getVectorVar("itemPlayerOffset1");
					vPlayerOffset2 = eReplicate.getVectorVar("itemPlayerOffset2");
					if(doesEntityExist(ePlayer)){
						ePlayer.removeAttachedModelByTargetname(ePlayer.getRawTargetname()+"Rreplic");
						ePlayer.attachmodel(sModelName,eReplicate.getStringVar("itemAttachTag"),eReplicate.getFloatVar("itemScale"),ePlayer.getRawTargetname()+"Rreplic",0,0,-1,-1,-1,vPlayerOffset1,vPlayerOffset2);//?,?,z::rotate,Y,x
					}
				}
				else{
					eReplicate = spawn(sItemClassName,"model",sModelName,"scale","0","set_respawn","0","origin",vectorToString( ePlayer.getOrigin() ));
				}
				wait(.15);
				if(doesEntityExist(eReplicate))
					eReplicate.remove();
			}
		}
	}
}


string replicator_QueryDatabase(entity eReplicator,float fItem)
{
	string sReturn;
	if(doesEntityExist(eReplicator)){
		float fMultiUse;
		string sMultiUse;
		fMultiUse = eReplicator.getFloatvar("itemIndex");
		if(fItem < 1){fItem = 1;}
		else if(fItem > fMultiUse){fItem = fMultiUse;}
		//sMultiUse = eReplicator.getStringvar("item"+fItem);
		sMultiUse = eReplicator.getStringVar("itemAlias"+fItem);
		if(sMultiUse == "" || sMultiUse == " "){
			sReturn = "^1ERROR: ^3Empty Data Base!";
			eReplicator.playsound("sound/environment/computer/lcars_error.wav",3,2,64);
		}
		else{
			sReturn = "^2You have selected item no:^5 "+fItem+". "+sMultiUse+"";
		}
	}
	return sReturn+"";
}


void replicator_Used()
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		entity ePlayer;
		string sMultiUse;
		entity eReplicator;
		ePlayer		= eTrigger.getlastActivatingEntity();
		eReplicator	= getEntity(eTrigger.getStringVar("uservar1"));
		if(doesEntityExist(eReplicator) == 1 && doesEntityExist(ePlayer) == 1)
		{
			if(globalCoop_player_getCoopVersion(ePlayer))//updated for the new coop build
			{
			//start mom on player
				vector v1,v2,v3;
				float fLength1,fLength2;
				
				v1 = '3052.00 1310.00 -88.00'; //replicator origin
				v2 = '3157.00 1311.00 -88.00'; //replicator origin
				v3 = ePlayer.getOrigin();
				
				fLength1 = vectorLength(v1 - v3);
				fLength2 = vectorLength(v2 - v3);
				
				if(fLength1 < fLength2){
					ePlayer.trigger("$coop_momMenuAccessTrigger1");
				}else{
					ePlayer.trigger("$coop_momMenuAccessTrigger2");
				}
				return;
			}
			eTrigger.setFloatVar("lastUse",getLevelTime());
			float fItem;
			float fIndex;
			fIndex = eReplicator.getFloatvar("itemIndex");
			entity eReplic;
			eReplic = getEntity( ePlayer.getRawTargetname()+"Rreplic" );
//PICKUP REPLICATED			
			if(!replicator_ChekEmpty(eReplicator)){
				if(eTrigger.getFloatvar("selectionActive") ==  1){
					eTrigger.setFloatVar("pickedUp",1);
					eTrigger.setFloatvar("selectionActive",0);
					eTrigger.setFloatVar("selectedItem",0);
					//eTrigger.nottriggerable();
					replicator_Pickup(eReplicator,ePlayer);
					wait(1);
				}
				else{
					eTrigger.setFloatvar("selectionActive",1);
					eTrigger.setFloatVar("selectedItem",1);
					singleplayerCompatibilityHudprint(ePlayer,"^3PickUp ?\n");
					fItem = 0;
					while(fItem > -1){
						fItem = ( eTrigger.getFloatvar("lastUse") + 2 );
	 					if( fItem < getLevelTime() )
							fItem = -1;
						wait(.2);
					}
					//eTrigger.nottriggerable();
					if(eTrigger.getFloatVar("pickedUp")){
						eTrigger.setFloatVar("pickedUp",0);
					}
					else{
						singleplayerCompatibilityHudprint(ePlayer,"^5Recycling!\n");
						replicator_Recycle(eReplicator);
					}
					eTrigger.setFloatvar("selectionActive",0);
				}

				return;
			}
//SCRIPT MODEL, RECYCLE	
			else{
				if(doesEntityExist(eReplic) == 1 && ePlayer.getFloatvar("doNotRecycle") != 1){
					if(eTrigger.getFloatvar("selectionActive") ==  1){
						eTrigger.setFloatvar("recyclePlayerItem",1);
					}
					else{
						singleplayerCompatibilityHudprint(ePlayer,"^3$$Dropping$$ Your Item ?\n");
						eTrigger.setFloatvar("selectionActive",1);
						fItem = 0;
						while(fItem > -1){
							fItem = ( eTrigger.getFloatvar("lastUse") + 1.3 );
							if( fItem < getLevelTime() )
								fItem = -1;
							wait(.2);
						}
						//eTrigger.nottriggerable();
						eTrigger.setFloatvar("recyclePlayerItem",0);
						eTrigger.triggerable();
					}
					if(eTrigger.getFloatvar("recyclePlayerItem") == 1){
						if(doesEntityExist(ePlayer)){
							ePlayer.removeAttachedModelByTargetname(ePlayer.getRawTargetname()+"Rreplic");
							singleplayerCompatibilityHudprint(ePlayer,"^5Recyceling your Item!\n");
							ePlayer.setFloatvar("doNotRecycle",0);
							return;
							//effects ???
						}
					}
					else{
						eTrigger.setFloatvar("selectionActive",0);
						if(doesEntityExist(ePlayer)){
							singleplayerCompatibilityHudprint(ePlayer,"^5Please make a selection...\n");
							ePlayer.setFloatvar("doNotRecycle",1);
						}
						return;
					}
					eTrigger.setFloatvar("selectionActive",0);
				}
			}
			
//UPDATE SELECTION, IF LOCKED DOWN
			if(eTrigger.getFloatvar("selectionActive") ==  1){
				fItem = eTrigger.getFloatVar("selectedItem");
				fItem++;
				if(fItem < 1){fItem = 1;}
				if(fItem > fIndex){
					fItem = 1;
				}
				eTrigger.setFloatVar("selectedItem",fItem);
				
				sMultiUse = eReplicator.getStringvar("item"+fItem);
				singleplayerCompatibilityHudprint(ePlayer,replicator_QueryDatabase(eReplicator,fItem)+"\n");
				return;
			}
//START SELECTION
			else{
				//eTrigger.nottriggerable();
//LOCK DOWN THIS THREAD
				eTrigger.setFloatvar("selectionActive",1);
				eTrigger.setFloatVar("selectedItem",1);
				sMultiUse = eReplicator.getStringvar("item1");
				if(doesEntityExist(ePlayer))
					singleplayerCompatibilityHudprint(ePlayer,replicator_QueryDatabase(eReplicator,fItem)+"\n");
				//eTrigger.triggerable();
//WAIT FOR THE WORLD TO TURN INTO A BETTER PLACE; OH WAIT THAT WOULD BE A INFINITYLOOP...
				if(eTrigger.getFloatVar("managerActive") != 1){
					eTrigger.setFloatVar("managerActive",1);
					while(fItem > -1){
						fItem = ( eTrigger.getFloatvar("lastUse") + 2.5 );
	 					if(fItem < getLevelTime())
							fItem = -1;
						wait(.2);
					}
					eTrigger.setFloatVar("managerActive",0);
				}
				else{
					return;
				}
//NOT ABBORTED
				if(eTrigger.getFloatVar("selectedItem") != -1 && fIndex > 0){
					//eTrigger.nottriggerable();
					fItem = eTrigger.getFloatVar("selectedItem");
					eReplicator.playsound("sound/environment/computer/holo_yes.wav",3,2,64);
					if(doesEntityExist(ePlayer)){
						ePlayer.setFloatvar("doNotRecycle",0);
					}
					replicator_Replicate(eReplicator,fItem);
				}
				else{
					if(doesEntityExist(ePlayer))
						ePlayer.setFloatvar("doNotRecycle",0);
				}
			}
		}
//DO TRIGGER STUFF WHAT THE PFEFERMINZTEE???
		eTrigger.setFloatvar("selectionActive",0);
		//eTrigger.triggerable();
	}
}


