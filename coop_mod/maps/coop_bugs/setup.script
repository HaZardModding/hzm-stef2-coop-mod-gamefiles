void setupMap()
//setup the level, things we can't do or better do in script rather than in radaiant
{
//set viewmode, objects can only been seen when player uses the specific viewmode with tricoder
	$web3Viewmode.viewmode("structuralintegrity");
	$weakWallViewmode.viewmode("structuralintegrity");
	$hubBlowUpTrigger.viewmode("structuralintegrity");
	$blowWallBackToBombs2Viewmode.viewmode("structuralintegrity");
	$blowWallBackToBombs1Viewmode.viewmode("structuralintegrity");
//setup enterprise
	setupEnterprise();
//activate dynamic lights
	lights_activate();
globalCoop_main_waitAFrame();
//setup pattern enhancers
	setupPatternEnhancers();
//setup pyramide
globalCoop_main_waitAFrame();
	setupPyramid();
globalCoop_main_waitAFrame();
//make objects solid, where notsolid to allow pathnodes to connect
	$pyramid_stairsBugsSpawner3.solid();
	//$spawnerBugplantBugs1_trigger.solid(); //does not exist...
	$doblowmedoor1.solid();
	$blowWallBackToBombs1.solid();
	$blowWallBackToBombs2.solid();
	$blowWallBackToBombs2Trigger.solid();
	$blowStone.solid();
	$blowStoneClip.solid();
	$towerFfLeft.solid();
	$towerFfRight.solid();
	$towerFfLeft.loopsound("sound/ships/drull/drull_forcefield1.wav",1,128);
	$towerFfRight.loopsound("sound/ships/drull/drull_forcefield1.wav",1,128);
globalCoop_main_waitAFrame();
//bind lift together
	$liftDoor.bind($liftDoorOrigin);
	$liftOnSymbol.bind($liftOrigin);
	$liftDoorOrigin.bind($liftOrigin);
	$liftMotor.bind($liftOrigin);
	$lift.bind($liftOrigin);
	$liftTrigger.bind($liftOrigin);
	$liftOn.bind($liftOrigin);
	$liftOff.bind($liftOrigin);
	$liftTrigger.bind($liftOrigin);
//setup misc objects
globalCoop_main_waitAFrame();
	$liftPannel1MoanEffect.hide();
	$liftOn.hide();
	$liftPannel1On.hide();
	$liftPannel2Off.hide();
	$hubElectricTriggerUsePannelOff.hide();
	$hubPlasmaSteam.hide();
	$hubCabelInactive.hide();
//spawn cameras for cienmatic
	spawn("camera","targetname","cam1");
	spawn("camera","targetname","cam2");
globalCoop_main_waitAFrame();
	setupDispensers();
globalCoop_main_waitAFrame();
	setupContainer();
globalCoop_main_waitAFrame();
	setupWeb();
globalCoop_main_waitAFrame();
	setupBombs();
globalCoop_main_waitAFrame();
	setupElectric();
globalCoop_main_waitAFrame();
	thread setupBugplants();
globalCoop_main_waitAFrame();
	thread setupDatapads();
globalCoop_main_waitAFrame();
	$pyramid_tilesPuzzleCrusher.open($world);
	$pyramid_beam0.hide();
	$pyramid_beam1.hide();
	$pyramid_beam2.hide();
	$pyramid_beam3.hide();
//lock pyramid entrace
	$t33.lock();
//solid create, was notsolid due to path creation
	$container2.solid();
//fix isssue
	$pyramid_podt4.setSize('-20 -20 0','20 20 10');
//move pice out a lil
	$pyramid_fallingWallPice.movesouth(20);
	$pyramid_fallingWallPice.time(1);
	
//pyramid
	//[b609] chrissstrahl - set the new trap markers only visible for tricorder mode
	$pyramide_code_viewmode.viewmode("tripwire");
	
	$pyramid_brigSecretDoor_spawner.bind($pyramid_brigSecretDoor);
	
	if(!cvar_bool_multiplayer)
	{
		$pyramid_callVolumeVisual.remove();
	}	
	
//test
	/*
	if(getCvar("username") == "Chrissstrahl"){
		vector vOrigin;
		//vOrigin = '14069 -4272 -700';//pyramid stairs
		vOrigin = '20751 -5494 -426';//pyramid bugspawn
		$player.origin(vOrigin);
		$player0.origin(vOrigin);
	}
	*/
}

void setupEnterprise()
{
//brig
	//make ff solid, was notsolid for paths to connect
	$t1527.solid();	$t1527.open($world);
	$t1526.solid();	$t1526.open($world);
	$t1525.solid();	$t1525.open($world);
	globalCoop_main_waitAFrame();
//lock turbolifts
	$doorDeck8TurboLiftLeft0.lock();
	$doorDeck8TurboLiftRight0.lock();
//setup armory
	thread globalCoop_level_onUse($korban,"enterprise_amoryActorTalk");
	$korban.pushable(0);
	$korban.mass(999999);
	$korban.anim("ent-curvedconsole-gesture2");
	$korban.nodamage();
	thread enterprise_amoryActorAlternate();
	$enterprise_amory_symbol1.hide();
	$enterprise_amory_symbol2.hide();
	$doorWeapon1a.bind($doorWeapon1a_origin);
	$doorWeapon1b.bind($doorWeapon1b_origin);
	$doorWeapon2a.bind($doorWeapon2a_origin);
	$doorWeapon2b.bind($doorWeapon2b_origin);
	globalCoop_main_waitAFrame();
//transporter room
	thread globalCoop_level_onUse($enterprise_transporterAi,"enterprise_transporterActorTalk");
	$enterprise_transporterAi.pushable(0);
	$enterprise_transporterAi.mass(9999999);
	$enterprise_transporterAi.nodamage();
	thread enterprise_transporterActorAnimRandom();
	globalCoop_main_waitAFrame();
//sickbay
	thread enterprise_sickbaySteam();
	thread globalCoop_level_onUse($stevenson,"enterprise_sickbayActorTalk");
	$stevenson.origin('435 -11721 0');
	$stevenson.pushable(0);
	$stevenson.mass(999999);
	$stevenson.anim("ent-seta_sit-idle");
	$stevenson.nodamage();
	globalCoop_main_waitAFrame();
//hallway
	//make 2 ais patrol, and take the turbolift or so
}

void setupPyramid()
{
	wait(.1);
	float fCode;
	entity eCode;
	for(fCode=0;fCode<7;fCode++)
	{
		eCode = getEntity("pyramide_code"+fCode);
		thread setOnDamageThread(eCode,"pyramid_codeEntred");
		$world.setFloatVar("pyramid_resetItem"+fCode,-1);
		globalCoop_main_waitAFrame();
	}


}

void setupContainer()
//setup the containers, remove archetype
{
return; //disabled archetype 2018.03.22
	float fContainerId;
	entity e;
	for(fContainerId=0;fContainerId<30;fContainerId++)
	{
		e=getEntity("container"+fContainerId);
		if(doesEntityExist(e))
		{
			e.archeType("");
			globalCoop_main_waitAFrame();
		}
		
	}
}

void setupWeb()
//setup the webs, make destructible
{
	float fWebId;
	entity e;
	for(fWebId=0;fWebId<10;fWebId++)
	{
		e=getEntity("web"+fWebId);
		if(doesEntityExist(e))
		{
			e.solid();
			e.health(50);//test
			globalCoop_main_waitAFrame();
		}
	}
}


void setupBugplants()
//setup the containers, remove archetype
{
//customshader
	float fId;
	entity e,eTrigger;
	for(fId=0;fId<20;fId++)
	{
		e=getEntity("bugplant"+fId);
		if(doesEntityExist(e))
		{
			e.notsolid();
			e.anim("idle");
			eTrigger = spawn("trigger_multiple","targetname","bugplantTrigger"+fId,"origin",""+e.getorigin(),"spawnflags","8");
			globalCoop_main_waitAFrame();
			eTrigger.setSize('-25 -25 0','25 25 40');
			eTrigger.setStringVar("plant","bugplant"+fId);
			eTrigger.thread("bugplants_eat");
		}
	}
}

void setupBombs()
//setup the containers, remove archetype
{
	float fId;
	entity e;
	for(fId=0;fId<12;fId++)
	{
		e=getEntity("fakeBomb"+fId);
		if(doesEntityExist(e))
		{
			e.nodamage();//do not allow players shoot to kill the model
			e.notsolid();//no collision
			e.archetype("");//remove archetype, because it says sabotage device
			e.forceAlpha(1);//force alpha, or it might not fade out
			//e.fade(1,0);//was 0.1 - fade the object, so players realize this is a symbol, not the real object it self
			e.hide();//was 0.1 - fade the object, so players realize this is a symbol, not the real object it self
			e.contents("-targetable");//also colides, do not allow targeting, would show archetype if targeted, also would stick on player names when you aim from a player to this
			globalCoop_main_waitAFrame();
		}
	}
	
//hide secret bobable shortcut fakebomb model
//	$fakeBomb1.hide(); //does not exist
	
	for(fId=0;fId<12;fId++)
	{
		e=getEntity("bomb"+fId);
		if(doesEntityExist(e))
		{
			e.nodamage();//do not allow players shoot to kill the model
			e.notsolid();//no collision
			e.archetype("");//remove archetype, because it says sabotage device
			e.contents("-targetable");//also colides, do not allow targeting, would show archetype if targeted, also would stick on player names when you aim from a player to this
			spawnTriggerAtObject(e,"trigger_use","bomb_pickup",""+e.getRawtargetname(),'-5 -5 -20','5 5 20');
			globalCoop_main_waitAFrame();
		}
	}
}

void setupDispensers()
//setup the dispensers, remove archetype
{
	float fId;
	entity e;
	for(fId=0;fId<10;fId++)
	{
		e=getEntity("dispenser"+fId);
		if(doesEntityExist(e))
		{
			e.notsolid();
			//e.archetype("");//remove archetype, the local strings are not loaded for this level
			e.contents("-targetable");//do not allow targeting, would show archetype if targeted, also would stick on player names when you aim from a player to this
			globalCoop_main_waitAFrame();
		}
	}
}


void setupElectric()
//setup the dispensers, remove archetype
{
	float fId;
	entity e;
	for(fId=0;fId<22;fId++)
	{
		e=getEntity("electricViewmode"+fId);
		if(doesEntityExist(e))
		{
			//e.notsolid();
			e.viewmode("tripwire");//only visible now with tricorder tripwire mode
			globalCoop_main_waitAFrame();
		}
	}
}

void setupBlowAbleObjects()
//setup the objects that can be blasted
{
	float fId;
	entity e;
	for(fId=0;fId<10;fId++)
	{
		e=getEntity("blowObject"+fId);
		if(doesEntityExist(e))
		{
			e.solid();//some are notsolid so the pathnodes can connect for the AI
			globalCoop_main_waitAFrame();
		}
	}
}


void setupPatternEnhancers()
{
	$patternenhancer8beam.hide();
	$patternenhancer9beam.hide();
	$patternenhancer10beam.hide();
	$patternenhancer11beam.hide();
	//$patternenhancer12beam.hide(); does not exist...
	$patternenhancer10.origin('12551.68 -3040.96 -1030.78');
	$patternenhancer10.angles('279.000000 309.000000 174.000000');
//active enhancers
	$patternenhancer0.anim("blue");	$patternenhancer0.solid();
	$patternenhancer1.anim("blue");	$patternenhancer1.solid();
	$patternenhancer2.anim("blue");	$patternenhancer2.solid();
	$patternenhancer3.anim("blue");	$patternenhancer3.solid();
	wait(1);

//not yet active enhancer
//replace with sprites
//aligned them with models in the radiant
	entity	e,eBeam;
	float	fSetup;
	vector	vOrigin;
	
	float fUservar1,fUservar2;
	
	for(fSetup=4;fSetup<8;fSetup++)
	{
		e 		= getEntity("patternenhancer"+fSetup);
		eBeam	= getEntity("patternenhancer"+fSetup+"beam");
		if(doesEntityExist(e))
		{
			if(doesEntityExist(eBeam))
				eBeam.hide();
			
			fUservar1	= e.getFloatVar("uservar1");
			fUservar2	= e.getFloatVar("uservar2");
			
			vOrigin = e.getOrigin();
			vOrigin_z += 25;
			e.remove();
			globalCoop_main_waitAFrame();
			
			e = spawn("script_model","model","coop_peBlinking.spr");
			globalCoop_main_waitAFrame();
			
			e.targetname("patternenhancer"+fSetup);
			e.scale(0.2);
			e.origin(vOrigin);
			//e.notsolid();
			e.setsize('-10 -10 0','10 10 64');
			
			e.setFloatVar("uservar1",fUservar1);
			e.setFloatVar("uservar2",fUservar2);
			
			
			
			thread globalCoop_level_onUse(e,"enhancer_position");
		}
	}
}

void setupDatapads()
{
	float fSetup;
	for(fSetup=0;fSetup<4;fSetup++)
	{
		globalCoop_main_waitAFrame();
		thread globalCoop_level_onUse(getEntity("datapad"+fSetup),"datapad_pickup");
	}
}

