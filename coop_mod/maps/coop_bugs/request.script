//This script contains the code for the requesting ammo/health/wooteva from the enterprise, use as you please
//This script contains the code for the requesting ammo/health/wooteva from the enterprise, use as you please
//This script contains the code for the requesting ammo/health/wooteva from the enterprise, use as you please


//Global Variables, can be accessed by all Functions/scriptfiles
//if definied outside a function, just like this
////////////////////////////////////////////////////////////////////////////////


//declaration
////////////////////////////////////////////////////////////////////////////////
void	request();
void	request_One();
void	request_Two();
void	request_Three();
void	request_Four();
void	request_Five();
void	request_Six();
void	request_Seven();
void	request_Eight();
void	request_Nine();
void	request_Zero();
vector	request_randomLocation(entity eTrigger);

vector request_randomLocation(entity eTrigger)
{
	vector vOrigin;
	float fLastLocation;
	if(doesEntityExist(eTrigger))
	{
		vOrigin		= eTrigger.getOrigin();
		//vOrigin_z	+= vectorGetZ(eTrigger.getMins());
		
		fLastLocation = eTrigger.getFloatVar("request_lastLocation");
		
		if(fLastLocation == 0 || fLastLocation >= 4)
		{
			vOrigin_x	-= 60;
		}
		else if(fLastLocation == 1)
		{
			vOrigin_x	+= 60;
		}
		else if(fLastLocation == 2)
		{
			vOrigin_y	-= 60;
		}
		else if(fLastLocation == 3)
		{
			vOrigin_y	+= 60;
		}
		fLastLocation++;
		if(fLastLocation >= 4)
		{
			fLastLocation=1;
		}
		eTrigger.setFloatVar("request_lastLocation",fLastLocation);
	}
	return vOrigin;
}

void request()
//this function is started once the trigger is used
{
	if(cvar_bool_multiplayer)
	{
		entity eTrigger,ePlayer;
		eTrigger=getCurrentEntity();
		ePlayer=mom_returnPlayerForTrigger(eTrigger);
		if(doesEntityExist(ePlayer)){ //[b611] chrissstrahl - using a standard hud now that needs populating
			sendclientCommand(ePlayer,"exec cfg/maps/coop_bugs/coop_request.cfg\n");
		}
		
		//kick out of menu timer
		wait(10);
		if(doesEntityExist(ePlayer))
		{
			mom_exitMenuPlayer(ePlayer);
		}
	}
}

void request_One()
//this function is called when option 1 is used
{
//terminate menu kick timer
	killthread("request");
	entity eTrigger,ePlayer;
	eTrigger=getCurrentEntity();
	ePlayer=mom_returnPlayerForTrigger(eTrigger);
	if(doesEntityExist(ePlayer))
	{
		mom_exitMenuPlayer(ePlayer);
	}
	else{
		return;
	}
	if(doesEntityExist($requested_health))
	{
		$requested_health.displayEffect("TransportOut","Federation");
		$requested_health.notsolid();
		wait(2.5);
		$requested_health.remove();
	}
	
	wait(.1);

	entity eHypo,ePlayer,eTrigger;
	string sTargetname;
	
	eHypo = spawn("Health","model","models/item/health_large-hypospray.tik","targetname","requested_health","origin","0 0 -99999","set_respawn","0");
	globalCoop_main_waitAFrame();
	eHypo.hide();
	eHypo.forceAlpha(1);
	eHypo.fade(0.1,0);
	eHypo.amount(75);
	eHypo.scale(0.45);
	eHypo.setsize('-1 -1 -1','1 1 1');
	
	if(globalCoop_check_existingLivingEntity(ePlayer))
	{
		sTargetname = ePlayer.getStringVar("beamAreaTrigger");
		
		if(sTargetname != "")
		{
			eHypo.warp(request_randomLocation(getEntity(sTargetname)));
			eHypo.dropToFloor(120);
			globalCoop_main_waitAFrame();
			eHypo.displayEffect("TransportIn","Federation");
			wait(0.2);
			eHypo.show();
			wait(2.4);
			eHypo.setsize('-8 -8 -0','8 8 10');
		}
		else
		{
			message_patternEnhancerArea(ePlayer);
			eHypo.remove();
		}
	}
	else
	{
		eHypo.remove();
	}
}
void request_Two()
//this function is called when option 2 is used
{
//terminate menu kick timer
	killthread("request");
	entity eTrigger,ePlayer;
	eTrigger=getCurrentEntity();
	ePlayer=mom_returnPlayerForTrigger(eTrigger);
	if(doesEntityExist(ePlayer))
	{
		mom_exitMenuPlayer(ePlayer);
	}
	else{
		return;
	}
	if(doesEntityExist($requested_plasma))
	{
		$requested_plasma.displayEffect("TransportOut","Federation");
		$requested_plasma.notsolid();
		wait(2.5);
		$requested_plasma.remove();
	}
	
	wait(.1);

	entity ePlasma,ePlayer,eTrigger;
	string sTargetname;
	
	ePlasma = spawn("AmmoEntity","model","models/item/ammo_large.tik","targetname","requested_plasma","origin","0 0 -99999","set_respawn","0");
	globalCoop_main_waitAFrame();
	ePlasma.hide();
	ePlasma.forceAlpha(1);
	ePlasma.fade(0.1,0);
	ePlasma.amount(800);
	ePlasma.scale(0.45);
	ePlasma.setsize('-1 -1 -1','1 1 1');
	
	if(globalCoop_check_existingLivingEntity(ePlayer))
	{
		sTargetname = ePlayer.getStringVar("beamAreaTrigger");
		
		if(sTargetname != "")
		{
			ePlasma.warp(request_randomLocation(getEntity(sTargetname)));
			ePlasma.dropToFloor(120);
			globalCoop_main_waitAFrame();
			ePlasma.displayEffect("TransportIn","Federation");
			wait(0.2);
			ePlasma.show();
			wait(2.4);
			ePlasma.setsize('-10 -10 -0','10 10 20');
		}
		else
		{
			message_patternEnhancerArea(ePlayer);
			ePlasma.remove();
		}
	}
	else
	{
		ePlasma.remove();
	}
}

void request_Three()
//this function is called when option 3 is used
{
//terminate menu kick timer
	killthread("request");
	entity eTrigger,ePlayer;
	eTrigger=getCurrentEntity();
	ePlayer=mom_returnPlayerForTrigger(eTrigger);
	if(doesEntityExist(ePlayer))
	{
		mom_exitMenuPlayer(ePlayer);
	}
	else{
		return;
	}
	if(doesEntityExist($requested_patternenhancer))
	{
		$requested_patternenhancer.displayEffect("TransportOut","Federation");
		$requested_patternenhancer.notsolid();
		wait(2.5);
		$requested_patternenhancer.remove();
	}
	
	wait(.1);

	entity ePattern,ePlayer,eTrigger;
	string sTargetname;
	
	//ePattern = spawn("item","model","models/coop_bugs/p2.tik","targetname","requested_patternenhancer","origin","0 0 -99999");
	ePattern = spawn("HoldableItem","model","models/item/holdable_explosive.tik","targetname","requested_patternenhancer","origin","0 0 -99999","set_respawn","0");
	globalCoop_main_waitAFrame();
	ePattern.hide();
	ePattern.model("models/coop_bugs/p1.tik");
	ePattern.forceAlpha(1);
	ePattern.fade(0.1,0);
	ePattern.name("TriPuz_Default");
	ePattern.thread("enhancer_pickup");
	
	if(globalCoop_check_existingLivingEntity(ePlayer))
	{
		sTargetname = ePlayer.getStringVar("beamAreaTrigger");
		
		if(sTargetname != "")
		{
			ePattern.warp(request_randomLocation(getEntity(sTargetname)));
			ePattern.dropToFloor(120);
			globalCoop_main_waitAFrame();
			ePattern.displayEffect("TransportIn","Federation");
			wait(0.2);
			ePattern.show();
			wait(2.4);
		}
		else
		{
			message_patternEnhancerArea(ePlayer);
			ePattern.remove();
		}
	}
	else
	{
		ePattern.remove();
	}
}
void request_Four()
//this function is called when option 4 is used
{
//terminate menu kick timer
	killthread("request");
	entity eTrigger,ePlayer;
	eTrigger=getCurrentEntity();
	ePlayer=mom_returnPlayerForTrigger(eTrigger);
	if(doesEntityExist(ePlayer))
	{
		mom_exitMenuPlayer(ePlayer);
	}
	else{
		return;
	}
	
//verify that this entity does exist
	if(doesEntityExist(ePlayer))
	{		
		//dallas01/munro_toent.mp3
		ePlayer.simplePlayDialog( "localization/sound/dialog/dallas02/munro_leavem3.mp3",1,128 );
	}
	wait(3);
	
//get a free trigger here!!!
//get a free trigger here!!!
//get a free trigger here!!!
//get a free trigger here!!!
//get a free trigger here!!!
	vector vOrigin;
	vOrigin		= $enterprise_beamTrigger1.getOrigin();
	vOrigin_z	= 32;
	
	if(globalCoop_check_existingLivingEntity(ePlayer))
	{
	//debug
		//entity e;
		//e=getEntity(ePlayer.getStringVar("beamAreaTrigger"));
		//ePlayer.hudprint("^5INFO: "+e.getRawTargetname()+"\n");
	//eof debug
		
		if(globalCoop_check_isEntityInsideOfEntity(ePlayer,getEntity(ePlayer.getStringVar("beamAreaTrigger")),0))
		{
			ePlayer.nodamage();
			ePlayer.displayEffect("TransportOut","Federation");
			//globalCoop_playSound_c3v1r60(ePlayer,"sound/environment/transporter/transport_fast.wav");
			wait(2.6);
			if(globalCoop_check_existingLivingEntity(ePlayer))
			{
				thread enterprise_transporterDisable(ePlayer,$enterprise_beamTrigger1);
				globalCoop_main_waitAFrame();
				
				if(globalCoop_check_existingLivingEntity(ePlayer))
				{
					thread globalCoop_level_warpEntityToVectorSafty(ePlayer,vOrigin);
					ePlayer.displayEffect("TransportIn","Federation");
					ePlayer.playerviewangles('0 270 0');
				}
				wait(2);
				if(globalCoop_check_existingLivingEntity(ePlayer))
				{
					ePlayer.takedamage();
					ePlayer.resetState();
				}
			}
		}
		else
		{
			globalCoop_huds_Add(ePlayer,"coop_pEBeamFailed");
		}
	}
}

void request_Five()
//this function is called when option 5 is used
{
//terminate menu kick timer
	killthread("request");
	entity eTrigger,ePlayer;
	eTrigger=getCurrentEntity();
	ePlayer=mom_returnPlayerForTrigger(eTrigger);
	if(doesEntityExist(ePlayer))
	{
		mom_exitMenuPlayer(ePlayer);
	}
	else{
		return;
	}
	if(doesEntityExist($requested_comp))
	{
		$requested_comp.displayEffect("TransportOut","Federation");
		$requested_comp.notsolid();
		wait(2.5);
		$requested_comp.remove();
	}
	
	wait(.1);

	entity ePattern,ePlayer,eTrigger;
	string sTargetname;

	ePattern = spawn("Weapon","model","models/weapons/worldmodel-compressionrifle.tik","targetname","requested_comp","origin","0 0 -99999","set_respawn","0");
	globalCoop_main_waitAFrame();
	ePattern.hide();
	ePattern.forceAlpha(1);
	ePattern.fade(0.1,0);
	ePattern.setsize('-1 -1 -1','1 1 1');
	
	if(globalCoop_check_existingLivingEntity(ePlayer))
	{
		sTargetname = ePlayer.getStringVar("beamAreaTrigger");
		
		if(sTargetname != "")
		{
			ePattern.warp(request_randomLocation(getEntity(sTargetname)));
			ePattern.dropToFloor(120);
			globalCoop_main_waitAFrame();
			ePattern.displayEffect("TransportIn","Federation");
			wait(0.2);
			ePattern.show();
			wait(2.4);
			ePattern.setsize('-10 -10 0','10 10 20');
		}
		else
		{
			message_patternEnhancerArea(ePlayer);
			ePattern.remove();
		}
	}
	else
	{
		ePattern.remove();
	}
}

void request_Six()
//this function is called when option 6 is used
{
//terminate menu kick timer
	killthread("request");
	entity eTrigger,ePlayer;
	eTrigger=getCurrentEntity();
	ePlayer=mom_returnPlayerForTrigger(eTrigger);
	if(doesEntityExist(ePlayer))
	{
		mom_exitMenuPlayer(ePlayer);
	}
	else{
		return;
	}
	if(doesEntityExist($requested_compEnh))
	{
		$requested_compEnh.displayEffect("TransportOut","Federation");
		$requested_compEnh.notsolid();
		wait(2.5);
		$requested_compEnh.remove();
	}
	
	wait(.1);

	entity ePattern,ePlayer,eTrigger;
	string sTargetname;

	ePattern = spawn("Weapon","model","models/weapons/worldmodel-burstrifle.tik","targetname","requested_compEnh","origin","0 0 -99999","set_respawn","0");
	globalCoop_main_waitAFrame();
	ePattern.hide();
	ePattern.forceAlpha(1);
	ePattern.fade(0.1,0);
	ePattern.setsize('-1 -1 -1','1 1 1');
	
	if(globalCoop_check_existingLivingEntity(ePlayer))
	{
		sTargetname = ePlayer.getStringVar("beamAreaTrigger");
		
		if(sTargetname != "")
		{
			ePattern.warp(request_randomLocation(getEntity(sTargetname)));
			ePattern.dropToFloor(120);
			globalCoop_main_waitAFrame();
			ePattern.displayEffect("TransportIn","Federation");
			wait(0.2);
			ePattern.show();
			wait(2.4);
			ePattern.setsize('-10 -10 0','10 10 20');
		}
		else
		{
			message_patternEnhancerArea(ePlayer);
			ePattern.remove();
		}
	}
	else
	{
		ePattern.remove();
	}
}

void request_Seven()
//this function is called when option 7 is used
{
}
void request_Eight()
//this function is called when option 8 is used
{
}
void request_Nine()
//this function is called when option 9 is used
{
}
//this function is called when option 10 is used
void request_Zero()
{
}


