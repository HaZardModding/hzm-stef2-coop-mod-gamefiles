//-----------------------------------------------------------------
//  EF2 Level Script File
//
//	Level:	ent-training8
//	Script:	
//	Geometry:	
//	Created:	
//	Edited:	
//-----------------------------------------------------------------

void main();
void holoDeckSetup();
void holoDeckFadeOut();
void holoDeckFadeIn();
void initWorld();

void floordragRomulan();
void tubeLurker1();
void bigDoor1Open();
void bigDoor1Close();
void bigDoor2Open();
void bigDoor2Close();
void bigDoorOpen( float door_no );
void bigDoorClose( float door_no );
void lurker3Thread();
void basher1Thread();
void basher2Thread();
void basher3Thread();
void basher4Thread();
void basher5Thread();
void levelComplete();


//hzm coop mod - chrissstrahl - include the required coop level-scripts
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
void	coop_givePlasma();
void	coop_endLevel();
entity	entityPlayerGlobal;

#include "coop_mod/matrix/main.scr"
#include "maps/global_scripts/global_common.scr"
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

//================================================================================
// Main
//================================================================================

//---------------------
// Function: main
// Comments:
// the main thread run at the start of the level
//---------------------
void main()
{
	//hzm coop mod chrissstrahl - default overwrite - show sucess hud
	coop_bool_showMissionSucessHud	= 1;
	
	coop_string_objectiveItem1 = "$$secretObjectiveS3$$";
	
	//hzm coop mod chrissstrahl - set spawn locations for the players
	coop_float_spawnAngle0		= 90;
	coop_float_spawnAngle1		= 90;
	coop_float_spawnAngle2		= 136;
	coop_float_spawnAngle3		= 148;
	coop_float_spawnAngle4		= 150;
	coop_float_spawnAngle5		= 170;
	coop_vector_spawnOrigin1	= '1792 -950 18';
	coop_vector_spawnOrigin2	= '2122 -876 16';
	coop_vector_spawnOrigin3	= '2146 -739 32';
	coop_vector_spawnOrigin4	= '2000 -860 18';
	coop_vector_spawnOrigin5	= '2000 -640 18';
	coop_vector_spawnOrigin6	= '1820 -720 18';
	coop_vector_spawnOrigin7	= '1820 -666 18';
	coop_vector_spawnOrigin8	= '1820 -590 18';
	
	//hzm coop mod chrissstrahl - set background story - it is a local string, so no need for seperate _deu
	coop_string_story = "$$SecretLoadingText$$";
	
	//hzm coop mod chrissstrahl - set tactical info
	coop_string_objectiveTacticalInfo1 = "";
	coop_string_objectiveTacticalInfo2 = "";
	coop_string_objectiveTacticalInfo3 = "";

	holoDeckSetup();
	initWorld();
	holoDeckFadeOut();
}

//------------------------
// this thread sets up the Holo Deck And Player
//------------------------
void holoDeckSetup()
{
	cam_fadeout( .05, 0, 0, 0, 1, 0 );

	globalCommon_SpawnScriptModel( "enviro/enterprise_holo-deck.tik", "holoDeck", '1792 -760 20', 0 );

	//soundtrack( "music/igm1.mus" );

	//hzm coop mod chrissstrahl - make sure no player can wander
	thread globalCoop_player_imobilizeAll(1);
	
	$holoDeck.notsolid();
	$holoDeck.rendereffects( "+depthhack" );
	$holoDeck.forcealpha( 1 );
	$holoDeck.alpha( 1 );
}

//------------------------
// this thread makes the Holo Deck Fade Out
//------------------------
void holoDeckFadeOut()
{
	//hzm coop mod chrissstrahl - Wait until the Game Starts in Multiplayer
	globalCoop_main_waitForWarmupTime();
	
	cam_fadein( .5, 0, 0, 0, 1, 0 );
	wait( 2 );
		
	$holoDeck.fade( 2, 0 );
	wait( 2 );
	$holoDeck.hide();
	$holoDeck.alpha( 0 );
	
	//hzm coop mod chrissstrahl - allow to move
	thread globalCoop_player_imobilizeAll(0);
	
	level_ai ( 1 );
	
	//hzm coop mod chrissstrahl - register and distribute the weapons
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-Phaser-stx.tik");
	globalCoop_armory_useTiki("models/weapons/worldmodel-Phaser-stx.tik");
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-CompressionRifle.tik");
	globalCoop_armory_useTiki("models/weapons/worldmodel-CompressionRifle.tik");
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-FieldAssaultRifle.tik");
	globalCoop_armory_useTiki("models/weapons/worldmodel-FieldAssaultRifle.tik");
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-tetryon.tik");
	globalCoop_armory_useTiki("models/weapons/worldmodel-tetryon.tik");
	
	//hzm coop mod chrissstrahl - give players ammo
	entity ePlayer;
	float fPlayerIdInUse;
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getentity("player"+fPlayerIdInUse);
		if(doesEntityExist(ePlayer)){
			if(globalCoop_check_playerSpectator(ePlayer) == 0){
				ePlayer.ammo( "Plasma", 200 );
				ePlayer.ammo( "Phaser", 200 );
				ePlayer.ammo( "Disruptor", 200 );
				ePlayer.ammo( "Idryll", 200 );
				ePlayer.ammo( "Fed", 200 );
				ePlayer.armor( "BasicArmor", 100 );
			}
		}
	}
	
	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$secretObjectiveS3$$","incomplete",1,1);
}

//------------------------
// this thread makes the Holo Deck Fade Out
//------------------------
void holoDeckFadeIn()
{
	wait( 3 );

	//hzm coop mod chrissstrahl - make sure no player can wander
	thread globalCoop_player_imobilizeAll(1);
	
	//hzm coop mod chrissstrahl - not working that well in coop
	/*
	$holoDeck.origin( $player.getorigin() );
	$holoDeck.show();
	$holoDeck.fadein( 2, 1 );
	wait( 2 );
	$holoDeck.alpha( 1 );
	wait( 2 );
	*/
	
	//hzm coop mod chrissstrahl - load next map
	thread coop_endLevel();
	
	/*
	spawn ( "trigger_changelevel", "targetname", "trigger_endTraining", "map", "" );
	wait( .05 );
	trigger ( "$trigger_endTraining" );
	
	wait( 5 );
	
	stuffcmd ( "disconnect\n" );
	*/
}

//---------------------
// initWorld
// Initialize world parameters.
//---------------------
void initWorld()
	{
	soundtrack( "music/m10l1-romulan_installation.mus" );

	$sky.rendereffects( "+skyorigin" );

	$world.light_lightstyle( "room1_flicker" , "uuuuzzzzwwwwuuuueeeeddddffffddddeeeelllliiiiggggaaaarrrroooommmmeeee", 0 );
	$world.light_lightstyle( "room2_flicker" , "eemmmmoooorrrreeeeggggiiiilllleeeeddddffffddddaaaarrrruuuuwwwwrrrree", 0 );

	$world.entity_fade_dist( 10000 );
//	$world.farplane_color ( '0.1 0.12 0.1' );
//	$world.farplane ( 7000 );

	$tube_lurker1.animonce( "intube" );
	//$tube_lurker1.anim( "inflight" );
	//$tube_lurker1.setframe( 14 );

	//$floordrag_romulan.animonce( "death3" );
	$floordrag_romulan.anim( "death3" );
	$floordrag_romulan.setframe( 30);

	waitforplayer();
	
	$world.clearAvailableViewModes();
	$world.addAvailableViewMode( "none" );

	$world.playsound( "sound/player/player_invpickup.wav", 3, 1, 10000 );
}

void floordragRomulan()
	{
	float accel_time;

	$floordrag_romulan.playsound ( "sound/chars/lurker/lurk_dragstart.wav", 3, .3, 10000 );

	for( accel_time = 0.25; accel_time > 0; accel_time -= 0.05 )
		{
		$floordrag_romulan.time( accel_time );
		$floordrag_romulan.moveNorth( 4 );
		waitfor( $floordrag_romulan );
		}

	for( accel_time = 0.25; accel_time > 0; accel_time -= 0.05 )
		{
		$floordrag_romulan.time( accel_time );
		$floordrag_romulan.moveSouth( 1 );
		waitfor( $floordrag_romulan );
		}

	$floordrag_romulan.playsound ( "sound/chars/lurker/lurk_dragstop.wav", 3, .3, 10000 );

	for( accel_time = 0.25; accel_time > 0; accel_time -= 0.05 )
		{
		$floordrag_romulan.time( accel_time );
		$floordrag_romulan.moveNorth( 16 );
		waitfor( $floordrag_romulan );
		}

	$floordrag_romulan.remove();

	trigger( "$lurker1_spawn" );
	trigger( "$lurker1_wall" );
	trigger( "$lurker1_wall_smoke" );

	wait( 0.1 );

	$lurker1.aggressive(1);
	}





void tubeLurker1()
	{
	//$tube_lurker1.anim( "spotted_target" );
	$tube_lurker1.playsound ( "sound/chars/lurker/lurk_death3.wav", 3, .3, 10000 );
	wait( 0.6 );

	//$tube_lurker1.anim( "pre_melee_cycle" );
	//$tube_lurker1.setframe( 14 );
	}

void bigDoor1Open()
	{
	thread bigDoorOpen( 1 );

	wait( 3.0 );

	$bigdoor1_piece5.playsound ( "sound/chars/basher/bash_attack3.wav", 3, .3, 10000 );
	}

void bigDoor1Close()
	{
	thread basher1Thread();
	thread bigDoorClose( 1 );
	}

void bigDoor2Open()
	{
	thread bigDoorOpen( 2 );
	}

void bigDoor2Close()
	{
	thread basher2Thread();
	thread bigDoorClose( 2 );
	}



void bigDoorOpen( float door_no )
	{
	entity piece1;
	entity piece2;
	entity piece3;
	entity piece4;
	entity piece5;
	float rand_doortime;
	float i;

	piece1 = getentity( "bigdoor" + door_no + "_piece1" );
	piece2 = getentity( "bigdoor" + door_no + "_piece2" );
	piece3 = getentity( "bigdoor" + door_no + "_piece3" );
	piece4 = getentity( "bigdoor" + door_no + "_piece4" );
	piece5 = getentity( "bigdoor" + door_no + "_piece5" );

	piece5.playsound ( "sound/doors/lrg_01_start.wav", 3, .3, 10000 );

	for ( i = 1; i <= 5; i++ )
		{
		rand_doortime =  randomint( 3 );
		rand_doortime += 8;
		rand_doortime /= 10.0;

		piece1.time( rand_doortime );
		piece2.time( rand_doortime );
		piece3.time( rand_doortime );
		piece4.time( rand_doortime );
		piece5.time( rand_doortime );

		piece5.moveUp( 28 );
		if ( i > 1 )
			piece4.moveUp( 28 );
		if ( i > 2 )
			piece3.moveUp( 28 );
		if ( i > 3 )
			piece2.moveUp( 28 );
		if ( i > 4 )
			piece1.moveUp( 28 );
		waitfor( piece5 );
		}
}





void bigDoorClose( float door_no )
	{
	return;//hzm coop mod chrissstrahl - do not close that door in coop
	entity piece1;
	entity piece2;
	entity piece3;
	entity piece4;
	entity piece5;
	float rand_doortime;
	float i;

	piece1 = getentity( "bigdoor" + door_no + "_piece1" );
	piece2 = getentity( "bigdoor" + door_no + "_piece2" );
	piece3 = getentity( "bigdoor" + door_no + "_piece3" );
	piece4 = getentity( "bigdoor" + door_no + "_piece4" );
	piece5 = getentity( "bigdoor" + door_no + "_piece5" );

	piece5.playsound ( "sound/doors/lrg_01_start.wav", 3, .3, 10000 );

	for ( i = 1; i <= 5; i++ )
		{
		rand_doortime =  randomint( 3 );
		rand_doortime += 3;
		rand_doortime /= 10.0;

		piece1.time( rand_doortime );
		piece2.time( rand_doortime );
		piece3.time( rand_doortime );
		piece4.time( rand_doortime );
		piece5.time( rand_doortime );

		piece5.moveDown( 14 );
		if ( i > 1 )
			piece4.moveDown( 28 );
		if ( i > 2 )
			piece3.moveDown( 28 );
		if ( i > 3 )
			piece2.moveDown( 28 );
		if ( i > 4 )
			piece1.moveDown( 28 );
		waitfor( piece5 );
		}
}


void lurker3Thread()
	{
	trigger( "$lurker3_spawn" );
	wait( 0.1 );

//hzm coop mod chrissstrahl - we don't use this	$player.playsound( "sound/chars/lurker/lurk_death3.wav", 3, .3, 10000 );

	$lurker3.aggressive(1);
	}


void basher1Thread()
	{
//	trigger( "$basher1_spawn" );
//	wait( 0.1 );

	wait( 1.0 );

	$basher1.aggressive(1);

	//hzm coop mod chrissstrahl - give ammo
	thread coop_givePlasma();
	
	}



void basher2Thread()
	{
//	trigger( "$basher2_spawn" );
//	wait( 0.1 );

	$basher2.killthread( "basher3Thread" );

	$basher2.aggressive(1);
	
	//hzm coop mod chrissstrahl - give ammo
	thread coop_givePlasma();
	}

void basher3Thread()
	{
	trigger( "$basher3_spawn" );
	wait( 0.05 );

	$basher3.killthread( "basher4Thread" );

	$basher3.aggressive(1);
	
	//hzm coop mod chrissstrahl - give ammo
	thread coop_givePlasma();
	}

void basher4Thread()
	{
	trigger( "$basher4_spawn" );
	wait( 0.05 );

	$basher4.killthread( "basher5Thread" );

	$basher4.aggressive(1);
	
	//hzm coop mod chrissstrahl - give ammo
	thread coop_givePlasma();
	}

void basher5Thread()
	{
	trigger( "$basher5_spawn" );
	wait( 0.05 );

	$basher5.killthread( "levelComplete" );

	$basher5.aggressive(1);
	
	//hzm coop mod chrissstrahl - give ammo
	thread coop_givePlasma();
	}

void levelComplete()
{
	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$secretObjectiveS3$$","complete",1,1);
	
	holoDeckFadeIn();
}

void coop_givePlasma()
//give ammo to players
{
	//hzm coop mod chrissstrahl - give ammo to players
	entity ePlayer;
	float fPlayerIdInUse;
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getentity("player"+fPlayerIdInUse);
		if(doesEntityExist(ePlayer)){
			if(globalCoop_check_playerSpectator(ePlayer) == 0){
				ePlayer.ammo( "Plasma", 200 );
				ePlayer.ammo( "Fed", 200 );
				ePlayer.armor( "BasicArmor", 100 );
			}
		}
	}
}

void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_completed("zoo1");
}


