//-----------------------------------------------------------------
//  EF2 Level Script File
//
//	Level:	ent-training7
//	Script:
//	Geometry:
//	Created:
//	Edited:
//-----------------------------------------------------------------

void main();
void holoDeckSetup();
void holoDeckFadeOut();
void holoDeckFadeIn();
void levelComplete();
void initWorld();

void beginStage1();
void beginStage2();
void beginStage3();
void moveLight( entity l, float light_no );
void fighter1Damaged();
void fighter2Damaged();
void fighter3Damaged();
void fighterDamaged( float fighter_no );
void fighterExplode( float fighter_no );
void fighterFlame( float fighter_no );

void givePlayerAmmo();


//hzm coop mod - chrissstrahl - include the required coop level-scripts
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
void	coop_endLevel();
entity	entityPlayerGlobal;

#include "coop_mod/matrix/main.scr"
#include "maps/global_scripts/global_common.scr"
#include "maps/global_scripts/global_playerLoadout.scr"
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

#include "maps/global_scripts/global_archetype.scr"
#include "maps/global_scripts/global_math.scr"

#include "maps/m6/m6-exterior_globals.scr"
#include "maps/m6/m6-exterior_entityHierarchy.scr"
//#include "maps/m6/m6-exterior_cinematics.scr"

float search_fighter1_hits = 0;
float search_fighter2_hits = 0;
float search_fighter3_hits = 0;


//================================================================================
// Main
//================================================================================

//---------------------
// Function: main
// Comments:
// the main thread run at the start of the level
//---------------------
void main()
{
	holoDeckSetup();
	initWorld();
	holoDeckFadeOut();

	//hzm coop mod chrissstrahl - Add Broken weapons, to prevent messing up the script
	$world.addbroken( "burstrifle" );//remember fightes are die by hitcount not by amount of damage
	$world.addbroken( "AttrexianRifle" );
	$world.addbroken( "RomulanDisruptor" );
	$world.addbroken( "TetryonGatlingGun" );//remember fightes are die by hitcount not by amount of damage
	$world.addbroken( "RomulanRadGun" );//Makes only big boom
	
	wait ( 5 );
	thread givePlayerAmmo ();
	thread beginStage1();
}

//------------------------
// this thread sets up the Holo Deck And Player
//------------------------
void holoDeckSetup()
{
	//hzm coop mod chrissstrahl - default overwrite - show sucess hud
	coop_bool_showMissionSucessHud	= 1;
	
	//hzm coop mod chrissstrahl - spawn players at these at locations
	coop_float_spawnAngle1 			= 180;
	coop_float_spawnAngle3 			= 180;
	coop_float_spawnAngle5 			= 180;
	coop_float_spawnAngle7 			= 180;
	coop_vector_spawnOrigin1		= '-400 -60 703';
	coop_vector_spawnOrigin2		= '-760 -60 703';
	coop_vector_spawnOrigin3		= '-400 -140 703';
	coop_vector_spawnOrigin4		= '-760 -140 703';
	coop_vector_spawnOrigin5		= '-400 -260 703';
	coop_vector_spawnOrigin6		= '-760 -260 703';
	coop_vector_spawnOrigin7		= '-400 -340 703';
	coop_vector_spawnOrigin8		= '-760 -340 703';	
	
	//hzm coop mod chrissstrahl -set background story - it is a local string, so no need for seperate _deu
	coop_string_story = "$$SecretLoadingText$$";
	
	//hzm coop mod chrissstrahl - set tactical info
	coop_string_objectiveTacticalInfo1 = "";
	coop_string_objectiveTacticalInfo2 = "";
	coop_string_objectiveTacticalInfo3 = "";
	
	cam_fadeout( .05, 0, 0, 0, 1, 0 );

	globalCommon_SpawnScriptModel( "enviro/enterprise_holo-deck.tik", "holoDeck", '0 0 0', 0 );

	//soundtrack( "music/igm1.mus" );

	//hzm coop mod chrissstrahl - make sure no player can wander
	thread globalCoop_player_imobilizeAll(1);
	
	//hzm coop mod chrissstrahl - make it work right in multiplayer
	$holoDeck.origin('-569 -281 690');
	
	$holoDeck.notsolid();
	$holoDeck.rendereffects( "+depthhack" );

	$holoDeck.forcealpha( 1 );
	$holoDeck.alpha( 1 );
	
	//hzm coop mod chrissstrahl - make sure no player can wander
	thread globalCoop_player_imobilizeAll(1);

}

//------------------------
// this thread makes the Holo Deck Fade Out
//------------------------
void holoDeckFadeOut()
{
	//hzm coop mod chrissstrahl - Wait until the Game Starts in Multiplayer
	globalCoop_main_waitForWarmupTime();
	
	cam_fadein( .5, 0, 0, 0, 1, 0 );
	wait( 2 );

	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$secretObjectiveS2$$","incomplete",1,1);

	$holoDeck.fade( 2, 0 );
	wait( 2 );
	$holoDeck.hide();
	$holoDeck.alpha( 0 );

	//hzm coop mod chrissstrahl - allow to move
	thread globalCoop_player_imobilizeAll(0);

	level_ai ( 1 );
	
	//hzm coop mod chrissstrahl - give players ammo
	entity ePlayer;
	float fPlayerIdInUse;
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getentity("player"+fPlayerIdInUse);
		if(doesEntityExist(ePlayer)){
			if(globalCoop_check_playerSpectator(ePlayer) == 0){
				ePlayer.ammo( "Plasma", 200 );
				ePlayer.ammo( "Disruptor", 200 );
				ePlayer.ammo( "Idryll", 200 );
				ePlayer.ammo( "Fed", 200 );
				ePlayer.armor( "BasicArmor", 100 );
			}
		}
	}
}

//------------------------
// this thread makes the Holo Deck Fade Out
//------------------------
void holoDeckFadeIn()
{
	//hzm coop mod chrissstrahl - fade out the screen, this works better than spawning a holodeck
	//because a holodeck will lallways have players outside if teh map is larger than the holodeck
	cam_fadeout( 1.5, 0, 0, 0, 1, 0 );
	
	
	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$secretObjectiveS2$$","complete",1,1);
	
	wait( 0.5 );

	//hzm coop mod chrissstrahl - make sure no player can wander
	thread globalCoop_player_imobilizeAll(1);

	/*
	$holoDeck.origin( $player.getorigin() );
	$holoDeck.show();
	$holoDeck.fadein( 2, 1 );
	wait( 2 );
	$holoDeck.alpha( 1 );
	wait( 2 );
	*/

	//hzm coop mod chrissstrahl - load next map
	thread coop_endLevel();
	
	/*
	spawn ( "trigger_changelevel", "targetname", "trigger_endTraining", "map", "" );
	wait( .05 );
	trigger ( "$trigger_endTraining" );

	wait( 5 );

	stuffcmd ( "disconnect\n" );
	*/
}

//---------------------
// initWorld
// Initialize world parameters.
//---------------------
void initWorld()
{
	$world.entity_fade_dist( 10000 );
	$world.farplane_color ( '0.1 0.12 0.1' );
	$world.farplane ( 7000 );
	$world.weather( "rain", 400 );

	$search_fighter1.forcealpha(1);
	$search_fighter2.forcealpha(1);
	$search_fighter3.forcealpha(1);

	$search_fighter1.alpha(0);
	$search_fighter2.alpha(0);
	$search_fighter3.alpha(0);

	$search_fighter1.hide();
	$search_fighter2.hide();
	$search_fighter3.hide();

	$search_beam1_rotate_origin.bind( $search_fighter1 );
	$search_beam2_rotate_origin.bind( $search_fighter2 );
	$search_beam3_rotate_origin.bind( $search_fighter3 );

	$search_fighter1_targetarea.bind( $search_fighter1 );
	$search_fighter2_targetarea.bind( $search_fighter2 );
	$search_fighter3_targetarea.bind( $search_fighter3 );

	$search_fighter1_targetarea.hide();
	$search_fighter2_targetarea.hide();
	$search_fighter3_targetarea.hide();

	$search_beam1_origin.bind( $search_beam1_rotate_origin );
	$search_beam2_origin.bind( $search_beam2_rotate_origin );
	$search_beam3_origin.bind( $search_beam3_rotate_origin );

	wait ( 0.1 );

	waitforplayer();

	$world.clearAvailableViewModes();
	$world.addAvailableViewMode( "none" );

	$world.playsound( "sound/player/player_invpickup.wav", 3, 1, 10000 );
	
	//hzm coop mod chrissstrahl - register and distribute the weapons
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-CompressionRifle.tik");
	globalCoop_armory_useTiki("models/weapons/worldmodel-CompressionRifle.tik");
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-FieldAssaultRifle.tik");
	globalCoop_armory_useTiki("models/weapons/worldmodel-FieldAssaultRifle.tik");
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-photon.tik");
	globalCoop_armory_useTiki("models/weapons/worldmodel-photon.tik");
	
	
	wait  ( 3 );
}

void fighter1Damaged()
	{
	//hzm coop mod chrissstrahl - make sure that players can not create a event overflow
	$search_fighter1_targetarea.nodamage();
	
	fighterDamaged( 1 );
	}

void fighter2Damaged()
	{
	//hzm coop mod chrissstrahl - make sure that players can not create a event overflow
	$search_fighter2_targetarea.nodamage();
	
	fighterDamaged( 2 );
	}

void fighter3Damaged()
	{
	//hzm coop mod chrissstrahl - make sure that players can not create a event overflow
	$search_fighter3_targetarea.nodamage();
	
	fighterDamaged( 3 );
	}

void fighterDamaged( float fighter_no )
	{
	entity fighter;
	string fighter_origin_string;
	vector fighter_origin_vector;
	float  fighter_x;
	float  fighter_y;
	float  fighter_z;

	fighter = getentity( "search_fighter" + fighter_no );

	fighter_origin_vector = fighter.getorigin();
	fighter_x             = vectorgetx( fighter_origin_vector );
	fighter_y             = vectorgety( fighter_origin_vector );
	fighter_z             = vectorgetz( fighter_origin_vector );

	fighter_origin_string = fighter_x + " " + fighter_y + " " + fighter_z;

//	spawn( "fx/fx-explosion-fire-large.tik", "origin", fighter_origin_string, "scale", "5.0" );

	fighter.anim ( "damaged" );
	wait ( .5 );
	fighter.anim ( "idle" );

	if ( fighter_no == 1 )
		{
		search_fighter1_hits += 1;
		if ( search_fighter1_hits == 2 )
			thread fighterFlame( 1 );
		if ( search_fighter1_hits == 3 )
			thread fighterExplode( 1 );
		}

	if ( fighter_no == 2 )
		{
		search_fighter2_hits += 1;
		if ( search_fighter2_hits == 2 )
			thread fighterFlame( 2 );
		if ( search_fighter2_hits == 3 )
			thread fighterExplode( 2 );
		}

	if ( fighter_no == 3 )
		{
		search_fighter3_hits += 1;
		if ( search_fighter3_hits == 2 )
			thread fighterFlame( 3 );
		if ( search_fighter3_hits == 3 )
			thread fighterExplode( 3 );
		}
	}




void fighterFlame( float fighter_no )
	{
	entity fighter;
	entity fighter_flame;

	fighter = getentity( "search_fighter" + fighter_no );
	
	//hzm coop mod chrissstrahl - readd and adjust damaged flame
	spawn( "script_model", "model", "fx/fx-blueplasma.tik", "targetname", "search_fighter" + fighter_no + "_flame", "scale", "3" ,"origin",""+fighter.getOrigin() );
	wait( 0. );
	fighter_flame = getentity( "search_fighter" + fighter_no + "_flame" );
	fighter_flame.bind( fighter );
	}

void fighterExplode( float fighter_no )
	{
	entity fighter;
	
	entity fighter_beam;
	entity fighter_targetarea;
	string fighter_origin_string;
	vector fighter_origin_vector;
	float  fighter_x;
	float  fighter_y;
	float  fighter_z;

	fighter            = getentity( "search_fighter" + fighter_no );
	
	fighter_beam       = getentity( "search_beam" + fighter_no );
	fighter_targetarea = getentity( "search_fighter" + fighter_no + "_targetarea" );

	fighter_origin_vector = fighter.getorigin();
	fighter_x             = vectorgetx( fighter_origin_vector );
	fighter_y             = vectorgety( fighter_origin_vector );
	fighter_z             = vectorgetz( fighter_origin_vector );

	fighter_origin_string = fighter_x + " " + fighter_y + " " + fighter_z;

	spawn( "fx/fx-explosion-spaceship-idryll.tik", "origin", fighter_origin_string, "scale", "1.0" );
	fighter.playsound ( "sound/impact/explosion/expl_drullship.wav" , 2 , 2 , 4384 );
	fighter.remove();
	fighter_targetarea.remove();
	
		//hzm coop mod chrissstrahl - remove the damaged effect that we have readded, or it will stay where eher the fighter was destroyed at
		entity fighterFlameEntity;
		fighterFlameEntity = getentity( "search_fighter" + fighter_no + "_flame" );
		fighterFlameEntity.remove();
	}

//----------------------------------------------------------------------
//----------------------------------------------------------------------
//	Function Implematations
//----------------------------------------------------------------------
//----------------------------------------------------------------------

void beginStage1()
	{
	//centerprint( "Begin Stage 1 of 3." );

	$search_fighter1.followpath( $search_path1 , "loop" , "normalangles" );
	$search_fighter1.playsound ( "sound/ships/drull/drull_flyby1.wav" , 2 , 1.5 , 10000 );

	$search_beam1.loopsound( "sound/ships/drull/drull_scan1.wav", 7, 700);

	wait ( 4 );
	$search_fighter1.fadein ( 1 );
	$search_fighter1.show ();

	wait( 2.0 );

	thread moveLight( $search_beam1_origin, 1 );

	search_fighter1_hits = 0;

	while( search_fighter1_hits < 3 )
		{
		$search_fighter1_targetarea.ondamage( "fighter1Damaged" );
		wait( 1.0 );
		}
	$search_beam1_origin.remove ();
//	$search_fighter1.remove();
//	$search_beam1.remove();
//	$search_fighter1_targetarea.remove();


	thread beginStage2();
	}



void beginStage2()
	{
	//centerprint( "Begin Stage 2 of 3." );

	$search_fighter2.followpath( $search_path2 , "loop"  , "normalangles"  );
	$search_fighter2.playsound ( "sound/ships/drull/drull_flyby1.wav" , 2 , 1.5 , 10000 );
	$search_beam2.loopsound( "sound/ships/drull/drull_scan1.wav", 7, 700);

	wait ( randomint ( 4 ) + 3 );
	$search_fighter2.fadein ( 1 );
	$search_fighter2.show ();

	wait( 2.0 );

	thread moveLight( $search_beam2_origin, 2 );

	search_fighter2_hits = 0;

	while( search_fighter2_hits < 3 )
		{
		$search_fighter2_targetarea.ondamage( "fighter2Damaged" );
		wait( 1.0 );
		}
	$search_beam2_origin.remove ();
//	$search_fighter2.remove();
//	$search_beam2.remove();
//	$search_fighter2_targetarea.remove();

	thread beginStage3();
	}


void beginStage3()
	{
	//centerprint( "Begin Stage 3 of 3." );

	$search_fighter3.followpath( $search_path3 , "loop"  , "normalangles"  );
	$search_fighter3.playsound ( "sound/ships/drull/drull_flyby1.wav" , 2 , 1.5 , 10000 );
	$search_beam3.loopsound( "sound/ships/drull/drull_scan1.wav", 7, 700);

	wait ( randomint ( 4 ) + 3 );

	$search_fighter3.fadein ( 1 );
	$search_fighter3.show ();

	wait( 2.0 );

	thread moveLight( $search_beam3_origin, 3 );

	search_fighter3_hits = 0;

	while( search_fighter3_hits < 3 )
		{
		$search_fighter3_targetarea.ondamage( "fighter3Damaged" );
		wait( 1.0 );
		}
	$search_beam3_origin.remove ();
//	$search_fighter3.remove();
//	$search_beam3.remove();

	thread levelComplete();
	}

//----------------------------------------------------------------------
//----------------------------------------------------------------------

void moveLight( entity l, float light_no )
	{
	//hzm coop mod chrissstrahl - make compatible to multiplayer
	entity ePlayer,eOrigin;
	string sPlayerTargetName;
	if ( light_no == 1 ){eOrigin = $search_beam1_rotate_origin;}
	else if ( light_no == 2 ){eOrigin = $search_beam2_rotate_origin;}
	else{eOrigin = $search_beam3_rotate_origin;}
	
	forcemusic( "action", "normal" );
	
	while ( doesEntityExist ( l ) )
		{
		//hzm coop mod chrissstrahl - get closest player
		ePlayer				= globalCoop_return_playerClosestPreferActive(eOrigin);
		sPlayerTargetName	= ePlayer.getTargetName();
		
		if ( (globalMath_GetDistance ( l.getorigin() , ePlayer.getorigin() ) <= 2048 ) && ePlayer.gethealth() > 0 )
			{
			if ( light_no == 1 )
			{
				//hzm coop mod chrissstrahl - make compatible to multiplayer
				$search_beam1_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll-secret.tik" , sPlayerTargetName , 5 ,20 );
				wait ( .5 );
				$search_beam1_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll-secret.tik" , sPlayerTargetName , 5 ,20 );
			}
			if ( light_no == 2 )
			{
				//hzm coop mod chrissstrahl - make compatible to multiplayer
				$search_beam2_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll-secret.tik" , sPlayerTargetName , 5 ,20 );
				wait ( .5 );
				$search_beam2_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll-secret.tik" , sPlayerTargetName , 5 ,20 );
			}
			if ( light_no == 3 )
			{
				//hzm coop mod chrissstrahl - make compatible to multiplayer
				$search_beam3_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll-secret.tik" , sPlayerTargetName , 5 ,20 );
				wait ( .5 );
				$search_beam3_rotate_origin.projectileAttackEntity ( "models/projectile/projectile-photonball-idryll-secret.tik" , sPlayerTargetName , 5 ,20 );
			}
			wait ( 1 );
			}
		wait ( .5 );
		}
	}
//----------------------------------------------------------------------
//----------------------------------------------------------------------

void levelComplete()
{
	holoDeckFadeIn();
}

//------------------------------------
// While this is going give player ammo & he will never run out.
//------------------------------------
void givePlayerAmmo()
{
	
	while( 1 )
	{
		//hzm coop mod chrissstrahl - give ammo to all players
		wait( 5 );
		globalCoop_main_globalCommand("ammo");
	}
}


void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_completed("ef2_minigame2");
}



