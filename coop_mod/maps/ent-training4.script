//-----------------------------------------------------------------
//  EF2 Level Script File
//
//  Level:	      ent-training1
//  Script By:    Richard "Charon" H.
//  Geometry By:  Richard "Charon" H.
//  Created on:   09/16/2002
//
//	Last Edited:  Richard "Charon" H.
//-----------------------------------------------------------------

void main();
//hzm coop mod chrissstrahl - declare our new functions
void coop_endLevel();
//hzm coop mod eof edit
void init();

void area4Start();
void area4PhaserShoot1();
void spawnWave1();
void queTargetAtRandomLocation( float whichPathType, float randomTargetLocation );
void waitForSkeetToDie( entity entityCurrentTargetName, float waitTime );
void skeetKilled();
void area4PhaserShoot1Complete();
void spawnWave2();
void area4End();

void giveMoreAmmo();
void area4Confirm();

float numberOfTargetsShot = 0;
float numberOfTargetsLaunched = 0;
float lastRandomTargetLocation = 0;
float nextTargetNumber = 0;

float numberToShootWave1 = 3;
float numberToShootWave2 = 3;
float numberToShootWave3 = 3;
float numberToShootWave4 = 3;

float firstWaveMovementSpeed = 2;
float secondWaveMovementSpeed = 4;

//==========================================================================================
// Includes
//==========================================================================================
//hzm coop mod - chrissstrahl - include the required coop level-scripts
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
#include "coop_mod/matrix/main.scr"
#include "maps/global_scripts/global_common.scr"
#include "maps/global_scripts/global_playerLoadout.scr"
#include "coop_mod/maps/training/global_training.script"
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

//================================================================================
// Main
//================================================================================

//---------------------
// Function: main
// Comments:
// the main thread run at the start of the level
//---------------------
void main()
{
	$sky.rendereffects( "+skyorigin" );
	$world.entity_fade_dist( 10000 );
	$holoDeck.rendereffects( "+depthhack" );
	$holoDeck.forcealpha( 1 );
	$holoDeck.alpha( 1 );
	
//hzm coop mod chrissstrahl - Set spawnangles for this level
	coop_float_spawnAngle0 		= 100;//SpawnOrigin0 Angle
	coop_float_spawnAngle1 		= 100;//SpawnOrigin0 Angle
	coop_float_spawnAngle2 		= 100;//SpawnOrigin0 Angle
	coop_float_spawnAngle3 		= 100;//SpawnOrigin0 Angle
	coop_float_spawnAngle4 		= 100;//SpawnOrigin0 Angle
	coop_float_spawnAngle5 		= 80;//SpawnOrigin0 Angle
	coop_float_spawnAngle6 		= 80;//SpawnOrigin0 Angle
	coop_float_spawnAngle7 		= 80;//SpawnOrigin0 Angle
	coop_float_spawnAngle8 		= 80;//SpawnOrigin0 Angle
//hzm coop mod chrissstrahl - spawnorigins, Spawn Players on those locations, at map start
	coop_vector_spawnOrigin1 	= '-1248 3151 2';
	coop_vector_spawnOrigin2 	= '-1180 3070 2';
	coop_vector_spawnOrigin3 	= '-1180 3140 2';
	coop_vector_spawnOrigin4 	= '-1180 3210 2';
	coop_vector_spawnOrigin5 	= '-1648 3151 2';
	coop_vector_spawnOrigin6 	= '-1720 3070 2';
	coop_vector_spawnOrigin7 	= '-1720 3140 2';
	coop_vector_spawnOrigin8 	= '-1720 3210 2';
	
	//hzm coop mod chrissstrahl -set background story - it is a local string, so no need for seperate _deu
	coop_string_story = "$$TrainingLoadingText$$";
	
	globalLoadout_ClearAllViewmode();
	globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	soundtrack( "music/training4.mus" );	
	thread init();
}

//---------------------
// Function: init
// Comments:
// the initilization thread called at the start of the level via main
//---------------------
void init()
{
	//$player.immobilize( 1 );
	
	//hzm coop mod chrissstrahl - Wait until the Game Starts in Multiplayer
	globalCoop_main_waitForWarmupTime();
	
	$holoDeck.notsolid();
	
	//hzm coop mod Chrissstrahl - halt players
	//globalCoop_main_globalCommand("immobilize");
	
	globalCommon_SpawnActor( "char/starfleet_tuvok-training.tik", "tuvok", '-1704 3152 10', 0 );
	initTuvok();

	waitforplayer();
	//$player.model( "models/char/munro_voyager.tik" );
	//$player.freeinventory();

	globalLoadout_ClearAllViewmode();
	globalLoadout_GiveViewmode( VIEWMODE_NONE );
	
	//$player.loadobjectives( "ent-training4" );
	
	area4Start();
}

//================================================================================
// Area 4
//================================================================================

void watchPlasmaAmmo()
{
	while( 1 )
	{
		wait( 2 );
		//if( getfloatvar( "level.playerammo_Plasma" ) <= 120 )
		//{}
			
			
		entity ePlayer;
		float fPlayerIdInUse;
		for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
			ePlayer = getentity("player"+fPlayerIdInUse);
			if(doesEntityExist(ePlayer)){
				if(globalCoop_check_playerSpectator(ePlayer) == 0){
					ePlayer.ammo( "Plasma" , 200 );
				}
			}
		}
	}
}

//---------------------
// Function: area4Start
// Comments:
// very beginning of the level where player is introduced to the training mission
//---------------------
void area4Start()
{
	wait( 4 );
	$world.playsound( "sound/environment/computer/holo_change.wav", 3 ,1.2 ,10000 );
	$holoDeck.fade( 1 , 0 );
	wait( 1 );
	$holoDeck.hide();
	
	wait( 1 );
	
	fadeTuvokIn();
	
	$tuvok.playsound( "sound/environment/computer/holo_changesml1.wav", 3 ,.7 ,10000 );	
	wait( 2 );
	
	
	$tuvok.playdialog("localization/sound/dialog/train2/tuvok_yourrec.mp3", 1, 10000, 1); //Now Lieutenant, your records indicate that you need to re-certify on both the standard federation phaser and the compression rifle.  We'll begin with the phaser.
	waitForDialog( $tuvok );
	
	//$player.immobilize( 0 );
	
	wait( 1 );
	
	//hzm coop mod chrissstrahl - make weapons availabe for players when they spawn
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-phaser.tik");
	
	entity ePlayer;
	float fPlayerIdInUse;
	
	//hzm coop mod chrissstrahl - give all the spawn weapons the players, otherwhise they would need to respawn to have these weapons
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getentity("player"+fPlayerIdInUse);
		if(doesEntityExist(ePlayer)){
			if(globalCoop_check_playerSpectator(ePlayer) == 0){
				//give weapon, but do not make the player use it, they shall have to grab it them self from their inventory
				thread globalCoop_armory_equip(ePlayer);
			}
		}
	}
	
	//$player.give( "models/weapons/worldmodel-phaser.tik" );
	//$player.use( "Phaser" );
	//$player.ammo( "Plasma" , 200 );
	
	area4PhaserShoot1();
	
	thread watchPlasmaAmmo();
}

//---------------------
// Function: area4PhaserShoot1
// Comments:
// player learns how to shoot the phaser at objects
//---------------------
void area4PhaserShoot1()
{
	$tuvok.playdialog("localization/sound/dialog/train2/tuvok_prepaim.mp3", 1, 10000, 1); //For this exercise, use your phaser to destroy as many practice targets as you can.  You may use either your primary or alternate fire, but you must continue the exercise until you destroy enough targets to qualify for re-certification.
	waitForDialog( $tuvok );
	$tuvok.playdialog("localization/sound/dialog/train2/tuvok_gluck.mp3", 1, 10000, 1); //Good luck.
	waitForDialog( $tuvok );
	
	//hzm coop mod Chrissstrahl - set first objective
	globalCoop_objectives_set("$$phaserT4$$","incomplete",1,1);
	
	//$player.setobjectiveshow( "phaserT4", 1 );
	
	wait( 1 );
	
	thread spawnWave1();
}

//---------------------
// Function: spawnWave1
// Comments:
// controls all spawning for wave 1
//---------------------
void spawnWave1()
{
	float locationToUse;
	float tempFloat;
	float decrementNumber;
	
	numberToShootWave1 = (3 * globalCoop_return_integerPlayersQuantity(1));
	
	while( numberOfTargetsShot <= numberToShootWave1 )
	{
		numberOfTargetsLaunched++;
		
		thread queTargetAtRandomLocation( 1, 0 );
		wait( 1 );
	}
	
	$world.playsound( "sound/environment/computer/holo_change.wav", 3 ,1.2 ,10000 );
	
	locationToUse = 1;
	decrementNumber = 1;
	tempFloat = 0;
	
	numberToShootWave1 = (3 * globalCoop_return_integerPlayersQuantity(1));
	numberToShootWave2 = (3 * globalCoop_return_integerPlayersQuantity(1));
	
	while( numberOfTargetsShot <= ( numberToShootWave1 + numberToShootWave2 ) )
	{
		numberOfTargetsLaunched++;
		
		if( locationToUse <= 9 )
		{
			thread queTargetAtRandomLocation( 1, locationToUse );
			wait( 1 );
			
			locationToUse++;
		}
		else if( locationToUse <= 18 )
		{
			tempFloat = locationToUse - decrementNumber;
			
			thread queTargetAtRandomLocation( 1, tempFloat );
			wait( 1 );
			
			locationToUse++;
			decrementNumber = decrementNumber + 2; 
		}
		else
		{
			locationToUse = 1;
			decrementNumber = 1;
			tempFloat = 0;
		}
	}
	
	$world.playsound( "sound/environment/computer/holo_yes.wav", 3 ,1.5 ,10000 );
	wait( 2 );

	
	//hzm coop mod Chrissstrahl - set first objective complete
	globalCoop_objectives_set("$$phaserT4$$","complete",1,1);
	
	//$player.setobjectivecomplete( "phaserT4", 1 );

	area4PhaserShoot1Complete();
}

//---------------------
// Function: area4PhaserShoot1
// Comments:
// player learns how to shoot the phaser at objects
//---------------------
void area4PhaserShoot1Complete()
{
	$tuvok.playdialog("localization/sound/dialog/train2/tuvok_yoursatrep.mp3", 1, 10000, 1); //Excellent.  We will now repeat the exercise for the compression rifle.   As with your phaser, you may use either your primary or secondary fire, however you must continue until you destroy enough targets to qualify for re-certification.
	waitForDialog( $tuvok );
	
	
	//hzm coop mod chrissstrahl - remove weapon from virtual global coop inventory
	globalCoop_armory_weaponUnregister("models/weapons/worldmodel-phaser.tik");
	//hzm coop mod chrissstrahl - make weapons availabe for players when they spawn
	globalCoop_armory_weaponRegister("models/weapons/worldmodel-compressionrifle.tik");
	
	entity ePlayer;
	float fPlayerIdInUse;
	
	//hzm coop mod chrissstrahl - give all the spawn weapons the players, otherwhise they would need to respawn to have these weapons
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getentity("player"+fPlayerIdInUse);
		if(doesEntityExist(ePlayer)){
			if(globalCoop_check_playerSpectator(ePlayer) == 0){
				//give weapon, but do not make the player use it, they shall have to grab it them self from their inventory
				thread globalCoop_armory_equip(ePlayer);
				ePlayer.take("phaser");
			}
		}
	}
	
	//hzm coop mod chrissstrahl - wait a sec
	wait(0.15);
	
	//hzm coop mod chrissstrahl - take phaser
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getentity("player"+fPlayerIdInUse);
		if(doesEntityExist(ePlayer)){
			if(globalCoop_check_playerSpectator(ePlayer) == 0){
				ePlayer.take("phaser");
			}
		}
	}
	
	//$player.give( "models/weapons/worldmodel-compressionrifle.tik" );
	//wait ( .10 ); //Give a little time to process the event
	//$player.use( "CompressionRifle" );
	//wait ( .10 ); //Wait a little for the "give" to process
	//$player.take( "phaser" );


	//
	//Give the stupid gun again, because once, every freaking 10,000 times
	//the player won't "get" the stupid thing
	//


	$tuvok.playdialog("llocalization/sound/dialog/train2/tuvok_exabt.mp3", 1, 10000, 1); // Prepare yourself, Lieutenant, we are about to begin
	waitForDialog( $tuvok );
	
	//hzm coop mod Chrissstrahl - set secound objective
	globalCoop_objectives_set("$$rifleT4$$","incomplete",2,1);
	
	//$player.setobjectiveshow( "rifleT4", 1 );
	
	spawnWave2();
}

//---------------------
// Function: spawnWave2
// Comments:
// controls all spawning for wave 2
//---------------------
void spawnWave2()
{
	float locationToUse;
	float tempFloat;
	float decrementNumber;
	
	numberToShootWave1 = (3 * globalCoop_return_integerPlayersQuantity(1));
	numberToShootWave2 = (3 * globalCoop_return_integerPlayersQuantity(1));
	numberToShootWave3 = (3 * globalCoop_return_integerPlayersQuantity(1));
	
	while( numberOfTargetsShot <= ( numberToShootWave1 + numberToShootWave2 + numberToShootWave3 ) )
	{
		numberOfTargetsLaunched++;
		
		thread queTargetAtRandomLocation( 1, 0 );
		wait( 1 );
	}
	
	$world.playsound( "sound/environment/computer/holo_change.wav", 3 ,1.2 ,10000 );
	
	locationToUse = 1;
	decrementNumber = 1;
	tempFloat = 0;
	
	while( numberOfTargetsShot <= ( numberToShootWave1 + numberToShootWave2 + numberToShootWave3 + numberToShootWave4 ) )
	{
		numberOfTargetsLaunched++;
		
		if( locationToUse <= 5 )
		{
			thread queTargetAtRandomLocation( 2, locationToUse );
			wait( 1 );
			
			locationToUse++;
		}
		else if( locationToUse <= 10 )
		{
			tempFloat = locationToUse - decrementNumber;
			
			thread queTargetAtRandomLocation( 2, tempFloat );
			wait( 1 );
			
			locationToUse++;
			decrementNumber = decrementNumber + 2; 
		}
		else
		{
			locationToUse = 1;
			decrementNumber = 1;
			tempFloat = 0;
		}
	}
	
	$world.playsound( "sound/environment/computer/holo_yes.wav", 3 ,1.5 ,10000 );
	wait( 2 );
	
	//hzm coop mod Chrissstrahl - set secound objective complete
	globalCoop_objectives_set("$$rifleT4$$","complete",2,1);
	
	//$player.setobjectivecomplete( "rifleT4", 1 );

	area4End();
}

//---------------------
// Function: area1End
// Comments:
// player completes area 1 and is transported to area 2
//---------------------
void area4End()
{
	//$player.nodamage();
	
	$tuvok.playdialog("localization/sound/dialog/train2/tuvok_exempl.mp3", 1, 10000, 1); //Exemplary work, Lieutenant...  You have now satisfactorily completed all regulatory fitness and weapon certifications.  Thank you for your compliance. 
	waitForDialog( $tuvok );

	coop_endLevel();
	
	//spawn ( "trigger_changelevel", "targetname", "endLevel_trigger", "map", "m0-intro" );
	//wait ( 1 );
	//trigger ( "$endLevel_trigger" );
}

void queTargetAtRandomLocation( float whichPathType, float randomTargetLocation )
{
	nextTargetNumber = mod( nextTargetNumber, 10 ) + 1;
	
	if( whichPathType == 1 )
	{
		nextTargetNumber++;
		numberOfTargetsLaunched++;
	
		entity entityTargetLocation;
	
		string stringCurrentTargetName;
		entity entityCurrentTargetName;
		
		
		// If this target is meant to be random
		if( randomTargetLocation == 0 )
		{
			do
			{
				//To spawn a specific location, set randomTargetLocation before you call this
				randomTargetLocation = randomint( 9 ) + 1;
			} while( lastRandomTargetLocation == randomTargetLocation );
		}
		
		lastRandomTargetLocation = randomTargetLocation;
		entityTargetLocation = getentity( "targetLocation" + randomTargetLocation );
		stringCurrentTargetName = "target" + nextTargetNumber;
		
		//hzm coop mod chrissstrahl - this works better for mp
		entityCurrentTargetName = spawn("script_model","model","efx/training_target.tik","hide","1","notsolid","1","origin","0 0 -9999");
		wait(0.1);
		
		//globalCommon_SpawnScriptModel( "efx/training_target.tik", stringCurrentTargetName, entityTargetLocation.getorigin(), 270 );
		//entityCurrentTargetName = getentity( stringCurrentTargetName );
		
		//hzm coop mod chrissstrahl - this works better for mp
		entityCurrentTargetName.origin(entityTargetLocation.getorigin());
		entityCurrentTargetName.angle( 270);
		entityCurrentTargetName.solid();
		entityCurrentTargetName.show();
		entityCurrentTargetName.targetname(stringCurrentTargetName);
		
		thread waitForSkeetToDie( entityCurrentTargetName, firstWaveMovementSpeed );
		
		
		
		wait( .1 );
		entityCurrentTargetName.time( firstWaveMovementSpeed );
		entityCurrentTargetName.moveUp( 320 );
		waitfor( entityCurrentTargetName );
		
		entityCurrentTargetName.remove();
	}
	
	if( whichPathType == 2 )
	{
		nextTargetNumber++;
		numberOfTargetsLaunched++;
	
		entity entityTargetPath;
	
		string stringCurrentTargetName;
		entity entityCurrentTargetName;
		
		
		// If this target is meant to be random
		if( randomTargetLocation == 0 )
		{
			do
			{
				//To spawn a specific location, set randomTargetLocation before you call this
				randomTargetLocation = randomint( 5 ) + 1;
			} while( lastRandomTargetLocation == randomTargetLocation );
		}		
		lastRandomTargetLocation = randomTargetLocation;
		
		entityTargetPath = getentity( "splineArch" + randomTargetLocation );
		
		stringCurrentTargetName = "target" + nextTargetNumber;
		
		//globalCommon_SpawnScriptModel( "efx/training_target.tik", stringCurrentTargetName, entityTargetPath.getorigin(), 270 );
		//entityCurrentTargetName = getentity( stringCurrentTargetName );		
		
		//hzm coop mod chrissstrahl - this works better for mp
		entityCurrentTargetName = spawn("script_model","model","efx/training_target.tik","hide","1","notsolid","1","origin","0 0 -9999");
		wait(0.1);
		
		//hzm coop mod chrissstrahl - this works better for mp
		entityCurrentTargetName.origin(entityTargetPath.getorigin());
		entityCurrentTargetName.angle( 270);
		entityCurrentTargetName.targetname(stringCurrentTargetName);
		
		thread waitForSkeetToDie( entityCurrentTargetName, secondWaveMovementSpeed );
		
		wait( .05 );
		
		entityCurrentTargetName.followpath( entityTargetPath );
	
		//hzm coop mod chrissstrahl - this works better for mp
		entityCurrentTargetName.solid();
		entityCurrentTargetName.show();
		
		wait( secondWaveMovementSpeed );
		
		
		entityCurrentTargetName = getentity( stringCurrentTargetName );
		
		//Needed else it removes inapproiate models if this one has been shot
		if( doesEntityExist( entityCurrentTargetName ) )
		{
			entityCurrentTargetName.remove();
			//centerprint( "nextTargetNumber " + nextTargetNumber );
		}
	}
}

void waitForSkeetToDie( entity entityCurrentTargetName, float waitTime )
{
	entityCurrentTargetName.ondamage( "skeetKilled" );
	wait( waitTime );
}

void skeetKilled()
{
	entity entityTarget;
	entityTarget = getcurrententity();
	
	spawn( "func_spawn", "targetName", "explosionSpawner", "origin", vectorToString( entityTarget.getOrigin() ) );
	wait( .05 );
	$explosionSpawner.modelName( "fx/fx-explosion-fire-small.tik" );
	trigger( "$explosionSpawner" );	
	
	entityTarget.remove();
	$explosionSpawner.remove();
	numberOfTargetsShot++;
	
	entityTarget.playsound( "sound/environment/computer/lcars_hit.wav", 3, 1.6, 10000 );	
}

////////////////////
// giveMoreAmmo
// Give Player More Ammo
////////////////////
void giveMoreAmmo()
{
	return;
	$triggerGiveMoreAmmo.nottriggerable();
	
	$player.ammo( "Plasma", 200 );
	
	wait( 1 );
	$triggerGiveMoreAmmo.triggerable();
}

//---------------------
// Function: area4Confirm
// Comments:
// plays a confirmation sound each time the player completes a task
//---------------------
void area4Confirm()
{
	$world.playsound ( "sound/ships/enterprise/ent_beep_confirm.wav" , 8 , 1 , 20000 );
}


void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_completed("m0-intro");
}

