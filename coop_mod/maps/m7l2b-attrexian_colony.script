//-------------------------------------------
// EF2 Level Script File
//
// Level: m7l2b-attrexian_colony
// Script by: Richard "Charon" H., Jerry K.
// Geometry by: Jerry Keehan, Richard "Charon" H.
// Created on: 28 Apr, 2002
//
// Last Edited: Richard "Charon" H.
//--------------------------------------------

void main();
void init();

void setupGasChamber1();
void setupArchetypes();
void setupLockedDoors();
void setupFactoryArm1();

//function for accelerating and decelerating objects
void moveAxisAlignedEntity( string entityName, float totalTime, float totalDistance, string moveDirection );
void globalPistonPuzzle( float factoryPistonNumber );

void factoryLevel1AlienSpawnWave1();
void factoryLevel1AlienSpawnWave1_attack();
void factoryLevel1FlamePuzzle1();
void factoryLevel1FlamePuzzle1_flame1();
void factoryLevel1FlamePuzzle1_flame2();
void factoryLevel1FlamePuzzle1_flame3();
void insidefactory_pump1_move();
void insidefactory_pump2_move();
void insidefactory_steam_release1();
void insidefactory_steam_release2();
void factoryArm1_move();

void factoryLevel2giantpistonofdoomPuzzle1();
void factoryLevel2AlienSpawnWave1();
void factoryLevel2AlienSpawnWave2();
void factoryLevel2AlienSpawnWave3();
void factoryLevel2AlienSpawnWave4();
void factoryLevel2AlienSpawnWave4_catwalkexplosion();

void factoryLevel3Hallway1_explosion();
void factoryLevel3Hallway1_attack();

void factoryLevel1brokenfloor1_explode();
void factoryBasementAttack1();

void factory_elevator_motion_tothirdfloor();
void factory_elevator_door2_close();
void factory_elevator_door3_open();
void factory_elevator_floorpanel_wait();
void factory_elevator_floorpanel_explosion();

void gasChamberAttrexianDeath();
void gasChamberAttrexianDie();
void gasChamber_start();
void sequenceGasChamber1GasMonitor();

//--- cinematic functions
void cinematicWoundedEngineer();
void cinematicWoundedEngineer_Skipthread();
void cinematicWoundedEngineer_End();

void factory_innerdoor1_switch1_wait();
void factory_innerdoor1_switch1_check();
void factory_innerdoor1_action();
void factory_innerdoor1_piston_up();
void factory_innerdoor1_piston_down();

void factory_innerdoor1_areaportal_on();
void factory_innerdoor1_areaportal_off();

void insidefactoryPower_giantPistonofDoom1_check();
void insidefactoryPower_giantPistonofDoom1_crush();
void insidefactoryPower_alien1_spawn();
void insidefactoryPower_alien1_dead();

void factory_elevator_switch1_wait();
void factoryElevatorTricorderButton1_complete();
void insidefactoryPower_pumpsMove();
void factory_elevator_switch1_check();
void factory_elevator_down();
void factory_elevator_door1_open();
void factory_elevator_switch2_wait();
void factory_elevator_door1_close();
void factory_elevator_switch2_wait2();
void factory_elevator_switch2_reject();
void factory_elevator_motion();
void factory_elevator_door2_open();

void end_door_switch_wait();
void end_door_action();
void end_door_piston_up();
void end_door_piston_down();

void factoryElevatorTricorderButton1_onUse();
void factoryElevatorTricorderButton1_cancel();
void factoryElevatorTricorderButton1_failed();

void attrexianDoorBeepAccept();
void attrexianDoorBeepReject();
void attrexianAutoSave();
void attrexian_killThread();

float factory_outerdoor1_isopen = 0;
float factory_innerdoor1_isopen = 0;
float factory_elevator_power = 0;
float power_reroute = 0;
float factoryLevel1FlamePuzzle1_on = 1;
float factory_elevator_isat2ndfloor = 0;
float insidefactoryPower_aliensDead = 0;

float insidefactoryPower_giantPistonofDoom1_button1_pressed = 0;

entity cinDieAttrex;


//==========================================================================================
// INCLUDES
//==========================================================================================
//hzm coop mod - chrissstrahl - include the required coop level-scripts
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
void	coop_endLevel();
entity	entityPlayerGlobal;

#include "coop_mod/matrix/main.scr"

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
#include "maps/global_scripts/global_common.scr"
#include "maps/global_scripts/global_debugutils.scr"
#include "maps/global_scripts/global_playerLoadout.scr"
#include "maps/global_scripts/global_flyin.scr"
#include "maps/global_scripts/global_weld.scr"
#include "maps/global_scripts/global_archetype.scr"
#include "maps/global_scripts/global_tricorderBase.scr"
#include "maps/global_scripts/global_tricorderRoute.scr"
#include "maps/global_scripts/global_tricorderRouteData.scr"


//==========================================================================================
// Main Stuff 
//==========================================================================================

//---------------------
void main()
//---------------------
{
	//hzm coop mod chrissstrahl - set spawnloacations
	coop_float_spawnAngle0 			= 270;
	coop_vector_spawnOrigin1 		= '-130 -3300 64';
	coop_vector_spawnOrigin2 		= '-200 -3300 64';
	coop_vector_spawnOrigin3 		= '-50  -3230 64';
	coop_vector_spawnOrigin4 		= '-130 -3230 64';
	coop_vector_spawnOrigin5 		= '-200 -3230 64';
	coop_vector_spawnOrigin6 		= '-50  -3147 64';
	coop_vector_spawnOrigin7 		= '-130 -3147 64';
	coop_vector_spawnOrigin8 		= '-200 -3147 64';
	
	//hzm coop mod chrissstrahl -set background story - it is a local string, so no need for seperate _deu
	coop_string_story = "$$AColonyLoadingText$$";
	
	coop_string_objectiveItem1 = "$$FindElderlyIdryll$$";
	coop_string_objectiveItem2 = "$$EnterFactory$$";
	coop_string_objectiveItem3 = "$$ExploreFactory$$";
	coop_string_objectiveItem4 = "$$RestoreLiftPower$$";
	
	//hzm coop mod chrissstrahl - set tactical info
	coop_string_objectiveTacticalInfo1 = "";
	coop_string_objectiveTacticalInfo2 = "";
	coop_string_objectiveTacticalInfo3 = "";
	
	soundtrack( "music/m7l1b-attrexian_colony.mus" );
	$world.entity_fade_dist( 10000 );
	$world.farplane_cull( 1 );
	$world.farplane_color ( '0.1 0.1 0.15' );
	$world.farplane( 10000 );
	
	//hzm coop mod chrissstrahl - needs to be done very early or players spawn with no weapon in their hands
	thread globalLoadout_AssignWeapons( "m7l2a_attrexian_colony" );

	thread init(); // initialization thread
	
	waitForPlayer();
	
	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$FindElderlyIdryll$$","incomplete",1,0);
	globalCoop_objectives_set("$$EnterFactory$$","complete",2,1);
	
	//hzm coop mod chrissstrahl - remove trigger to change level, let coop_endLevel handle this
	$t449.remove();
	
	//hzm coop mod chrissstrahl - set kill message
	$factoryLevel1FlamePuzzle1_flame1hurt.setStringVar("uservar1","killmessage  $$MOD_FIRE$$ a ^2Flame");
	$factoryLevel1FlamePuzzle1_flame2hurt.setStringVar("uservar1","killmessage  $$MOD_FIRE$$ a ^2Flame");
	$factoryLevel1FlamePuzzle1_flame3hurt.setStringVar("uservar1","killmessage  $$MOD_FIRE$$ a ^2Flame");
	//de
	$factoryLevel1FlamePuzzle1_flame1hurt.setStringVar("uservar2","killmessage_de  $$MOD_FIRE$$ einer ^2Flamme");
	$factoryLevel1FlamePuzzle1_flame2hurt.setStringVar("uservar2","killmessage_de  $$MOD_FIRE$$ einer ^2Flamme");
	$factoryLevel1FlamePuzzle1_flame3hurt.setStringVar("uservar2","killmessage_de  $$MOD_FIRE$$ einer ^2Flamme");
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);
	
	//hzm coop mod chrissstrahl - set kill message
	$factoryArm1_piece1.setStringVar("uservar1","killmessage  $$MOD_AXE$$ a ^2hydraulic Arm");
	$factoryArm1_piece2.setStringVar("uservar1","killmessage  $$MOD_AXE$$ a ^2hydraulic Arm");
	$factoryArm1_piece3.setStringVar("uservar1","killmessage  $$MOD_AXE$$ a ^2hydraulic Arm");
	//de
	$factoryArm1_piece1.setStringVar("uservar2","killmessage_de  $$MOD_AXE$$ einem ^2hydraulischem Arm");
	$factoryArm1_piece2.setStringVar("uservar2","killmessage_de  $$MOD_AXE$$ einem ^2hydraulischem Arm");
	$factoryArm1_piece3.setStringVar("uservar2","killmessage_de  $$MOD_AXE$$ einem ^2hydraulischem Arm");
	
	//hzm coop mod chrissstrahl - set kill message
	$insidefactoryPower_giantPistonofDoom1.setStringVar("uservar1","killmessage  $$MOD_CRUSH$$ a ^2gigant Piston");
	//de
	$insidefactoryPower_giantPistonofDoom1.setStringVar("uservar2","killmessage_de  $$MOD_CRUSH$$ einem ^2gigantischem Kolben");
	
	//hzm coop mod chrissstrahl - set kill message
	$factory_innerdoor1.setStringVar("uservar1","killmessage  $$MOD_CRUSH$$ a ^2Heavy Door");
	$end_door.setStringVar("uservar1","killmessage  $$MOD_CRUSH$$ a ^2Heavy Door");
	//de
	$factory_innerdoor1.setStringVar("uservar2","killmessage_de  $$MOD_CRUSH$$ einer ^2schweren T$$u$$r");
	$end_door.setStringVar("uservar2","killmessage_de  $$MOD_CRUSH$$ einer ^2schweren T$$u$$r");
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);
	
	//hzm coop mod chrissstrahl - set kill message
	$factoryLevel2giantpistonofdoom1.setStringVar("uservar1","killmessage  $$MOD_CRUSH$$ a ^2gigant Piston");
	$factoryLevel2giantpistonofdoom2.setStringVar("uservar1","killmessage  $$MOD_CRUSH$$ a ^2gigant Piston");
	$factoryLevel2giantpistonofdoom3.setStringVar("uservar1","killmessage  $$MOD_CRUSH$$ a ^2gigant Piston");
	//de
	$factoryLevel2giantpistonofdoom1.setStringVar("uservar2","killmessage_de  $$MOD_CRUSH$$ einem ^2gigantischem Kolben");
	$factoryLevel2giantpistonofdoom2.setStringVar("uservar2","killmessage_de  $$MOD_CRUSH$$ einem ^2gigantischem Kolben");
	$factoryLevel2giantpistonofdoom3.setStringVar("uservar2","killmessage_de  $$MOD_CRUSH$$ einem ^2gigantischem Kolben");	
}


//==========================================================================================
// SETUP FUNCTIONS 
//==========================================================================================

//---------------------
// init
// setup the objects in the level
//---------------------
void init()
{
	thread setupArchetypes();
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);
	thread setupLockedDoors();
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);
	thread setupFactoryArm1();
	
	//--- setup lightstyles
	$world.light_lightstyle ( "lightAreaFlicker1", "aazzaazzjjaaazzaajaajzzzazazazajjzaazzkahjszwufkjaz", 0 );
	$world.light_lightstyle ( "lightAreaFlicker2", "aaaaazzzzzaaaaazzzzzjjaaaaaazzzzaaaajaaaajzzzzzazazazajjzaaaaazzkahjszwufkjaz", 0 );
	$world.light_lightstyle ( "lightLevel3Hallway1", "z", 0 );
	$world.light_lightstyle ( "lightLevel3Hallway1_2", "z", 0 );

	//--- spawn a cinematic camera
	spawn( "Camera", "targetname", "cam1" );
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);

	cinDieAttrex = createcinematic( "m7l2b_dyingattrex" );

	//--- hide the cinematic characters
	$cinematicMunro.ai_off();
	$cinematicMunro.hide();
	$cinematicMunro.notsolid();
	$cinematicWoundedEngineer_Engineer.ai_off();
	$cinematicWoundedEngineer_Engineer.anim( "injured-idle" );
	$cinematicWoundedEngineer_Engineer.pushable( 0 );
	$cinematicWoundedEngineer_Engineer.mass( 9999999999999 );
	$cinematicWoundedEngineer_Engineer.killthread( "attrexian_killThread" );
	$cinematicWoundedEngineer_Engineer.health( 200 );

	$factory_innerdoor1.solid();

	$factory_innerdoor1_areaportal.hide();
	$factory_innerdoor1_areaportal.notsolid();
	
	$factoryLevel2giantpistonofdoom1.solid();
	$factoryLevel2giantpistonofdoom2.solid();
	$factoryLevel2giantpistonofdoom3.solid();
	$insidefactory_catwalkbreak1_broke.hide();
	$insidefactory_catwalkbreak1_broke.notsolid();
	$insidefactory_laddershaft_door1.lock();
	$gasChamberAttrexian.hide();
	$factoryLevel3hallway_steam1.hide();
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);
	
	$factoryLevel1brokenfloor1trigger.nottriggerable();
	
	$factory_innerdoor1.dmg( 16384 );
	$end_door.dmg( 16384 );
	$factoryLevel2giantpistonofdoom1.dmg( 16384 );
	$factoryLevel2giantpistonofdoom2.dmg( 16384 );
	$factoryLevel2giantpistonofdoom3.dmg( 16384 );

	/*$factoryElevatorTricorderButton1.becomeModBarInSkill( 0 );*/ //hzm coop mod chrissstrahl - don't make it to easy in coop

	$factory_elevator_floorpanel1_filter.notsolid();

	$insidefactoryPower_treads1_moving.hide();

	$insidefactoryPower_giantPistonofDoom1.solid();
	$insidefactoryPower_giantPistonofDoom1.dmg( 16384 );
	$insidefactoryPower_giantPistonofDoom1.moveUp( 256 );
	$insidefactoryPower_giantPistonofDoom1_steam.hide();
	$insidefactoryPower_giantPistonofDoom1_button1_sparks.hide();

//	thread factory_innerdoor1_switch1_wait();
	thread factory_innerdoor1_action();
	
	thread factory_elevator_switch1_wait();
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);

	$factory_elevator_leftdoor.bind( $factory_elevator );
	$factory_elevator_rightdoor.bind( $factory_elevator );
	$factory_elevator_switch2.bind( $factory_elevator );
	$factory_elevator_floorpanel1.bind( $factory_elevator );
	$factory_elevator_floorpanel1_filter.bind( $factory_elevator );
	$factory_elevator_floorpanel1_debrisSpawn.bind( $factory_elevator );
	$factory_elevator_alien1.bind( $factory_elevator );
	$arch_elevator.bind( $factory_elevator );
	
	$factory_elevator_floorpanel1_filter.viewmode( "structuralintegrity" );
	$factory_elevator_floor2_shaftswitch_lightoff.hide();

	$factory_elevator_screendoor3.solid();
	
	//hzm coop mod chrissstrahl - server needs more pause cycles in multi
	wait(0.05);

	//set up elevator when level starts
	$factory_elevator.moveUp ( 608 );
	$end_door_portalblock.notsolid();
	$end_door_portalblock.hide();
	thread end_door_switch_wait();
	thread factory_elevator_floorpanel_wait();
	
	// set up factor when level starts
	thread factoryLevel2giantpistonofdoomPuzzle1();
	thread factoryLevel1FlamePuzzle1();
	thread insidefactory_pump1_move();
	thread insidefactory_pump2_move();	
	thread insidefactory_steam_release1();
	thread insidefactory_steam_release2();

	thread globalCommon_OnUse( $insidefactoryPower_giantPistonofDoom1_button1, "insidefactoryPower_giantPistonofDoom1_check" );

	$gasChamberAttrexian_killTrigger.nottriggerable();
	setupGasChamber1();
	thread sequenceGasChamber1GasMonitor();
}


//==========================================================================================
// Setup Functions
//==========================================================================================

//---------------------
// Function: setupGasChamber1
// Comments:
// does setup stuff for first gaschamber puzzle
//---------------------
void setupGasChamber1()
{
	//If no emitter is present, you can make the entire weld section one unit
	globalWeld_SetupWeldUnit( "gaspanel1_weld1" );
	globalWeld_SetupWeldUnit( "gaspanel1_weld4" );
	globalWeld_SetupWeldUnit( "gaspanel1_weld9" );
	
	globalWeld_AddEmitter( "gaspanel1_weld1" , "gaspanel1_emitter1" );
	globalWeld_AddEmitter( "gaspanel1_weld4" , "gaspanel1_emitter2" );
	globalWeld_AddEmitter( "gaspanel1_weld9" , "gaspanel1_emitter3" );

	//gas emitters visible only with trace gas tricorder filter display
	$gaspanel1_emitter1.viewmode ( "tracegas" );
	$gaspanel1_emitter2.viewmode ( "tracegas" );
	$gaspanel1_emitter3.viewmode ( "tracegas" );
}

//---------------------
// Function: setupArchetypes
// Comments:
// setups the archetypes in the level
//---------------------
void setupArchetypes()
{
	$arch_doorpanel1.contents( "targetable" );
	$arch_doorpanel1.archetype( "AttrexianDoorPanel" );

	$arch_powerpanel1.contents( "targetable" );
	$arch_powerpanel1.archetype( "AttrexianPowerPanel" );

	$arch_liftpanel1.contents( "targetable" );
	$arch_liftpanel1.archetype( "AttrexianLiftControl" );

	$arch_computerpanel1.contents( "targetable" );
	$arch_computerpanel1.archetype( "AttrexianPistonPanel" );

	$arch_elevator.contents( "targetable" );
	$arch_elevator.archetype( "AttrexianLiftControl" );

	$arch_elevatorswitch.contents( "targetable" );
	$arch_elevatorswitch.archetype( "AttrexianLiftControl" );
}

//---------------------
// Function: setupLockedDoors
// Comments:
// locks all the doors that need to be locked so they can make beepy noises
//---------------------
void setupLockedDoors()
{
	$factoryLockedDoor1.lock();
	$factoryLockedDoor2.lock();
	$factoryLockedDoor3.lock();
	$factoryLockedDoor4.lock();
	$factoryLockedDoor5.lock();
	$factoryLockedDoor6.lock();
	
	$gasChamber_door_red.hide();
	$insidefactory_laddershaft_door1_green.hide();
}

//---------------------
// Function: setupFactoryArm1
// Comments:
// setups the arm that moves back and forth between the giant piston and the conveyor
//---------------------
void setupFactoryArm1()
{
	$factoryArm1_piece1.dmg( 16384 );
	$factoryArm1_piece2.dmg( 16384 );
	$factoryArm1_piece3.dmg( 16384 );
	
	$factoryArm1_piece1.bind( $factoryArm1_piece1_origin );
	$factoryArm1_piece2_origin.bind( $factoryArm1_piece1_origin );
	$factoryArm1_piece2.bind( $factoryArm1_piece2_origin );
	$factoryArm1_piece3_origin.bind( $factoryArm1_piece2_origin );
	$factoryArm1_piece3.bind( $factoryArm1_piece3_origin );

	wait( .25 );
	
	$factoryArm1_piece3_origin.rotateYup( 45 );
	
	wait( .25 );
	
	$factoryArm1_piece2_origin.rotateYup( 45 );

	wait( .25 );

	$factoryArm1_piece3_origin.rotateZup( 45 );
}


//==========================================================================================
// generic functions
//==========================================================================================

//------------------------------------------------------------------
// Function: moveAxisAlignedEntity
// Comments:
// moves an entity with acceleration and deceleration.
//
// Parameters:
//   entity name - targetname of entity .
//
//   totalTime - A floating point value that represents the 
//   the total time it takes the door to move the specified distance.
//
//   totalDistance - The total distance the door will move.
//
//   moveDirection - The direction the door will move. Valid values are:
//       up
//       down
//		 north
//		 south
//       east
//       west
//------------------------------------------------------------------
void moveAxisAlignedEntity( string entityName, float totalTime, float totalDistance, string moveDirection )
{
	entity entityReference;
	entityReference = getEntity( entityName );
	
	//
	// IMPORTANT timeStep should be about .1 seconds.
	// Otherwise, you may get jerks at low frame rates (fps < 20).
	//
	float iterations = 100;		// Number of iterations
	float halfDistance;			// Distance at which transition occurs
	float transitionStep;		// Step at which transition from acceleration to deceleration occurs
	float timeStep;				// Time duration for a single step
	timeStep = totalTime / iterations;
	transitionStep = iterations / 2;
	halfDistance = totalDistance / 2;
	
	float sum;
	float distanceInc;
	sum = (transitionStep * (transitionStep + 1)) / 2;
	distanceInc = halfDistance / sum;
	
	float moveDir = 0;
	if ( moveDirection == "up" )
	{
		moveDir = 0;
	}
	else if ( moveDirection == "down" )
	{
		moveDir = 1;	
	}
	else if ( moveDirection == "west" )
	{
		moveDir = 2;	
	}
	else if ( moveDirection == "east" )
	{
		moveDir = 3;
	}
	else
	{
		centerprint( "Invalid move direction" ); 	
	}

	float idx;
	float moveInc = 0;
	for ( idx = 0; idx < iterations; idx += 1)
	{	
	 	if ( idx < transitionStep )
	 	{
	 		moveInc += distanceInc;
	 	}
	 	else
	 	{
	 	    moveInc -= distanceInc;
	 	}
		entityReference.time( timeStep );
		if ( moveDir == 0 )
		{
			entityReference.moveUp( moveInc );
		}
		else if ( moveDir == 1 )
		{
			entityReference.moveDown( moveInc );
		}
		else if ( moveDir == 2 )
		{
			entityReference.moveWest( moveInc );
		}
		else
		{
			entityReference.moveEast( moveInc );
		}
		waitfor ( entityReference );
	}
}

//---------------------
// Function: globalPistonPuzzle
// Comments:
// global call for the pistons in the Piston Puzzle
// Variables:
// factoryPistonNumber - float value of the number of the piston
//---------------------
void globalPistonPuzzle( float factoryPistonNumber )
{
	entity factoryPistonName , factoryPistonSteam;

	factoryPistonName = getentity( "factoryLevel2giantpistonofdoom" + factoryPistonNumber );
	factoryPistonSteam = getentity( "factoryLevel2giantpistonofdoom" + factoryPistonNumber + "_steam" );
		
	factoryPistonSteam.hide();
	factoryPistonName.time( 3 );
	factoryPistonName.moveUp( 256 );
	factoryPistonName.playsound ( "sound/environment/machine/factory_pneuup1.wav", 16, 1, 200 );
	wait( 5 );
		
	factoryPistonSteam.show();
	factoryPistonName.time( .25 );
	factoryPistonName.moveDown( 256 );
	factoryPistonName.playsound ( "sound/environment/machine/factory_pneuhit1.wav", 16, 1, 200 );
	waitfor( factoryPistonName );
		
	factoryPistonName.playsound ( "sound/environment/machine/factory_pneudown1.wav", 16, 1, 200 );
}


//==========================================================================================
// factory level 1 functions
//==========================================================================================
//---------------------
// Function: factoryLevel1AlienSpawnWave1
// Comments:
// aliens spawn on first floor and just mill about in the distance
//---------------------
void factoryLevel1AlienSpawnWave1()
{
	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$ExploreFactory$$","incomplete",3,1);

	$factoryLevel1AlienSpawn1.spawntargetname( "factoryLevel1AlienSpawn1spawned" );
	$factoryLevel1AlienSpawn1.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel1AlienSpawn1" );
//	$factoryLevel1AlienSpawn1spawned.setspawnmasterstatemap( "ai/Aliens/Lurker/LurkerWandering_MasterState.st" );

	$factoryLevel1AlienSpawn2.spawntargetname( "factoryLevel1AlienSpawn2spawned" );
	$factoryLevel1AlienSpawn2.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel1AlienSpawn2" );

	$factoryLevel1AlienSpawn3.spawntargetname( "factoryLevel1AlienSpawn3spawned" );
	$factoryLevel1AlienSpawn3.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel1AlienSpawn3" );

	$factoryLevel1AlienSpawn4.spawntargetname( "factoryLevel1AlienSpawn4spawned" );
	$factoryLevel1AlienSpawn4.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel1AlienSpawn4" );

	wait( .1 );

	$factoryLevel1AlienSpawn1spawned.fov( 120 );
	$factoryLevel1AlienSpawn1spawned.visiondistance( 512 );
	$factoryLevel1AlienSpawn1spawned.setgroupid( 10 );
	$factoryLevel1AlienSpawn2spawned.fov( 120 );
	$factoryLevel1AlienSpawn2spawned.visiondistance( 512 );
	$factoryLevel1AlienSpawn2spawned.setgroupid( 10 );
	$factoryLevel1AlienSpawn3spawned.fov( 120 );
	$factoryLevel1AlienSpawn3spawned.visiondistance( 512 );
	$factoryLevel1AlienSpawn3spawned.setgroupid( 10 );
}

//---------------------
// Function: factoryLevel1AlienSpawnWave1_attack
// Comments:
// aliens spawn on first floor and just mill about in the distance
//---------------------
void factoryLevel1AlienSpawnWave1_attack()
{
	//hzm coop mod chrissstrahl - get player closest to 
	entity ePlayer;
	
	ePlayer = globalCoop_return_playerClosestPreferActive($factoryLevel1AlienSpawn1spawned);
	$factoryLevel1AlienSpawn1spawned.attack( ePlayer );
	
	ePlayer = globalCoop_return_playerClosestPreferActive($factoryLevel1AlienSpawn2spawned);
	$factoryLevel1AlienSpawn2spawned.attack( ePlayer );
	
	ePlayer = globalCoop_return_playerClosestPreferActive($factoryLevel1AlienSpawn3spawned);
	$factoryLevel1AlienSpawn3spawned.attack( ePlayer );
	
	ePlayer = globalCoop_return_playerClosestPreferActive($factoryLevel1AlienSpawn4spawned);
	$factoryLevel1AlienSpawn4spawned.attack( ePlayer );
}


//---------------------
// Function: factoryLevel1FlamePuzzle1
// Comments:
// player dodges ye ole flame puzzle
//---------------------
void factoryLevel1FlamePuzzle1()
{
	$factoryLevel1FlamePuzzle1_flame1spawn.spawntargetname( "factoryLevel1FlamePuzzle1_flame1" );
	$factoryLevel1FlamePuzzle1_flame1spawn.modelname("fx/fx-flamethrow-medium-side-directional.tik");
	triggerentity( $factoryLevel1FlamePuzzle1_flame1spawn );

	$factoryLevel1FlamePuzzle1_flame1spawn1.spawntargetname( "factoryLevel1FlamePuzzle1_flame1_1" );
	$factoryLevel1FlamePuzzle1_flame1spawn1.modelname("fx/fx-flamethrow-medium-side-directional.tik");
	triggerentity( $factoryLevel1FlamePuzzle1_flame1spawn1 );

	$factoryLevel1FlamePuzzle1_flame2spawn.spawntargetname( "factoryLevel1FlamePuzzle1_flame2" );
	$factoryLevel1FlamePuzzle1_flame2spawn.modelname("fx/fx-flamethrow-medium-side-directional.tik");
	triggerentity( $factoryLevel1FlamePuzzle1_flame2spawn );

	$factoryLevel1FlamePuzzle1_flame2spawn1.spawntargetname( "factoryLevel1FlamePuzzle1_flame2_1" );
	$factoryLevel1FlamePuzzle1_flame2spawn1.modelname("fx/fx-flamethrow-medium-side-directional.tik");
	triggerentity( $factoryLevel1FlamePuzzle1_flame2spawn1 );

	$factoryLevel1FlamePuzzle1_flame3spawn.spawntargetname( "factoryLevel1FlamePuzzle1_flame3" );
	$factoryLevel1FlamePuzzle1_flame3spawn.modelname("fx/fx-flamethrow-medium-side-directional.tik");
	triggerentity( $factoryLevel1FlamePuzzle1_flame3spawn );

	$factoryLevel1FlamePuzzle1_flame3spawn1.spawntargetname( "factoryLevel1FlamePuzzle1_flame3_1" );
	$factoryLevel1FlamePuzzle1_flame3spawn1.modelname("fx/fx-flamethrow-medium-side-directional.tik");
	triggerentity( $factoryLevel1FlamePuzzle1_flame3spawn1 );
	
	thread factoryLevel1FlamePuzzle1_flame1();
	thread factoryLevel1FlamePuzzle1_flame2();
	thread factoryLevel1FlamePuzzle1_flame3();
}

//---------------------
// Function: factoryLevel1FlamePuzzle1_flame1
// Comments:
// player dodges ye ole flame puzzle
//---------------------
void factoryLevel1FlamePuzzle1_flame1()
{
	while( factoryLevel1FlamePuzzle1_on == 1 )
	{
		$factoryLevel1FlamePuzzle1_flame1.hide();
		$factoryLevel1FlamePuzzle1_flame1_1.hide();
		$factoryLevel1FlamePuzzle1_flame1hurt.nottriggerable();
		
		wait( 2 );
		
		$factoryLevel1FlamePuzzle1_flame1.show();
		$factoryLevel1FlamePuzzle1_flame1_1.show();
		$factoryLevel1FlamePuzzle1_flame1hurt.triggerable();
		$factoryLevel1FlamePuzzle1_flame1.playsound ( "sound/environment/machine/factory_flamejet.wav", 13, 1, 100 );
		
		wait( 2 );
	}
	$factoryLevel1FlamePuzzle1_flame1.show();
	$factoryLevel1FlamePuzzle1_flame1_1.show();
	$factoryLevel1FlamePuzzle1_flame1hurt.triggerable();
	$factoryLevel1FlamePuzzle1_flame1.playsound ( "sound/environment/machine/factory_flamejet.wav", 13, 1, 100 );
}

//---------------------
// Function: factoryLevel1FlamePuzzle1_flame1
// Comments:
// player dodges ye ole flame puzzle
//---------------------
void factoryLevel1FlamePuzzle1_flame2()
{
	while( factoryLevel1FlamePuzzle1_on == 1 )
	{
		$factoryLevel1FlamePuzzle1_flame2.hide();
		$factoryLevel1FlamePuzzle1_flame2_1.hide();
		$factoryLevel1FlamePuzzle1_flame2hurt.nottriggerable();
		
		wait( 2 );
		
		$factoryLevel1FlamePuzzle1_flame2.show();
		$factoryLevel1FlamePuzzle1_flame2_1.show();
		$factoryLevel1FlamePuzzle1_flame2hurt.triggerable();
		$factoryLevel1FlamePuzzle1_flame2.playsound ( "sound/environment/machine/factory_flamejet.wav", 14, 1, 100 );
		
		wait( 2.5 );
	}
	$factoryLevel1FlamePuzzle1_flame2.show();
	$factoryLevel1FlamePuzzle1_flame2_1.show();
	$factoryLevel1FlamePuzzle1_flame2hurt.triggerable();
	$factoryLevel1FlamePuzzle1_flame2.playsound ( "sound/environment/machine/factory_flamejet.wav", 14, 1, 100 );
}

//---------------------
// Function: factoryLevel1FlamePuzzle1_flame1
// Comments:
// player dodges ye ole flame puzzle
//---------------------
void factoryLevel1FlamePuzzle1_flame3()
{
	while( factoryLevel1FlamePuzzle1_on == 1 )
	{
		$factoryLevel1FlamePuzzle1_flame3.hide();
		$factoryLevel1FlamePuzzle1_flame3_1.hide();
		$factoryLevel1FlamePuzzle1_flame3hurt.nottriggerable();
		
		wait( 2 );
		
		$factoryLevel1FlamePuzzle1_flame3.show();
		$factoryLevel1FlamePuzzle1_flame3_1.show();
		$factoryLevel1FlamePuzzle1_flame3hurt.triggerable();
		$factoryLevel1FlamePuzzle1_flame3.playsound ( "sound/environment/machine/factory_flamejet.wav", 15, 1, 100 );
		
		wait( 3 );
	}
	$factoryLevel1FlamePuzzle1_flame3.show();
	$factoryLevel1FlamePuzzle1_flame3_1.show();
	$factoryLevel1FlamePuzzle1_flame3hurt.triggerable();
	$factoryLevel1FlamePuzzle1_flame3.playsound ( "sound/environment/machine/factory_flamejet.wav", 15, 1, 100 );
}

//---------------------
// Function: insidefactory_pump1_move
// Comments:
// moves the insidefactory_pump1 script object up and down
//---------------------
void insidefactory_pump1_move()
{
	wait( 1 );
	while( 1 )
	{
		$insidefactory_pump1.time( 2 );
		$insidefactory_pump1.moveUp( 128 );
		$insidefactory_pump1.playsound ( "sound/environment/machine/factory_pneuup2.wav", 10, .7, 200 );
		$insidefactory_pump3.time( 2 );
		$insidefactory_pump3.moveUp( 128 );
		$insidefactory_pump3.playsound ( "sound/environment/machine/factory_pneuup2.wav", 10, .7, 200 );
		$insidefactory_pump5.time( 2 );
		$insidefactory_pump5.moveUp( 128 );
		$insidefactory_pump5.playsound ( "sound/environment/machine/factory_pneuup2.wav", 10, .7, 200 );
		waitfor( $insidefactory_pump1 );
		
		$insidefactory_pump1.time( .25 );
		$insidefactory_pump1.moveDown( 128 );
		$insidefactory_pump1.playsound ( "sound/environment/machine/factory_pneuhit2.wav", 10, .7, 200 );
		$insidefactory_pump3.time( .25 );
		$insidefactory_pump3.moveDown( 128 );
		$insidefactory_pump3.playsound ( "sound/environment/machine/factory_pneuhit2.wav", 10, .7, 200 );
		$insidefactory_pump5.time( .25 );
		$insidefactory_pump5.moveDown( 128 );
		$insidefactory_pump5.playsound ( "sound/environment/machine/factory_pneuhit2.wav", 10, .7, 200 );
		waitfor( $insidefactory_pump1 );
		$insidefactory_pump1.playsound ( "sound/environment/machine/factory_pneudown2.wav", 10, .7, 200 );
		$insidefactory_pump3.playsound ( "sound/environment/machine/factory_pneudown2.wav", 10, .7, 200 );
		$insidefactory_pump5.playsound ( "sound/environment/machine/factory_pneudown2.wav", 10, .7, 200 );
	}
}

//---------------------
// Function: insidefactory_pump2_move
// Comments:
// moves the insidefactory_pump2 script object up and down
//---------------------
void insidefactory_pump2_move()
{
	while( 1 )
	{
		$insidefactory_pump2.time( .25 );
		$insidefactory_pump2.moveDown( 128 );
		$insidefactory_pump2.playsound ( "sound/environment/machine/factory_pneuup2.wav", 10, .7, 200 );
		$insidefactory_pump4.time( .25 );
		$insidefactory_pump4.moveDown( 128 );
		$insidefactory_pump4.playsound ( "sound/environment/machine/factory_pneuup2.wav", 10, .7, 200 );
		$insidefactory_pump6.time( .25 );
		$insidefactory_pump6.moveDown( 128 );
		$insidefactory_pump6.playsound ( "sound/environment/machine/factory_pneuup2.wav", 10, .7, 200 );
		waitfor( $insidefactory_pump2 );

		$insidefactory_pump2.time( 2 );
		$insidefactory_pump2.moveUp( 128 );
		$insidefactory_pump2.playsound ( "sound/environment/machine/factory_pneuhit2.wav", 10, .7, 200 );
		$insidefactory_pump4.time( 2 );
		$insidefactory_pump4.moveUp( 128 );
		$insidefactory_pump4.playsound ( "sound/environment/machine/factory_pneuhit2.wav", 10, .7, 200 );
		$insidefactory_pump6.time( 2 );
		$insidefactory_pump6.moveUp( 128 );
		$insidefactory_pump6.playsound ( "sound/environment/machine/factory_pneuhit2.wav", 10, .7, 200 );
		waitfor( $insidefactory_pump2 );
		$insidefactory_pump2.playsound ( "sound/environment/machine/factory_pneudown2.wav", 10, .7, 200 );
		$insidefactory_pump4.playsound ( "sound/environment/machine/factory_pneudown2.wav", 10, .7, 200 );
		$insidefactory_pump6.playsound ( "sound/environment/machine/factory_pneudown2.wav", 10, .7, 200 );
	}
}

//---------------------
// Function: insidefactory_steam_release1
// Comments:
// makes the steam release from the random steam vents in the factory
//---------------------
void insidefactory_steam_release1()
{
	$insidefactory_steam1.scale( 2 );
	$insidefactory_steam2.scale( 2 );
	while( 1 )
	{
		$insidefactory_steam1.hide();
		$insidefactory_steam2.hide();
		wait( 7 );
		
		$insidefactory_steam1.show();
		$insidefactory_steam2.show();
		$insidefactory_steam1.playsound ( "sound/environment/steam/steam_release.wav", 12, 1, 200 );
		$insidefactory_steam2.playsound ( "sound/environment/steam/steam_release.wav", 12, 1, 200 );
		wait( 3 );
	}
}

//---------------------
// Function: insidefactory_steam_release2
// Comments:
// makes the steam release from the random steam vents in the factory
//---------------------
void insidefactory_steam_release2()
{
	$insidefactory_steam3.scale( 2 );
	while( 1 )
	{
		$insidefactory_steam3.show();
		$insidefactory_steam3.playsound ( "sound/environment/steam/steam_release.wav", 12, 1, 200 );
		wait( 3 );
		
		$insidefactory_steam3.hide();
		wait( 7 );
	}
}

//---------------------
// Function: factoryArm1_move
// Comments:
// setups the arm that moves back and forth between the giant piston and the conveyor
//---------------------
void factoryArm1_move()
{
	$factoryArm1_piece3_origin.rotateZdown( 45 );
	wait( .10 );
	$factoryArm1_piece3_origin.rotateYdown( 45 );
	wait( .10 );
	
	$factoryArm1_piece1_origin.rotateYdown( 50 );
	$factoryArm1_piece2_origin.rotateYup( 5 );
	wait( .10 );
	$factoryArm1_piece3_origin.rotateYdown( 90 );
	wait( .10 );
	$factoryArm1_piece3_origin.rotateXdown( 45 );
	wait( .10 );
	$factoryArm1_piece2_origin.rotateZup( 45 );
	
	wait( .5 );
	
	$factoryArm1_piece2_origin.rotateZdown( 45 );
	wait( .10 );
	$factoryArm1_piece3_origin.rotateXup( 45 );
	wait( .10 );
	$factoryArm1_piece3_origin.rotateYup( 90 );
	wait( .10 );
	$factoryArm1_piece2_origin.rotateYdown( 5 );
	$factoryArm1_piece1_origin.rotateYup( 50 );
	wait( .10 );
	$factoryArm1_piece3_origin.rotateYup( 45 );
	wait( .10 );
	$factoryArm1_piece3_origin.rotateZup( 45 );
	
	wait( .5 );
}



//==========================================================================================
// factory level 2 functions
//==========================================================================================

//---------------------
// Function: factoryLevel2giantpistonofdoomPuzzle1
// Comments:
// player runs ye ole guantlet of giant pistons puzzle
//---------------------
void factoryLevel2giantpistonofdoomPuzzle1()
{
	while( 1 )
	{
		// pattern 1
		thread globalPistonPuzzle( 1 );
		wait( 3 );

		thread globalPistonPuzzle( 2 );
		wait( 3 );
	
		thread globalPistonPuzzle( 3 );
		wait( 3 );

		thread globalPistonPuzzle( 1 );
		wait( 3 );
	
		thread globalPistonPuzzle( 3 );
		wait( 3 );
	
		thread globalPistonPuzzle( 1 );
		thread globalPistonPuzzle( 2 );
		wait( 3 );

		thread globalPistonPuzzle( 3 );
		wait( 3 );
	
		thread globalPistonPuzzle( 2 );
		wait( 3 );
	}
}

//---------------------
// Function: factoryLevel2AlienSpawnWave1
// Comments:
// Spawns in the first wave of enemies on the second level of the factory
//---------------------
void factoryLevel2AlienSpawnWave1()
{
	//hzm coop mod chrissstrahl - spawnorigins, Spawn Players on those locations
	coop_float_spawnAngle0 			= 270;
	coop_float_spawnAngle1 			= 270;
	coop_float_spawnAngle2 			= 270;
	coop_float_spawnAngle3 			= 270;
	coop_float_spawnAngle4 			= 270;
	coop_float_spawnAngle5 			= 270;
	coop_float_spawnAngle6 			= 270;
	coop_float_spawnAngle7 			= 270;
	coop_float_spawnAngle8 			= 270;
	coop_vector_spawnOrigin1 			= '870 -3798 520';
	coop_vector_spawnOrigin2 			= '940 -3798 520';
	coop_vector_spawnOrigin3 			= '1010 -3798 520';
	coop_vector_spawnOrigin4 			= '1080 -3798 520';
	coop_vector_spawnOrigin5 			= '1150 -3798 520';
	coop_vector_spawnOrigin6 			= '1220 -3798 520';
	coop_vector_spawnOrigin7 			= '1290 -3798 520';
	coop_vector_spawnOrigin8 			= '1360 -3798 520';
	thread globalCoop_applaySpawnOriginOnReSpwanOrigin();

	$factoryLevel2AlienSpawn1.spawntargetname( "factoryLevel2AlienSpawn1spawned" );
	$factoryLevel2AlienSpawn1.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel2AlienSpawn1" );

	$factoryLevel2AlienSpawn2.spawntargetname( "factoryLevel2AlienSpawn2spawned" );
	$factoryLevel2AlienSpawn2.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel2AlienSpawn2" );
	
	$factoryLevel2AlienSpawn3.spawntargetname( "factoryLevel2AlienSpawn3spawned" );
	$factoryLevel2AlienSpawn3.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel2AlienSpawn3" );
}

//---------------------
// Function: factoryLevel2AlienSpawnWave2
// Comments:
// Spawns in the second wave of enemies on the second level of the factory
//---------------------
void factoryLevel2AlienSpawnWave2()
{
	$factoryLevel2AlienSpawn4.spawntargetname( "factoryLevel2AlienSpawn4spawned" );
	$factoryLevel2AlienSpawn4.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel2AlienSpawn4" );

	$factoryLevel2AlienSpawn5.spawntargetname( "factoryLevel2AlienSpawn5spawned" );
	$factoryLevel2AlienSpawn5.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel2AlienSpawn5" );
}

//---------------------
// Function: factoryLevel2AlienSpawnWave3
// Comments:
// Spawns in the third wave of enemies on the second level of the factory
//---------------------
void factoryLevel2AlienSpawnWave3()
{
	$factoryLevel2AlienSpawn7.scale( 1.2 );
	$factoryLevel2AlienSpawn7.spawntargetname( "factoryLevel2AlienSpawn7spawned" );
	$factoryLevel2AlienSpawn7.modelname( "char/alien-type1b-chewer.tik" );
	trigger( "$factoryLevel2AlienSpawn7" );
	
	wait( .1 );
	
	$factoryLevel2AlienSpawn7spawned.pushable( 0 );
	$factoryLevel2AlienSpawn7spawned.setturretmode( 1 );
	$factoryLevel2AlienSpawn7spawned.settendency ( "turret" , 1.0 );

//	$factoryLevel2AlienSpawn8.spawntargetname( "factoryLevel2AlienSpawn8spawned" );
//	$factoryLevel2AlienSpawn8.modelname( "char/alien-type1a-lurker.tik" );
//	trigger( "$factoryLevel2AlienSpawn8" );
}

//---------------------
// Function: factoryLevel2AlienSpawnWave4
// Comments:
// Spawns in the third wave of enemies on the second level of the factory
//---------------------
void factoryLevel2AlienSpawnWave4()
{
	$factoryLevel2AlienSpawn9.setfloatvar ( "dontAllowDeathInTransit" , 1.0 );
	wait( .1 );

    $insidefactory_laddershaft_door1.unlock();
	$insidefactory_laddershaft_door1_green.show();
	$insidefactory_laddershaft_door1_red.hide();

	thread globalFlyin_SpawnLaunch( $factoryLevel2AlienSpawn9, "char/alien-type1c-basher.tik", 0 , "", "", 1 );

	$factoryLevel2AlienSpawn9spawned.notsolid();
    wait ( 3 );
    
    $factoryLevel2AlienSpawn9spawned.solid();
}

//---------------------
// Function: factoryLevel2AlienSpawnWave4
// Comments:
// Spawns in the third wave of enemies on the second level of the factory
//---------------------
void factoryLevel2AlienSpawnWave4_catwalkexplosion()
{
	$insidefactory_catwalkbreak1_explosion.spawntargetname( "insidefactory_catwalkbreak1_exploder" );
	$insidefactory_catwalkbreak1_explosion.modelname( "fx/fx-explosion-fire-directional-metaldebris.tik" );
	trigger( "$insidefactory_catwalkbreak1_explosion" );
		
	$insidefactory_catwalkbreak1_broke.show();
	$insidefactory_catwalkbreak1_broke.solid();
	$insidefactory_catwalkbreak1_notbroke.hide();
	$insidefactory_catwalkbreak1_notbroke.notsolid();
}


//==========================================================================================
// factory level 3 functions
//==========================================================================================

//---------------------
// Function: factoryLevel3Hallway1_explosion
// Comments:
// shakes the screen, unhides the steam, and causes a light to go out in the hallway on level3
//---------------------
void factoryLevel3Hallway1_explosion()
{
	spawn( "func_earthquake", "targetname", "factoryLevel3Hallway1Quake1");
	wait( .1 );
	$elevatorQuake1.magnitude( .5 );
	$elevatorQuake1.duration( 2 );
	trigger( "$factoryLevel3Hallway1Quake1" );

	$factoryLevel3Hallway1LightExplode.spawntargetname( "factoryLevel3Hallway1LightExploder" );
	$factoryLevel3Hallway1LightExplode.modelname( "fx/fx-explosion-sparks-yellow.tik" );
	trigger( "$factoryLevel3Hallway1LightExplode" );

	$factoryLevel3hallway_steam1.show();
	$world.light_lightstyle ( "lightLevel3Hallway1", "aaaaazzzzzaaaaazzzzzjjaaaaaazzzzaaaajaaaajzzzzzazazazajjzaaaaazzkahjszwufkjaz", 0 );
}

//---------------------
// Function: factoryLevel3Hallway1_explosion
// Comments:
// player is ambushed in the hallway on level3
//---------------------
void factoryLevel3Hallway1_attack()
{
	$factoryLevel3Hallway1spawn1.playsound( "sound/chars/lurker/lurk_ambush.wav", 7, 1.5, 4096 );

	$factoryLevel3Hallway1spawn1.spawntargetname( "factoryLevel3Hallway1spawn1spawned" );
	$factoryLevel3Hallway1spawn1.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel3Hallway1spawn1" );

	wait( 1 );

	$factoryLevel3Hallway1spawn2.spawntargetname( "factoryLevel3Hallway1spawn2spawned" );
	$factoryLevel3Hallway1spawn2.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel3Hallway1spawn2" );
	
	wait( 3 );
	
	$factoryLevel3Hallway1spawn3.spawntargetname( "factoryLevel3Hallway1spawn3spawned" );
	$factoryLevel3Hallway1spawn3.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryLevel3Hallway1spawn3" );
}


//==========================================================================================
// factory basement functions
//==========================================================================================

//---------------------
// Function: factoryLevel1brokenfloor1_explode
// Comments:
// basement entrance explodes open allowing player into basement
//---------------------
void factoryLevel1brokenfloor1_explode()
{
	$factoryLevel1brokenfloor1explosion1.spawntargetname( "factoryLevel1brokenfloor1explosion1_exploder" );
	$factoryLevel1brokenfloor1explosion1.modelname( "fx/fx-explosion-fire-directional-metaldebris.tik" );

	$factoryLevel1brokenfloor1explosion2.spawntargetname( "factoryLevel1brokenfloor1explosion2_exploder" );
	$factoryLevel1brokenfloor1explosion2.modelname( "fx/fx-explosion-fire-directional-metaldebris.tik" );

	trigger( "$factoryLevel1brokenfloor1explosion1" );
	trigger( "$factoryLevel1brokenfloor1explosion2" );

	$factoryLevel1brokenfloor1.hide();
	$factoryLevel1brokenfloor1.notsolid();
	$factoryLevel1brokenfloor1.remove();
	$factoryBasementDoor1.speed( 999 );
	$factoryBasementDoor1.wait( -1 );
	$factoryBasementDoor1.lip( -8 );
	trigger( "$factoryBasementDoor1" );

	wait( .1 );
	
	$factoryBasementDoor1.lock();

	insidefactoryPower_alien1_spawn();
}

//---------------------
// Function: insidefactoryPower_alien1_spawn
// Comments:
// spawns an alien to crush
//---------------------
void insidefactoryPower_alien1_spawn()
{
	$insidefactoryPower_alienSpawn1.spawntargetname( "insidefactoryPower_alien1" );
	$insidefactoryPower_alienSpawn1.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$insidefactoryPower_alienSpawn1" );

	wait( .1 );
	$insidefactoryPower_alien1.ai_off();
	$insidefactoryPower_alien1.killthread( "insidefactoryPower_alien1_dead" );
	$insidefactoryPower_alien1.walkto( "$insidefactoryPower_aliencrush1", "attack_charge_run" );
	waitfor( $insidefactoryPower_alien1 );
	wait( 1 );
	$insidefactoryPower_alien1.ai_on();
}

//---------------------
// Function: insidefactoryPower_alien1_dead
// Comments:
//
//---------------------
void insidefactoryPower_alien1_dead()
{
	insidefactoryPower_aliensDead++;
	if( insidefactoryPower_aliensDead < 5 )
	{
		wait( 1 );
		insidefactoryPower_alien1_spawn();
	}
}

//---------------------
// Function: factoryBasementAttack1
// Comments:
// player is attacked in basement while using nightvision
//---------------------
void factoryBasementAttack1()
{
	$factoryBasementAlienSpawn1.spawntargetname( "factoryBasementAlienSpawn1spawned" );
	$factoryBasementAlienSpawn1.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryBasementAlienSpawn1" );

	$factoryBasementAlienSpawn4.spawntargetname( "factoryBasementAlienSpawn4spawned" );
	$factoryBasementAlienSpawn4.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryBasementAlienSpawn4" );

	wait( 1 );

	$factoryBasementAlienSpawn2.spawntargetname( "factoryBasementAlienSpawn2spawned" );
	$factoryBasementAlienSpawn2.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryBasementAlienSpawn2" );

	wait( 1 );

	$factoryBasementAlienSpawn3.spawntargetname( "factoryBasementAlienSpawn3spawned" );
	$factoryBasementAlienSpawn3.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryBasementAlienSpawn3" );
	
	wait( 1 );
	
	$factoryBasementAlienSpawn1.spawntargetname( "factoryBasementAlienSpawn1spawned2" );
	$factoryBasementAlienSpawn1.modelname( "char/alien-type1a-lurker.tik" );
	trigger( "$factoryBasementAlienSpawn1" );
}


//==========================================================================================
// factorydoor functions
//==========================================================================================

//---------------------
void factory_innerdoor1_switch1_wait()
//---------------------
{
	$factory_innerdoor1_switch1.onuse ( "factory_innerdoor1_switch1_check" );
	pause();
}

//---------------------
void factory_innerdoor1_switch1_check()
//---------------------
{
	$factory_innerdoor1_switch1.nouse ();
	if ( factory_outerdoor1_isopen == 0 )
	{
		$factory_innerdoor1_switch1.playsound ( "sound/ships/attrexian/att-beepconfirm.wav", 3, .7, 500 ); //TEMP Door switch open sound
		thread factory_innerdoor1_action ();
	}
	else 
	{
		$factory_innerdoor1_switch1.playsound ( "sound/ships/attrexian/att-beepreject.wav", 3, .7, 500 ); //TEMP Door switch failure sound
		thread factory_innerdoor1_switch1_wait ();
	}
		
}

//---------------------
void factory_innerdoor1_action()
//---------------------
{
	// move door up
	float threadNum;
	factory_innerdoor1_isopen = 1;
	thread factory_innerdoor1_areaportal_off();
	wait( .1 );
	
	wait( 1 );
	
	$factory_innerdoor1.playsound ( "sound/ships/attrexian/att-beepconfirm.wav", 3, .4, 500 );
	$factory_innerdoor1.playsound ( "sound/ships/attrexian/att-colonydoor1.wav", 4, 1, 500 );
	thread  moveAxisAlignedEntity( "factory_innerdoor1" , 2, 160, "up" );
	factory_innerdoor1_piston_up();
	wait( 8 );
	
	// move door down
	$factory_innerdoor1.playsound ( "sound/ships/attrexian/att-colonydoor1.wav", 4, 1, 500 );
	threadNum = thread  moveAxisAlignedEntity( "factory_innerdoor1" , 2, 160, "down" );
	thread factory_innerdoor1_piston_down();
	waitforthread( threadNum );
	wait( .1 );
	
	thread factory_innerdoor1_areaportal_on();
	factory_innerdoor1_isopen = 0;
	thread factory_innerdoor1_switch1_wait();
}

//---------------------
void factory_innerdoor1_piston_up()
//---------------------
{
	wait ( .5 );
	float threadNum;
	thread  moveAxisAlignedEntity( "factory_innerdoor1_piston1" , 1, 80, "up" );
	threadNum = thread  moveAxisAlignedEntity( "factory_innerdoor1_piston2" , 1, 80, "up" );
	waitforthread( threadNum );
}

//---------------------
void factory_innerdoor1_piston_down()
//---------------------
{
	wait ( .5 );
	float threadNum;
	thread  moveAxisAlignedEntity( "factory_innerdoor1_piston1" , 1, 80, "down" );
	threadNum = thread  moveAxisAlignedEntity( "factory_innerdoor1_piston2" , 1, 80, "down" );
	waitforthread( threadNum );
}

//-----------------------
void factory_innerdoor1_areaportal_on()
//-----------------------
{
	$factory_innerdoor1_areaportal.closeportal(); 
}

//-----------------------
void factory_innerdoor1_areaportal_off()
//-----------------------
{
	$factory_innerdoor1_areaportal.openportal(); 
}


//==========================================================================================
// end door functions
//==========================================================================================

//---------------------
void end_door_switch_wait()
//---------------------
{
	$end_door_switch.onuse( "end_door_action" );
	pause();
}

//---------------------
void end_door_action()
//---------------------
{
	$end_door_switch.nouse();
	$end_door_portalblock.openportal();
	// move door up
	float threadNum;
	wait ( .1 );
	$end_door.playsound ( "sound/ships/attrexian/att-beepconfirm.wav", 3, .4, 500 );
	$end_door.playsound ( "sound/ships/attrexian/att-colonydoor1.wav", 4, 1, 500 );
	thread moveAxisAlignedEntity( "end_door" , 2, 160, "up" );
	thread end_door_piston_up();
	wait ( 8 );
	// move door down
	$end_door.playsound ( "sound/ships/attrexian/att-colonydoor1.wav", 4, 1, 500 );
	threadNum = thread moveAxisAlignedEntity( "end_door" , 2, 160, "down" );
	thread end_door_piston_down();
	waitforthread( threadNum );
	wait ( .1 );
	$end_door_portalblock.closeportal();
	thread end_door_switch_wait();

	//hzm coop mod chrissstrahl - wait for the team to gather
	thread globalCoop_level_gatheringArea("coop_playerGatherIngArea","coop_endLevel",100,'450 450 400','956 -6889 1557');
}

//---------------------
void end_door_piston_up()
//---------------------
{
	wait ( .5 );
	float threadNum;
	thread moveAxisAlignedEntity( "end_door_piston1" , 1, 80, "up" );
	threadNum = thread moveAxisAlignedEntity( "end_door_piston2" , 1, 80, "up" );
	waitforthread( threadNum );
}	

//---------------------
void end_door_piston_down()
//---------------------
{
	wait ( .5 );
	float threadNum;
	thread moveAxisAlignedEntity( "end_door_piston1" , 1, 80, "down" );
	threadNum = thread moveAxisAlignedEntity( "end_door_piston2" , 1, 80, "down" );
	waitforthread( threadNum ); 
}


//==========================================================================================
// power functions
//==========================================================================================

//---------------------
// Function: insidefactoryPower_giantPistonofDoom1_check
// Comments:
// checks to see if the giant piston thingy that the player can use is ready for use again
//---------------------
void insidefactoryPower_giantPistonofDoom1_check()
{
	if( insidefactoryPower_giantPistonofDoom1_button1_pressed >= 5 )
	{
		$insidefactoryPower_giantPistonofDoom1_button1.nouse();
		$insidefactoryPower_giantPistonofDoom1_button1_sparks.show();
		$insidefactoryPower_giantPistonofDoom1_button1_sparks.playsound ( "sound/environment/electric/elec_impact.wav", 0, .7, 500 );
		while( 1 )
		{
			insidefactoryPower_giantPistonofDoom1_crush();
		}
	}
	else if( power_reroute == 1 )
	{
		insidefactoryPower_giantPistonofDoom1_crush();
		insidefactoryPower_giantPistonofDoom1_button1_pressed++;
	}
	else
	{
		$insidefactoryPower_giantPistonofDoom1_button1.nouse();
		wait( 1 );
		thread globalCommon_OnUse( $insidefactoryPower_giantPistonofDoom1_button1, "insidefactoryPower_giantPistonofDoom1_check" );
	}	
}

//---------------------
// Function: insidefactoryPower_giantPistonofDoom1_crush
// Comments:
// called when the player uses the insidefactoryPower_giantPistonofDoom1_button1 object
// causes a giant piston to come down and rain some doom upon the enemy
//---------------------
void insidefactoryPower_giantPistonofDoom1_crush()
{
	$insidefactoryPower_giantPistonofDoom1_button1.nouse();

	$insidefactoryPower_giantPistonofDoom1_steam.show();
	$insidefactoryPower_giantPistonofDoom1.time( .25 );
	$insidefactoryPower_giantPistonofDoom1.moveDown( 256 );
	$insidefactoryPower_giantPistonofDoom1.playsound ( "sound/environment/machine/factory_pneuhit1.wav", 16, 1, 200 );
	waitfor( $insidefactoryPower_giantPistonofDoom1 );
	$insidefactoryPower_giantPistonofDoom1.playsound ( "sound/environment/machine/factory_pneudown1.wav", 16, 1, 200 );
	wait( 1 );
	
	$insidefactoryPower_giantPistonofDoom1_steam.hide();
	$insidefactoryPower_giantPistonofDoom1.time( 1 );
	$insidefactoryPower_giantPistonofDoom1.moveUp( 256 );
	$insidefactoryPower_giantPistonofDoom1.playsound ( "sound/environment/machine/factory_pneuup1.wav", 16, 1, 200 );

	wait( .5 );

	thread factoryArm1_move();

	wait( 1.25 );
	if( insidefactoryPower_giantPistonofDoom1_button1_pressed >= 5 )
	{
		wait( .75 );
	}
	else
	{
		thread globalCommon_OnUse( $insidefactoryPower_giantPistonofDoom1_button1, "insidefactoryPower_giantPistonofDoom1_check" );
	}
}

//---------------------
void factoryElevatorTricorderButton1_complete()
//---------------------
{
	//hzm coop mod chrissstrahl - spawnorigins, Spawn Players on those locations
	coop_float_spawnAngle0 			= 170;
	coop_float_spawnAngle1 			= 170;
	coop_float_spawnAngle2 			= 170;
	coop_float_spawnAngle3 			= 170;
	coop_float_spawnAngle4 			= 124;
	coop_float_spawnAngle5 			= 83;
	coop_float_spawnAngle6 			= 170;
	coop_float_spawnAngle7 			= 170;
	coop_float_spawnAngle8 			= 170;
	coop_vector_spawnOrigin1 			= '227 -5848 100';
	coop_vector_spawnOrigin2 			= '217 -5939 100';
	coop_vector_spawnOrigin3 			= '214 -5987 100';
	coop_vector_spawnOrigin4 			= '9 -6185 100';
	coop_vector_spawnOrigin5 			= '-71 -6185 100';
	coop_vector_spawnOrigin6 			= '125 -5832 100';
	coop_vector_spawnOrigin7 			= '126 -5913 100';
	coop_vector_spawnOrigin8 			= '20 -5833 100';

	$factoryElevatorTricorderButton1.nouse();
	$cinematicMunro.playdialog( "localization/sound/dialog/m7l2/attcomp_powres.mp3", 1, 20000, 0 );
	power_reroute = 1;

	$factoryElevatorTricorderButton1.playsound ( "sound/ships/attrexian/att-powerup.wav", 4, 1, 500 );
	factory_elevator_power = 1;
	
	//hzm coop mod Chrissstrahl - set the objective
	globalCoop_objectives_set("$$RestoreLiftPower$$","complete",3,1);

	$arch_powerpanel1.missionobjective( 0 );

	$factoryLevel1brokenfloor1trigger.triggerable();
	
	factoryLevel1FlamePuzzle1_on = 0;

	$insidefactoryPower_treads1_moving.show();
	$insidefactoryPower_treads1.hide();

	wait( .1 );

	$arch_powerpanel1.remove();

	thread insidefactoryPower_pumpsMove();
	
	wait( 1.5 );
	
	attrexianAutoSave();
}

//---------------------
// Function: insidefactoryPower_pumpsMove
// Comments:
// moves the pumps after the power is restored
//---------------------
void insidefactoryPower_pumpsMove()
{
	while( 1 )
	{
		$insidefactoryPower_pump1.time( 2 );
		$insidefactoryPower_pump1.moveUp( 128 );
		$insidefactoryPower_pump1.playsound ( "sound/environment/machine/factory_pneuup2.wav", 10, .7, 200 );
		$insidefactoryPower_pump2.time( 2 );
		$insidefactoryPower_pump2.moveUp( 128 );
		$insidefactoryPower_pump2.playsound ( "sound/environment/machine/factory_pneuup2.wav", 10, .7, 200 );
		waitfor( $insidefactoryPower_pump1 );
		
		$insidefactoryPower_pump1.time( .25 );
		$insidefactoryPower_pump1.moveDown( 128 );
		$insidefactoryPower_pump1.playsound ( "sound/environment/machine/factory_pneuhit2.wav", 10, .7, 200 );
		$insidefactoryPower_pump2.time( .25 );
		$insidefactoryPower_pump2.moveDown( 128 );
		$insidefactoryPower_pump2.playsound ( "sound/environment/machine/factory_pneuhit2.wav", 10, .7, 200 );
		waitfor( $insidefactoryPower_pump1 );

		$insidefactoryPower_pump1.playsound ( "sound/environment/machine/factory_pneudown2.wav", 10, .7, 200 );
		$insidefactoryPower_pump2.playsound ( "sound/environment/machine/factory_pneudown2.wav", 10, .7, 200 );
	}
}


//==========================================================================================
// elevator functions
//==========================================================================================

//---------------------
void factory_elevator_switch1_wait()
//---------------------
{
	$factory_elevator_switch1.onuse ( "factory_elevator_switch1_check" );
	pause();
}

//---------------------
void factory_elevator_switch1_check()
//---------------------
{
	$factory_elevator_switch1.nouse();
	if( factory_elevator_isat2ndfloor == 1 )
	{
		$factory_elevator_switch1.playsound( "sound/ships/attrexian/att-beepconfirm.wav", 3, .7, 500 ); 
		$factory_elevator_screendoor1.playsound( "sound/ships/attrexian/att-elevat_door.wav", 4, 1, 500 );
		thread moveAxisAlignedEntity( "factory_elevator_screendoor1" , 2, 196, "up" );

		$factory_elevator_screendoor1.playsound ( "sound/ships/attrexian/att-elevat_door_stp.wav", 4, 1, 500 );
	}
	else if ( factory_elevator_power == 1 )
	{
		$factory_elevator_switch1.playsound( "sound/ships/attrexian/att-beepconfirm.wav", 3, .7, 500 ); 
		
		$factoryElevatorAlienSpawn1.spawntargetname( "factoryElevatorAlien1Spawned" );
		$factoryElevatorAlienSpawn1.modelname( "char/alien-type1a-lurker.tik" );
		trigger( "$factoryElevatorAlienSpawn1" );

		$factoryElevatorAlienSpawn2.spawntargetname( "factoryElevatorAlien2Spawned" );
		$factoryElevatorAlienSpawn2.modelname( "char/alien-type1a-lurker.tik" );
		trigger( "$factoryElevatorAlienSpawn2" );

		$factoryElevatorAlienSpawn1.playsound( "sound/chars/lurker/lurk_ambush.wav", 7, 1.5, 4096 );
		
		thread factory_elevator_down();
	}
	else 
	{
		//hzm coop mod Chrissstrahl - set the objective
		globalCoop_objectives_set("$$RestoreLiftPower$$","incomplete",3,1);
	
		$arch_powerpanel1.missionobjective( 1 );
	
		$factory_elevator_switch1.playsound( "sound/ships/attrexian/att-beepreject.wav", 3, .7, 500 ); 
		$world.simplePlayDialog("localization/sound/dialog/m7l2/attcomp_mainoff.mp3", 1, 8000000);
		thread factory_elevator_switch1_wait();
	}
		
}

//---------------------
void factory_elevator_down()
//---------------------
{
	//hzm coop mod chrissstrahl - spawnorigins, Spawn Players on those locations
	coop_float_spawnAngle0 			= 270;
	coop_float_spawnAngle1 			= 270;
	coop_float_spawnAngle2 			= 270;
	coop_float_spawnAngle3 			= 270;
	coop_float_spawnAngle4 			= 270;
	coop_float_spawnAngle5 			= 270;
	coop_float_spawnAngle6 			= 270;
	coop_float_spawnAngle7 			= 270;
	coop_float_spawnAngle8 			= 270;
	coop_vector_spawnOrigin1 		= '-130 -3300 64';
	coop_vector_spawnOrigin2 		= '-200 -3300 64';
	coop_vector_spawnOrigin3 		= '-50  -3230 64';
	coop_vector_spawnOrigin4 		= '-130 -3230 64';
	coop_vector_spawnOrigin5 		= '-200 -3230 64';
	coop_vector_spawnOrigin6 		= '-50  -3147 64';
	coop_vector_spawnOrigin7 		= '-130 -3147 64';
	coop_vector_spawnOrigin8 		= '-200 -3147 64';
	thread globalCoop_applaySpawnOriginOnReSpwanOrigin();

	//NEW SOUND - ZAK, elevator moves down to the first floor and settles into position, NOTE: elevator accelerates
	// and decelerates so the actual door time as specified below - 6 seconds - is not entirely accurate
	float threadNum;
	$factory_elevator.playsound ( "sound/ships/attrexian/att-elevat_start.wav", 3, 1, 500 );

	threadNum = thread  moveAxisAlignedEntity( "factory_elevator" ,6, 620, "down" );
	//NOTE: the actual travel unit distance of the elevator is 608, this number is tweaked to 620 due to inaccuracy 
	waitforthread( threadNum );
	$factory_elevator.playsound ( "sound/ships/attrexian/att-elevat_stop.wav", 3, 1, 500 );

	wait ( 1.0 ); //pause before opening door
	thread factory_elevator_door1_open();
}

//---------------------
void factory_elevator_door1_open()
//---------------------

{
	//NEW SOUND - ZAK, like in aliens movie three elevator doors move to the open position
	// approximately 1 second after elevator settles to ground level - the heavy screendoor moves up while 
	// the two elevator doors open sideways, NOTE: elevator accelerates and decelerates so the actual door
	// time as specified below - 6 seconds - is not entirely accurate
	float threadNum = 0;
	$factory_elevator_screendoor1.playsound ( "sound/ships/attrexian/att-elevat_door.wav", 4, 1, 500 );
	thread  moveAxisAlignedEntity( "factory_elevator_screendoor1" , 2, 196, "up" );
	thread  moveAxisAlignedEntity( "factory_elevator_rightdoor" , 2, 96, "east" );
	threadNum = thread  moveAxisAlignedEntity( "factory_elevator_leftdoor" , 2, 96, "west" );
	waitforthread ( threadNum );
	$factory_elevator_screendoor1.playsound ( "sound/ships/attrexian/att-elevat_door_stp.wav", 4, 1, 500 );
	thread factory_elevator_switch2_wait();
}

//---------------------
void factory_elevator_switch2_wait()
//---------------------
{
	$factory_elevator_switch2.onuse ( "factory_elevator_door1_close" );
	pause();
}

//---------------------
void factory_elevator_door1_close()
//---------------------
{	
	$factory_elevator_undertrigger.remove();
	$factory_elevator_switch2.nouse();
	float threadNum;
	$factory_elevator.playsound ( "sound/ships/attrexian/att-elevat_door.wav", 3, 1, 500 );
	thread  moveAxisAlignedEntity( "factory_elevator_screendoor1" , 2, 196, "down" );
	thread  moveAxisAlignedEntity( "factory_elevator_rightdoor" , 2, 96, "west" );
	threadNum = thread  moveAxisAlignedEntity( "factory_elevator_leftdoor" , 2, 96, "east" );
	$factory_elevator_screendoor1.playsound ( "sound/ships/attrexian/att-elevat_door_stp.wav", 4, 1, 500 );
	waitforthread( threadNum );
	thread factory_elevator_motion();
	thread factory_elevator_switch2_wait2();
}

//---------------------
// Function: factory_elevator_switch2_wait
// Comments:
// waits again for the switch
//---------------------
void factory_elevator_switch2_wait2()
{
	$factory_elevator_switch2.onuse ( "factory_elevator_switch2_reject" );
	pause();
}

//---------------------
// Function: factory_elevator_switch2_reject
// Comments:
// rejects the player when they try to use the elevator switch again
//---------------------
void factory_elevator_switch2_reject()
{
	$factory_elevator_switch2.nouse();
	$factory_elevator_switch2.playsound( "sound/ships/attrexian/att-beepreject.wav", 3, .7, 500 );
	wait( 3 );

	thread factory_elevator_switch2_wait2();
}

//---------------------
void factory_elevator_motion()
//---------------------
{
	$factory_elevator.time ( 7 );
	$factory_elevator.moveUp ( 864 ); // exact distance to bring elevator flush  with 2nd floor is 608
	$factory_elevator.playsound ( "sound/ships/attrexian/att-elevat_start.wav", 3, 1, 500 );
	waitfor ( $factory_elevator );

	//elevator comes to a rattling stop and doesn't quite make it past floor 2
	spawn( "func_earthquake", "targetname", "elevatorQuake1");
	wait( .1 );
//	$elevatorQuake1.magnitude( 1 );
//	$elevatorQuake1.duration( 2 );
//	trigger( "$elevatorQuake1" );
	
	//hzm coop mod chrissstrahl - play earthquake for all players
	thread globalCoop_player_earthquake( 1 , 2 , 60 );
	
	$factory_elevator.playsound ( "sound/environment/metal/bigcreak_impact.wav", 3, 1, 500 );
	
	//hzm coopo mod chrissstrahl - using elevator script object instead of $player
	$factory_elevator_floorpanel1.playsound ( "sound/ships/drull/drull_doorexplode.wav", 5, 1.5, 512 );
	
	$factory_elevator_floorpanel1.rotateXup( 7 );
	
	factory_elevator_isat2ndfloor = 1;
	thread factory_elevator_switch1_wait();
}

//---------------------
void factory_elevator_door2_open()
//---------------------
{
	//float threadNum = 0;
	$factory_elevator_screendoor2.playsound ( "sound/ships/attrexian/att-elevat_door.wav", 4, 1, 500 );
	thread  moveAxisAlignedEntity( "factory_elevator_screendoor2" , 2, 196, "up" );
	thread  moveAxisAlignedEntity( "factory_elevator_rightdoor" , 2, 96, "east" );
	thread  moveAxisAlignedEntity( "factory_elevator_leftdoor" , 2, 96, "west" );
	//threadNum = thread  moveAxisAlignedEntity( "factory_elevator_leftdoor" , 2, 96, "west" );
	//waitforthread ( threadNum );
	$factory_elevator_screendoor2.playsound ( "sound/ships/attrexian/att-elevat_door_stp.wav", 4, 1, 500 );

}

//---------------------
void factory_elevator_door2_close()
//---------------------
{	
	float threadNum;
	$factory_elevator.playsound ( "sound/ships/attrexian/att-elevat_door.wav", 3, 1, 500 );
//	thread  moveAxisAlignedEntity( "factory_elevator_screendoor2" , 2, 196, "down" );
	thread  moveAxisAlignedEntity( "factory_elevator_rightdoor" , 2, 96, "west" );
	threadNum = thread  moveAxisAlignedEntity( "factory_elevator_leftdoor" , 2, 96, "east" );
	waitforthread( threadNum );
	$factory_elevator.playsound ( "sound/ships/attrexian/att-elevat_door_stp.wav", 3, 1, 500 );

	$factory_elevator_thirdfloor_clip.remove();

	$factory_elevator_alien1.spawntargetname( "factory_elevator_alien1spawned" );
	$factory_elevator_alien1.modelname( "char/alien-type1c-basher.tik" );
	trigger( "$factory_elevator_alien1" );

	wait( .1 );
	
	$factory_elevator_alien1spawned.ai_off();
}

//---------------------
void factory_elevator_motion_tothirdfloor()
//---------------------
{
	$factory_elevator.time ( 5 );
	$factory_elevator.moveUp ( 608 ); // exact distance to bring elevator flush  with 3rd floor is 864
	$factory_elevator.playsound ( "sound/ships/attrexian/att-elevat_start.wav", 3, 1, 500 );
	
	waitfor ( $factory_elevator );
	$factory_elevator.playsound ( "sound/ships/attrexian/att-elevat_stop.wav", 3, 1, 500 );
	thread factory_elevator_door3_open();
}

//---------------------
void factory_elevator_door3_open()
//---------------------
{
	//float threadNum = 0;
	$factory_elevator_screendoor3.playsound ( "sound/ships/attrexian/att-elevat_door.wav", 4, 1, 500 );
	thread  moveAxisAlignedEntity( "factory_elevator_screendoor3" , 2, 196, "up" );
	thread  moveAxisAlignedEntity( "factory_elevator_rightdoor" , 2, 96, "east" );
	thread  moveAxisAlignedEntity( "factory_elevator_leftdoor" , 2, 96, "west" );
	//threadNum = thread  moveAxisAlignedEntity( "factory_elevator_leftdoor" , 2, 96, "west" );
	//waitforthread ( threadNum );
	$factory_elevator_screendoor3.playsound ( "sound/ships/attrexian/att-elevat_door_stp.wav", 4, 1, 500 );
	
//	$factory_elevator_alien1spawned.walkto( "$factory_elevator_alien1_node1" );
//	waitfor( $factory_elevator_alien1spawned );
	
	$factory_elevator_alien1spawned.ai_on();
	$factory_elevator_alien1spawned.attackplayer();
}

//---------------------
// Function: factory_elevator_floorpanel_wait
// Comments:
// used to wait for the floorpanel in the factory elevator to take damage
//---------------------
void factory_elevator_floorpanel_wait()
{
	$factory_elevator_floorpanel1.ondamage( "factory_elevator_floorpanel_explosion" );
	pause();
}
	
//---------------------
// Function: factory_elevator_floorpanel_explosion
// Comments:
// removes the floor panel and floor panel filter from the elevator and spawns an explosion
//---------------------
void factory_elevator_floorpanel_explosion()
{
	$factory_elevator_floorpanel1.nodamage();
	
	$factory_elevator_floorpanel1_debrisSpawn.spawntargetname( "factory_elevator_floorpanel1_debris" );
	$factory_elevator_floorpanel1_debrisSpawn.modelname( "fx/fx-explosion-metaldebris-directional.tik" );
	triggerentity( $factory_elevator_floorpanel1_debrisSpawn );
	
	$factory_elevator_floorpanel1.remove();
	$factory_elevator_floorpanel1_filter.remove();
}

//---------------------
// Function: factory_elevator_floor2_shaftswitch_onuse
// Comments:
// opens the second level elevator door with the switch in the shaft
//---------------------
void factory_elevator_floor2_shaftswitch_onuse()
{
	$factory_elevator_floor2_shaftswitch.rotateXdown( 180 );
	waitfor( $factory_elevator_floor2_shaftswitch );
	
	$factory_elevator_floor2_shaftswitch_lightoff.show();
	$factory_elevator_floor2_shaftswitch_lighton.hide();
	thread factory_elevator_door2_open();
}


//==========================================================================================
// cinematic functions
//==========================================================================================

//---------------------
// Function: cinematicWoundedEngineer
// Comments:
// cinematic for the wounded engineer
//---------------------
void cinematicWoundedEngineer()
{
	//hzm coop mod chrissstrahl, get player that activated this sequence, for later reference
	entity eTrigger;
	eTrigger			= getCurrentEntity();
	entityPlayerGlobal	= eTrigger.getLastActivatingEntity();
	
	//--- load the camera path
//	cam.load( "m7l2a_cinematicWoundedEngineer_CamSpot1" );

	wait( .1 );
	//--- start cinematic commands
	freezeplayer ();
	cinematic();
	letterbox( 1 );

	$cinematicWoundedEngineer_Engineer.hide();
	$cinematicWoundedEngineer_Engineer.notsolid();
	
	//--- set the skipthread
	skipthread( "cinematicWoundedEngineer_Skipthread");

	cinDieAttrex.setendthread( "cinematicWoundedEngineer_Skipthread" );
	cinDieAttrex.beginCinematic( "m7l2b_dyingattrex" ) ;
}


//---------------------
// Function: cinematicWoundedEngineer_Skipthread
// Comments:
// skip thread for wounded engineer cinematic
//---------------------
void cinematicWoundedEngineer_Skipthread()
{
	//kill the cinematic
	cinDieAttrex.setendthread( "" );
	skipthread( "null" );
	killthread( "cinematicWoundedEngineer" );

	wait( .5 );
	
	//fade to black
	cam_fadeout( 1, 0, 0, 0, 1, 0 );

	wait( 1 );
	
	//--- run the end routines for this cinematic
	thread cinematicWoundedEngineer_End();
}


//---------------------
// Function: cinematicWoundedEngineer_End
// Comments:
// end of the wounded engineer cinematic
//---------------------
void cinematicWoundedEngineer_End()
{
	vector playerNewOrigin;
	
	//--- hide dummy actors
	$cinematicMunro.hide();
	$cinematicMunro.notsolid();

	$cinematicWoundedEngineer_Engineer.show();
//	$cinematicWoundedEngineer_Engineer.solid();

	//--- pose the engineer
	$cinematicWoundedEngineer_Engineer.anim( "dead_ground" );
	
	//--- move the player
	playerNewOrigin = $cinematicMunro.getorigin();
	
	//hzm coop mod chrissstrahl, grab player that was triggering this sequence, and move him, like in singleplayer
	if( doesEntityExist(entityPlayerGlobal) && entityPlayerGlobal.getHealth() > 0){
		entityPlayerGlobal.origin( playerNewOrigin );
	}

	wait( .1 );
	
	//end cinematic
	noncinematic();
	clearletterbox( 1 );
	cueplayer();

	cinDieAttrex.endCinematic();
	
	wait( .25 );

	//release the player and fade in
	releaseplayer();
	cam_fadein( 1, 0, 0, 0, 1, 0 );
}


//==========================================================================================
// Gas Chamber functions
//==========================================================================================

//---------------------
// Function: gasChamberAttrexianDeath
// Comments:
// scene where the attrexian is gagging in the gas puzzle
//---------------------
void gasChamberAttrexianDeath()
{
	//hzm coop mod chrissstrahl - spawnorigins, Spawn Players on those locations
	coop_float_spawnAngle0 			= 270;
	coop_float_spawnAngle1 			= 270;
	coop_float_spawnAngle2 			= 270;
	coop_float_spawnAngle3 			= 270;
	coop_float_spawnAngle4 			= 270;
	coop_float_spawnAngle5 			= 270;
	coop_float_spawnAngle6 			= 270;
	coop_float_spawnAngle7 			= 270;
	coop_float_spawnAngle8 			= 270;
	coop_vector_spawnOrigin1 		= '-136 -4040 1472';
	coop_vector_spawnOrigin2 		= '-200 -4030 1472';
	coop_vector_spawnOrigin3 		= '-265 -4030 1472';
	coop_vector_spawnOrigin4 		= '-330 -4030 1472';
	coop_vector_spawnOrigin5 		= '-395 -4030 1472';
	coop_vector_spawnOrigin6 		= '-465 -4030 1472';
	coop_vector_spawnOrigin7 		= '-530 -4030 1472';
	coop_vector_spawnOrigin8 		= '-595 -4030 1472';
	thread globalCoop_applaySpawnOriginOnReSpwanOrigin();

	$gasChamberAttrexian_killTrigger.triggerable();

	$gasChamberAttrexian.show();
	$gasChamberAttrexian.animonce( "death-window" );
	wait( 5 );
}

//---------------------
// Function: gasChamberAttrexianDie
// Comments:
// remove the dieing attrexian and replace her with a fake dead body
//---------------------
void gasChamberAttrexianDie()
{
	$gasChamberAttrexian_killTrigger.remove();
	$gasChamberAttrexian.remove();
	$gasChamberAttrexianDead.show();
}

//---------------------
// Function: gasChamber_start
// Comments:
// starts the gas chamber puzzle
//---------------------
void gasChamber_start()
{
	trigger( "$gasChamber_door1" );
	
	//hzm coop mod chrissstrahl - don't lock any player out, just close the doors instead
	/*$gasChamber_door1.lock();*/
	$gasChamber_door1.close();
	$gasChamber_door2.lock();
	$gasChamber_door3.lock();
	//hzm eof

	$gasChamber_door_red.show();
	$gasChamber_door_green.hide();
}

//---------------------
// Function: sequenceGasChamber1GasMonitor	
// Comments:
// checks status of gas vents, and if sequence should end
//---------------------
void sequenceGasChamber1GasMonitor()
{
	float unitsFinished;
	float unitStatus;
	float checkUnit1;
	float checkUnit2;
	float checkUnit3;
	float totalUnits;

	unitsFinished = 0;
	checkUnit1 = 1;
	checkUnit2 = 1;
	checkUnit3 = 1;
	totalUnits = 3;
	
	//There should be 1 checkUnit for each panel you added an emitter to
	while ( unitsFinished != totalUnits )
	{
		if ( checkUnit1 )
		{
			unitStatus = $gaspanel1_weld1.getfloatvar( "finished" );
			if ( unitStatus )
			{
				unitsFinished++;
				checkUnit1 = 0;
			}
		}

		if ( checkUnit2 )
		{
			unitStatus = $gaspanel1_weld4.getfloatvar( "finished" );
			if ( unitStatus )
			{
				unitsFinished++;
				checkUnit2 = 0;
			}			
		}
			
		if ( checkUnit3 )
		{
			unitStatus = $gaspanel1_weld9.getfloatvar( "finished" );
			if ( unitStatus )
			{
				unitsFinished++;
				checkUnit3 = 0;
			}
		}

		if ( checkUnit1 == 0 && checkUnit2 == 0 && checkUnit3 == 0 )
		{
			trigger( "$panel1_explosion" );
			$panel1_gas_emitter2.playsound( "sound/ships/drull/drull_gastrapstop.wav", 10, 1, 160 );
			$panel1_explosion.remove();
		}
		wait ( .21 );
	}

	if ( unitsFinished == totalUnits )
	{
		$gasChamber_door1.unlock();
		$gasChamber_door2.unlock();
		$gasChamber_door3.unlock();
		$gasChamber_hurttrigger.nottriggerable();
		$gasChamber_hurttrigger.remove();
		$gasChamber_clouds1.hide();
		$gasChamber_clouds2.hide();
		$gasChamber_door_red.hide();
		$gasChamber_door_green.show();
		wait( 1 );
	}	
}


//==========================================================================================
// Tricorder Functions
//==========================================================================================

//---------------------
// Function: factoryElevatorTricorderButton1_onUse
// Comments:
//
//---------------------
void factoryElevatorTricorderButton1_onUse()
{
	entity puzzle;
	puzzle = getcurrententity();
	
	float skill;
	skill = getcvarfloat( "skill" );

	//[b60014] chrissstrahl - changed so it would not be this extremely dificult during coop
	if( skill == 1 || cvar_bool_multiplayer == 1)
	{
	    globalTricorderRoute_Reset();
		globalTricorderRoute_SetSource1Row( 6 );
		globalTricorderRoute_SetSource2Row( 9 );
		globalTricorderRoute_SetDestination1( 6, 9 );
		globalTricorderRoute_SetDestination2( 9, 6 );

		//--- begin row definitions
	    globalTricorderRoute_BeginDef();
		globalTricorderRoute_SetNextRow(32,32,32,32,32,32,32,32,32);
		globalTricorderRoute_SetNextRow(32,32,19,16,16,16,20,19,20);
		globalTricorderRoute_SetNextRow(32,32,17,19,16,16,26,5 ,27);
		globalTricorderRoute_SetNextRow(19,16,26,26,20,32,18,26,20);
		globalTricorderRoute_SetNextRow(17,32,17,3 ,21,32,32,17,17);
		globalTricorderRoute_SetNextRow(26,2 ,17,27,32,32,32,17,18);
		globalTricorderRoute_SetNextRow(17,18,26,5 ,32,19,6 ,21,32);
		globalTricorderRoute_SetNextRow(17,32,17,17,32,17,27,4 ,20);
		globalTricorderRoute_SetNextRow(26,16,21,17,32,18,16,3 ,4 );
		globalTricorderRoute_SetNextRow(17,4 ,16,2 ,16,20,32,32,27);
		globalTricorderRoute_SetNextRow(18,21,27,32,32,18,16,16,21);
	}
	if( skill >= 2 )
	{
	    globalTricorderRoute_Reset();
		globalTricorderRoute_SetSource1Row( 6 );
		globalTricorderRoute_SetSource2Row( 9 );
		globalTricorderRoute_SetDestination1( 6, 9 );
		globalTricorderRoute_SetDestination2( 9, 6 );

		//--- begin row definitions
	    globalTricorderRoute_BeginDef();
		globalTricorderRoute_SetNextRow(19,6 ,16,16,16,16,16,20,32);
		globalTricorderRoute_SetNextRow(9 ,8 ,4 ,16,16,16,20,9 ,20);
		globalTricorderRoute_SetNextRow(27,32,17,19,16,16,26,5 ,27);
		globalTricorderRoute_SetNextRow(19,16,26,26,20,19,2 ,26,5 );
		globalTricorderRoute_SetNextRow(17,32,17,3 ,26,0 ,4 ,1 ,1 );
		globalTricorderRoute_SetNextRow(26,5 ,17,27,18,0 ,4 ,0 ,4 );
		globalTricorderRoute_SetNextRow(17,18,26,5 ,32,3 ,1 ,5 ,21);
		globalTricorderRoute_SetNextRow(17,32,17,17,32,17,27,5 ,20);
		globalTricorderRoute_SetNextRow(26,16,4 ,17,32,18,16,3 ,4 );
		globalTricorderRoute_SetNextRow(17,4 ,0 ,2 ,16,20,32,21,27);
		globalTricorderRoute_SetNextRow(18,21,27,32,32,18,16,16,21);
	}
    
    //--- run the puzzle
    globalTricorderRoute_Run( puzzle, 0 );
}

//---------------------
// Function: factoryElevatorTricorderButton1
// Comments:
//
//---------------------
void factoryElevatorTricorderButton1_cancel()
{
	$factoryElevatorTricorderButton1.puzzleobject_reset();
	wait( 1 );
}

//---------------------
// Function: factoryElevatorTricorderButton1_failed
// Comments:
//
//---------------------
void factoryElevatorTricorderButton1_failed()
{
	$factoryElevatorTricorderButton1.puzzleobject_reset();
	wait( 1 );
}

//==========================================================================================
// other functions
//==========================================================================================

//---------------------
// Function: attrexianDoorBeepAccept
// Comments:
// plays a confirmation beep when the player pushes a door button
//---------------------
void attrexianDoorBeepAccept()
{
	$world.playsound ( "sound/ships/attrexian/att-beepconfirm.wav", 0, .7, 500000 );
}

//---------------------
// Function: attrexianDoorBeepReject
// Comments:
// plays a rejection beep when the player pushes a door button
//---------------------
void attrexianDoorBeepReject()
{
	$world.playsound ( "sound/ships/attrexian/att-beepreject.wav", 0, .7, 500000 );
}

//---------------------
// Function: attrexianAutoSave
// Comments:
// called to autosave the level
//---------------------
void attrexianAutoSave()
{
	globalCommon_Autosave();
}

//---------------------
// Function: attrexian_killThread
// Comments:
// killthread for the cityEngineer
//---------------------
void attrexian_killThread()
{
	//hzm coop mod chrissstrahl - fail mission with reason
	globalCoop_mission_failWithReason("CivilianKilled");
}

void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_completed("m7l2c-attrexian_colony");
}



