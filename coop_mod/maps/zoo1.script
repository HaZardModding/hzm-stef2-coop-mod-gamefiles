void main();
void end_level();


void printIt();
void printIt2();

//hzm coop mod chrissstrahl - level end routine, we need this
void coop_endLevel();
//hzm coop mod eof edit

//hzm coop mod chrissstrahl - include the required coop level-scripts
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
#include "coop_mod/matrix/main.scr"
#include "coop_mod/matrix/global/global_common.scr"
#include "coop_mod/matrix/global/global_playerLoadout.scr"
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
void main()
{
	//hzm coop mod chrissstrahl - register weapon into server side managed coop_status.ini file
	//so that the weapon will be there even after a server reboot
	/*
	globalCoop_server_itemUnlockedSet("models/weapons/worldmodel-imod.tik");
	globalCoop_server_itemUnlockedSet("models/weapons/worldmodel-attrex-rifle.tik");
	globalCoop_server_itemUnlockedSet("models/weapons/worldmodel-drull-staff.tik");
	globalCoop_server_itemUnlockedSet("models/weapons/worldmodel-rom-radgun-romhands.tik");
	globalCoop_server_itemUnlockedSet("models/weapons/worldmodel-rom-radgun.tik");
	*/

//coop_vector_spawnOrigins, Spawn Players on those locations, at map start
	coop_vector_spawnOrigin1 = '-680 188 192';
 	coop_vector_spawnOrigin2 = '-680 38 192';
	coop_vector_spawnOrigin3 = '-800 188 192';
	coop_vector_spawnOrigin4 = '-800 38 192';
	coop_vector_spawnOrigin5 = '-900 188 192';
	coop_vector_spawnOrigin6 = '-900 38 192';
	coop_vector_spawnOrigin7 = '-1100 188 192';
	coop_vector_spawnOrigin8 = '-1100 38 192';
	
	coop_float_spawnAngle0 = 1;
   //wait(5);
  //thread printIt();
	
	//hzm coop mod chrissstrahl - needs to be done very early or players spawn with no weapon in their hands
	thread globalLoadout_AssignWeapons( "zoo1" );
	
	//hzm coop mod chrissstrahl - set background story - it is a local string, so no need for seperate _deu
	coop_string_story = "$$SecretLoadingText$$";
	
    waitForPlayer();
    
    $attrexianrifle_pic.contents( "targetable" );
    $attrexianrifle_pic.archetype( "AttrexianRifleSecretPic" );
    
    $attrexiancolony_pic.contents( "targetable" );
    $attrexiancolony_pic.archetype( "AttrexianColonySecretPic" );
    
    $attrexianstation_pic1.contents( "targetable" );
    $attrexianstation_pic1.archetype( "AttrexianStationSecretPic" );
    
    $stalker_pic.contents( "targetable" );
    $stalker_pic.archetype( "StalkerSecretPic" );
    
    $idryllruins2_pic.contents( "targetable" );
    $idryllruins2_pic.archetype( "IdryllRuins2SecretPic" );
    
    $attrexianfemale_pic.contents( "targetable" );
    $attrexianfemale_pic.archetype( "AttrexianFemaleSecretPic" );
    
    $commander_pic.contents( "targetable" );
    $commander_pic.archetype( "CommanderSecretPic" );
    
    $quadraped_pic.contents( "targetable" );
    $quadraped_pic.archetype( "QuadrapedSecretPic" );
    
    $attrexianstation_pic2.contents( "targetable" );
    $attrexianstation_pic2.archetype( "AttrexianStationSecretPic2" );
    
//    $idryllruins1_pic.contents( "targetable" );
//    $idryllruins1_pic.archetype( "IdryllRuins1SecretPic" );
    
    $fedrifle_pic.contents( "targetable" );
    $fedrifle_pic.archetype( "FedRiflepic" );
    
    $attrexianmale_pic.contents( "targetable" );
    $attrexianmale_pic.archetype( "AttrexianMaleSecretPic" );

    $archeopendra_pic.contents( "targetable" );
    $archeopendra_pic.archetype( "Archeopendrapic" );

    $imod_pic.contents( "targetable" );
    $imod_pic.archetype( "IMODpic" );
	
	
	
	return;
	
	//[b607] chrissstrahl - testing new getTargeted command
	entity e;
	entity eOld;
	float fWaitTime;
	while(1){
		e = $player0.getTargetedEntity();
		if(doesEntityExist(e) == 1 && e.getRawTargetname() != "world"){
			e.selfdetonate();
			wait(1);
		}
		else{
			wait(0.01);
		}
	}
	
	return;
	
	//hzm coop chrissstrahl - test new script functions here
	spawn("actor","model","models/char/munro_voyager.tik","targetname","objective","origin","0 0 100");
	wait(1);
	$objective.missionobjective(1);
	
	vector v;
	float f;
	string s;
	s = "84589485043kkxlkv_12143-super-dkvxd";
	//s = getStringToLower(s);
	//s = getStringToUpper(s);
	//f = getIntStringLength(s);
	//s = getStringFromStringWithLengt(s,0,4);
	//f = getIntStringFind(s,"super");
	//s = $world.getSubclassName();
	//f = getFloatScriptVariable("coop_float_spawnAngle0");
	//v = getVectorScriptVariable("coop_vector_spawnOrigin1");
	//s = getStringScriptVariable("");
	//s = $player0.getName();
	//s = $player0.getTeamName();
	//s = $player0.getTeamScore();	
	//f = $player0.getScore();
	//f = $player0.getDeaths();
	//f = $player0.getKills();
	//f = $player0.getLastDamaged();
	//f = $player0.hasCoop();
	//f = $player0.getLanguage();
	//f = $player0.isSpectator();
	//f = $player0.isEntityInsideOfEntity($world);
	//s = getLevelParamaterValue("parametername");
	//f = isDigit("3");
	//f = getFloatFromString("csk1.78898zuxsp");
	//solidAsap($player0);
	//setVectorScriptVariable(string variablename, vector value);
	//setFloatScriptVariable(string variablename, float value);
	//setStringScriptVariable(string variablename, string value);
	//addPlayerIntScore($player0,33);
	//$player0.hudprint("String: '"+ f +"'\n"); // f s v

	waitforPlayer();
	$player0.killThread("playerKilled");
	
	//hzm coop mod chrissstrahl - spawn a gathering area, players must gather here for the game to continue
	thread globalCoop_level_gatheringArea("coop_playerGatherIngArea","testgathering",100,'100 100 200','0 0 64');
	//eof hzm
	
	wait(5);
	
	//$player0.killThread("playerKilled");
	//$player1.killThread("playerKilled");
	
	//hzm coop mod chrissstrahl, make sure all players are in the room
	entity ePlayer;
	float fPlayerIdInUse;
	for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
		ePlayer = getentity("player"+fPlayerIdInUse);
		if(doesEntityExist(ePlayer)){
			if(globalCoop_check_playerSpectator(ePlayer) == 0){
				globalCoop_player_warpToSpawn(ePlayer);
			}
		}
	}
	//eof hzm
	
	return;
	$player0.hudprint(getCvar("mapname") + "\n");
	$player0.hudprint(getLevelParamaterValue("hexe") + "\n");
	$player0.hudprint(getLevelParamaterValue("scheiTerHaufeN") + "\n");
	$player0.hudprint(getFloatFromString("getFloa.111tFromString") + "\n");
	$player0.hudprint(getFloatFromString("getFloa1.11tFromString") + "\n");
	$player0.hudprint(getFloatFromString("getFloa1......11tFromString") + "\n");
	
	
	string ssss;
	string previouse;
	while(1){
		ssss = $player0.isEntityInsideOfEntity($objective);
		if(ssss != previouse){
			previouse=ssss;
			$player0.hudprint("isEntityInsideOfEntity: "+ssss+" \n");
		}	
		wait(1);
	}
	
	//$player0.killed( $player1 , 1 , $player1 , 0 );
}
void startCin()
{
	cinematic();
	letterbox(.1);
	freezeplayer ();
	skipthread("endCin");
}
void endCin()
{
	noncinematic();
	releaseplayer();
	clearletterbox(1);
}
void playerKilled()
{
	entity e;
	e=getCurrentEntity();
	
	string sKilledByEntity;
	string sKilledByName;
	string sKilledByClass;
	string sKilledByActor;
	string sKilledByMeans;
	string sKilledByMeansName;
	sKilledByEntity = e.getStringVar("_playerKilledByEntity");
	sKilledByName = e.getStringVar("_playerKilledByName");
	sKilledByClass = e.getStringVar("_playerKilledByClass");
	sKilledByActor = e.getStringVar("_playerKilledByActor");
	sKilledByMeans = e.getStringVar("_playerKilledByMeans");
	sKilledByMeansName = e.getStringVar("_playerKilledByMeansName");
	
	e.hudprint("sKilledByEntity: "+ sKilledByEntity+"\n");
	e.hudprint("sKilledByName: "+sKilledByName+"\n");
	e.hudprint("sKilledByClass: "+sKilledByClass+"\n");
	e.hudprint("sKilledByActor: "+sKilledByActor+"\n");
	e.hudprint("sKilledByMeans: "+sKilledByMeans+"\n");
	e.hudprint("sKilledByMeansName: "+sKilledByMeansName+"\n");
	e.hudprint("means of death message: $$MOD-"+getStringToUpper(sKilledByMeansName)+"$$\n");
	e.hudprint("getLastDamaged: "+e.getLastDamaged()+"\n");
	e.hudprint("getTeam: "+e.getTeamName()+"\n");
	e.hudprint("getTeamScore: "+e.getTeamScore()+"\n");
	//centerprint("means of death message: $$MOD-"+getStringToUpper(sKilledByMeansName)+"$$\n");
	
	e.hudprint("Was Killed...\n");
	while(doesEntityExist(e) == 1 && e.gethealth() < 1 )
	{
		wait(0.01);
		//wait(6);//long time so respawn works for testing
		//e.respawn(); //test for killing score
	}
	if(!doesEntityExist(e)){
		return;
	}
	if(doesEntityExist(e)){
		e.hudprint("Was respawned...\n");
	}

}

void testgathering()
{
	$player0.hudprint("area triggered\n");
}

void end_level()
{
	coop_endLevel();
	//stuffcmd( "disconnect" );
}


void printIt()
{
	float fAnglePlayer = 0;
	float fAngleModel = 270;
	
	for(fAnglePlayer=0;fAnglePlayer<361;fAnglePlayer++){
	print(" resource\nRenderModel\n{\n");
	print(" name \"radarBg"+ fAnglePlayer +"\"\n");
	print(" rect 09 09 110 110\nfgcolor 1.00 1.00 1.00 1.00\nbgcolor 0 0 0 0\nborderstyle \"NONE\"\nrendermodel \"models/hud/radar_basic-ground-plane.tik\"\n");
	print(" rendermodelangles \""+ fAngleModel +" 90 -90\"\n");
	print(" rendermodeloffset \"276 0 0\"\nrendermodelrotateoffset \"0 0 0\"\nrendermodelscale 0.5\nrendermodelfov 20 20\n");
	print(" cvarvisibility coop_radar "+ fAnglePlayer +" ==\n");
	print(" }\n");
	fAngleModel--;
	}
}
void printIt2()
{
	float fAnglePlayer = -179;
	float fAngleModel = 90;
	
	for(fAnglePlayer=-179;fAnglePlayer<0;fAnglePlayer++){
		print("resource\nRenderModel\n{\n");
		print("name \"radarBg"+ fAnglePlayer +"\"\n");
		print("rect 09 09 110 110\nfgcolor 1.00 1.00 1.00 1.00\nbgcolor 0 0 0 0\nborderstyle \"NONE\"\nrendermodel \"models/hud/radar_basic-ground-plane.tik\"\n");
		print("rendermodelangles \""+ fAngleModel +" 90 -90\"\n");
		print("rendermodeloffset \"276 0 0\"\nrendermodelrotateoffset \"0 0 0\"\nrendermodelscale 0.5\nrendermodelfov 20 20\n");
		print("cvarvisibility coop_radar "+ fAnglePlayer +" ==\n");
		print("}\n");
		fAngleModel--;
	}
}

void coop_endLevel()
//------------------------------------------------------------------------------
//HZM Coop Mod - levelend default coop function, loads next map on completion
//------------------------------------------------------------------------------
{
	thread globalCoop_mission_completed("testMorph");
}


