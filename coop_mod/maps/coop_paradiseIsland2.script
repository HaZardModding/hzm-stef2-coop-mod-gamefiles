//--------------------------------------------------------------------------------------
//
//  Idryll Planet
//	
//  Level:		id_m3_2
//  Script By:		Chrissstrahl
//  Geometry By:	Avenger,	Chrissstrahl[INTERACTIVES ONLY]
//  Created On:     01/06/06
//  Last Change:	04/28/06
//  Revision:       1
//
//--------------------------------------------------------------------------------------


//.playSound( "sound/ships/drull/drull-beepreject.wav", 3, 1, 1256 );
//thread globalCoop_dialog_play(globalCoop_return_playerClosestPreferActive($openMainGateTrigger),"m5l1/idcomp_mainoff.mp3", 1.1, 100000,0 );	
//.playsound( "sound/ships/attrexian/att-powerup.wav", 7, 1, 1500 );
//.playsound( "sound/ships/drull/drull-beepaccept.wav", 8, .7, 1500 );
//thread globalCoop_dialog_play(globalCoop_return_playerClosestPreferActive($bugMaleAttackTrigger1),"m5l1/idcomp_mainon.mp3", 1.1, 100000,0 );
//Definitionen
//------------
void main();
void init();
void towerRightPlayerInside();
void disableCommunicationDevice1Hologram();
void disableCommunicationDecive1();
void pickupBomb();
void trapSphere();
void stalkerSpawn();
void stalkerDeath();
void giveStaff();
void disableCommunicationDecive2();
void romulanShuttleUnderAattck();
void assaultShuttleMakeDestructibleAndSetThread(entity e,float fHealth,string sThread);
void callThreadSafty(string sThread);
void setOnUseThread(entity e,string sThread);
void setOnDamageThread(entity e,string sThread);
void setOnTouchThread(entity e,string sThread);
void setOnBlockThread(entity e,string sThread);
void sphereTouched();
void sphereBlocked();
void afterSphere();
vector randomVectorIndside(entity e);
void landingPlatform1Lift();
void landingPlatform1LiftDown();
void landingPlatform1LiftUp();
float rRndIntMinMax(float fMinrange,float fMaxRange);
void submergeLift();
void killPlatform1LiftBlocker();
void killActivator();
void lockedDoor();
void usless();
float isPowerOfGiven(float fValue,float fGiven);
void secretArtCamber();
void coop_endLevel();

float fBridge1_powerCuplesSolved;
float fCastleSwitch,fCastleLiftPower;
float fFallschirm;
float fRomShuttleDestroyed;
float fbridge1_playerOnBridge;
//GLOBAL VARIABLES
float	float_landMineNumber;//global num of all mines
float	fSphereNoMoreDanger,fRocksTriggered,fLandingPlatform1Lift;
//INCLUDE
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include "coop_mod/matrix/main.scr"
#include "maps/global_scripts/global_common.scr"
#include "coop_mod/maps/coop_paradiseIsland2/declarations.script"
#include "coop_mod/maps/coop_paradiseIsland2/boxes.script"
#include "coop_mod/maps/coop_paradiseIsland2/bridge1.script"
#include "coop_mod/maps/coop_paradiseIsland2/bridge2.script"
#include "coop_mod/maps/coop_paradiseIsland2/castle.script"
#include "coop_mod/maps/coop_paradiseIsland2/fallschirmspringer.script"
#include "coop_mod/maps/coop_paradiseIsland2/forceFields.script"
#include "coop_mod/maps/coop_paradiseIsland2/mines.script"
#include "coop_mod/maps/coop_paradiseIsland2/rocks.script"
#include "coop_mod/maps/coop_paradiseIsland2/romulanShuttle.script"
#include "coop_mod/maps/coop_paradiseIsland2/singleplayer.script"
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void main()
{
	//if(getCvar("username") == "Chrissstrahl"){
		//$ipd1.origin('-13311 20232 -570');//-24336 19454 -800
		//$ipd1.angle(180);
		//wait(getCvarInt("mp_warmuptime")  + 0.1);
		//$player0.origin('-13311 20232 -570');
	//}
//fix splinepath camara endposition aligment
	//$t81.angles('-147 -36 0');//-147 -27 0
//Lock Doors
	$castleHeavyDoor.lock();//outer door
	$castleInsideGate1.lock();//inner door
	$world.farplane(3500);//3500
	$world.farplane_color( '0.2 0.2 0.3' );
	$world.entity_fade_dist( 3500 );
	$world.weather( "rain", 0 );
//set water color to lil green instad of blue (red green blue -> 1-0)
	$world.watercolor('0 .1 .05');
//Co-op Mod default overwrite
	coop_bool_showMissionSucessHud	= 1;//show sucess hud instead of just loading
//set Level Author
	coop_string_levelAuthor			= "FD^0_^8Mod^0_^8Team^0_^8&^0_^8Chrissstrahl";//level creator, team and involved, keep it short(10 chars)!!!
//WEAPONS
	coop_string_weapon1 		= "models/weapons/worldmodel-sniperrifle.tik";
	coop_string_weapon2 		= "models/weapons/worldmodel-BurstRifle.tik";
	coop_string_weapon3 		= "models/weapons/worldmodel-CompressionRifle.tik";
	coop_string_weapon4 		= "models/weapons/worldmodel-Phaser-stx.tik";
	coop_string_weapon5 		= "models/weapons/worldmodel-Tricorder-stx.tik";
	coop_string_weapon6 		= "models/weapons/worldmodel-attrex-rifle.tik";
//OBJECTIVES
	coop_string_objectiveItem1	= "Locate and enter the next Idryll Temple";
	coop_string_objectiveItem2	= "Locate and Disable the all Communication Devices";
	coop_string_objectiveItem3	= "Disable the Forcefield to cross over the Bridge";
	coop_string_objectiveItem4	= "Use your Tricoder to disable the Forcefield and beware the Snipers";
	coop_string_objectiveItem5	= "Enter the tower, remove the Snipers, and shutdown the Hologram";
	coop_string_objectiveItem6	= "Use Your Tricorder to detect and avoid the Cloacked Mines";
	coop_string_objectiveItem7	= "Get the lift to work, and gather on it";
//STORY - max 272 chars
	coop_string_story = "This forgotten Island is a quiet place, a Paradise. But it has something hidden that some renagade Romulans want...";
	
//GERMAN OBJECTIVES
	coop_string_objectiveItem1_deu = "Lokalisiern und betreten Sie den nächsten Idryll Tempel";
	coop_string_objectiveItem2_deu = "Lokalisiern und schalten Sie alle Kommunikationsstation ab";
	coop_string_objectiveItem3_deu = "Deaktiviren Sie das Kraftfeld zum überqueren der Brücke";
	coop_string_objectiveItem4_deu = "Schalten Sie die Kraftfelder ab, achten Sie auf die Scharfschützen";
	coop_string_objectiveItem5_deu = "Schalten Sie die Schafschützen aus und das Hologram ab";
	coop_string_objectiveItem6_deu = "Gebrauchen Sie Ihren Tricorder um getarnte Mienen zu umgehen";
	coop_string_objectiveItem7_deu = "Bringen Sie den Lift zum funktionieren und finden Sie sich dort ein";
//GERMAN STORY - max 272 chars
	coop_string_story_deu = "Diese vergessene Insel ist ein ruhiger Ort, ein Paradies. Doch sie hat etwas versteckt was einige romulanische Rebellen wollen...";
	
	//coop_vector_spawnOrigin1	= '-28577 29390 -324';//for testing

//INIZIAL ALL OTHER THINGS
	thread init();
//WAIT FOR TEH PLAYER TO BE READY/ENTER THE SERVER
	waitForPlayer();
	if(!cvar_bool_multiplayer){//If singleplayer
		$player.ammo("Idryll",1000,0);
		$player.ammo("Fed",4000,0);
		$player.ammo("Phaser",4000,0);
		$player.ammo("Plasma",800,0);
		
		//taking to long for singleplayer (12 sec)
		$bridge1_powerCuple1_puzzle.puzzleobject_timeToUse(3);
		$bridge1_powerCuple2_puzzle.puzzleobject_timeToUse(3);
		$bridge1_powerCuple3_puzzle.puzzleobject_timeToUse(3);
		$bridge1_powerCuple0_puzzle.puzzleobject_timeToUse(3);
	}else{
		//taking to long (12 sec)
		$bridge1_powerCuple1_puzzle.puzzleobject_timeToUse(6);
		$bridge1_powerCuple2_puzzle.puzzleobject_timeToUse(6);
		$bridge1_powerCuple3_puzzle.puzzleobject_timeToUse(6);
		$bridge1_powerCuple0_puzzle.puzzleobject_timeToUse(6);
	}
	$world.clearAvailableViewModes();
	$world.addAvailableViewMode("tripwire");
	$world.addAvailableViewMode("structuralintegrity");
	//$world.addAvailableViewMode("enemydetect");
	globalCoop_objectives_update("InComplete",1,0);//State,Item,ShowIt
	thread globalCoop_objectives_update("InComplete",2,1);//State,Item,ShowIt
	//addpuzzle
	//thread globalCoop_puzzle_add("comm1Display_puzzle","disableCommunicationDecive1",10,'-25680 18148 -636');
	//thread globalCoop_puzzle_add("comm2Display_puzzle","disableCommunicationDecive2",10,'-27096 28961 -71');
}

void init()
{
//shorten the time for singelplayer
	if(!cvar_bool_multiplayer)
	{
		spawn("AmmoEntity","model","item/ammo_fed_large.tik","origin","-27148 30397 -244");
		spawn("AmmoEntity","model","item/ammo_fed_large.tik","origin","-30083 28349 -244");
		spawn("AmmoEntity","model","item/ammo_fed_large.tik","origin","-31790 21784 -282");
		spawn("AmmoEntity","model","item/ammo_fed_large.tik","origin","-26740 18775 -713");
		cache("models/char/bug_male.tik");
		coop_string_objectiveItem7	= "Get the lift to work, and use it";
		coop_string_objectiveItem7_deu = "Bringen Sie den Lift zum funktionieren und betreten Sie diesen";
	}
//rocks
	$rocks_bombplanter.killattach();
	$rocks_bombplanter.hide();
	$rocks_bomb.hide();
	$rocks_bomb.archetype("");
	$rocks_bomb.contents("-targetable");
	
	spawn("Camera","targetname","cam1");
	spawn("Camera","targetname","cam2");	
	
	cache("models/char/romulan-m11-rebel-sniper-f.tik");
//secrets
	$secretArtCamberViewmode.viewmode("structuralintegrity");
	thread setOnDamageThread($secretArtCamber,"secretArtCamber");
	
	//update 2015.10.06 make it easier keep these rocks
	/*if(getCvarInt("g_gametype") != 0)
	{//remove in mp, playesr are suppose to cooperate to get these secrets
		$singleplayerSecretHelperRocks.remove();
	}*/
	
	
//container
	$container1Cab.solid();//was notsolid for pathnodes
	$container1CabViewmode.viewmode("structuralintegrity");
//INIZIAL BOX CAPS
	thread boxes_caps_setup();
//bridge 1
	$bridge1ForcefieldClip.solid();
	//thread globalCoop_puzzle_add("bridge1_tower_puzzle","bridge1_towerPuzleSolved",5,'-23181 19512 -620');
	$bridge1_towerConnector.bind($bridge1_towerConnectorOrigin);
	$bridge1_towerConnectorLadder.bind($bridge1_towerConnectorOrigin);
	$bridge1_towerConnectorForcefield.bind($bridge1_towerConnectorOrigin);
	$bridge1_towerConnectorForcefield.hide();
	$bridge1_towerConnectorOrigin.movedown(808);
	$bridge1_towerConnectorOrigin.time(1);
	thread bridge1_powerCouple_setup($bridge1_powerCuple0);
	thread bridge1_powerCouple_setup($bridge1_powerCuple1);
	thread bridge1_powerCouple_setup($bridge1_powerCuple2);
	thread bridge1_powerCouple_setup($bridge1_powerCuple3);
	//make solid, tehy are notsolid to allow pathconnections
	forceFields_activate($bridge1_forceField1);
	forceFields_activate($bridge1_forceField2);
	forceFields_activate($bridge1_forceField3);
	forceFields_activate($bridge1_forceField4);
//minefield blow me up dude spawner
	$beaminRomBlowMeUp.spawneffectname("TransportIn","Romulan");
//INIZIAL COM1
	$comm1Hologram.solid();
	$comm1HologramClip.solid();
	$comm1Hologram2.solid();
	$comm1Hologram2Clip.solid();
	$comm2HologramClip.solid();
	$comm2Hologram.solid();
//INIZIAL BRIDGE2
	$bridge2_ladder2.moveUp(127);
	$bridge2_ladder2.time(.5);
	$bridge2_ladder3.moveUp(254);
	$bridge2_ladder3.time(.5);
	$bridge2_ladder4.moveUp(381);
	$bridge2_ladder4.time(.5);
	$bridge2_bomb.forceAlpha(1);
	$bridge2_bomb.fade(1,0.1);
	$bridge2_bomb.archetype("");
	$bridge2_bomb.contents("-targetable");
	$bomb.contents("-targetable");
	$bomb.archetype("");
	forceFields_activate($bridge2_rff);
//INIZIAL BRIDGE3
	//forceFields_activate($bridge3Forcefield);
	
	//update 2015.10.06 let us make this mission a bit easier, and less time consuming
	$bridge3Forcefield.remove();
	
//Put TrapShere Together
	$trapSphere.bind($trapSphereOrigin);
	$trapSphere.solid();
	$trapSphere.hide();//show when it starts
//inizial force fields (they are not solid for the pathnodes to allow become connected (ai pathfinding))
	forceFields_activate($bridge2Forcefield);
//INIZIAL ROCKS
	float fRock;
	entity eRock,eRockOrigin;
	for(fRock=1;fRock<8;fRock++){
		eRock = getEntity("rock"+fRock);
		if(doesEntityExist(eRock)){
			eRockOrigin = spawn("script_origin","targetname","rock"+fRock+"Origin","origin",""+eRock.getOrigin());
			thread setOnDamageThread(eRock,"rocks_damaged");
			wait(.01);
			eRock.bind(eRockOrigin);
		}
	}
	$rocksViewmode.viewmode("structuralintegrity");
//INIZIAL LANDING PLATFORM1 LIFT
	thread setOnTouchThread($landingPlatform1Lift,"landingPlatform1Lift");
	thread setOnTouchThread($landingPlatform1LiftUp,"landingPlatform1LiftUp");
	thread setOnTouchThread($landingPlatform1LiftDown,"landingPlatform1LiftDown");
	
//setup M-field
	thread mines_setup(20,$minefield1);//#num
	romulanShuttle_setup(0);//#1 -- START WITH 0 for mapping reasons (cloning the object with spacebar)
	$romulanAssaultOrigin0.movetopos($shuttleLandingPlatformOrigin.getOrigin());
	$romulanAssaultOrigin0.rotateydown(180);
	$romulanAssaultOrigin0.time(.5);
}

void romulanAssaultTakeoff()
//romulan Shuttle takes off
{
	spawn("script_model","model","use.tik","origin","-14932 19667 -772","targetname","use1Symbol");
	wait(0.05);
	
//show radar indicator
	$use1Symbol.missionobjective(1);
	
	$romulanAssaultModel0.playsound ( "sound/vehicles/shuttlecraft/shuttle_accelerate.wav",3,4,128);
	$romulanAssaultOrigin0.movetopos($shuttleTakeOff1.getOrigin());
	$romulanAssaultOrigin0.rotateydown(-90);
	$romulanAssaultOrigin0.time(5);
	waitFor($romulanAssaultOrigin0);
	$romulanAssaultOrigin0.movetopos($shuttleTakeOff2.getOrigin());
	$romulanAssaultOrigin0.time(5);
	waitFor($romulanAssaultOrigin0);
	$romulanAssaultModel0.stopsound(3);
//hide shuttle now
	$romulanAssaultOrigin0.hide();
//move out of the map, so players can not shoot it
	$romulanAssaultOrigin0.setvelocity('0 0 1000');
	wait(3);
	$romulanAssaultOrigin0.setvelocity('0 0 0');
}


void towerRightPlayerInside()
{
//MAKE SNIPER WOUNDABLE
	$sniper1.takeDamage();
	$sniper2.takeDamage();
	cache("models/char/romulan-m11-rebel-photon-m.tik");
	thread setOnUseThread($towerRightSwitch,"disableCommunicationDevice1Hologram");
}

void disableCommunicationDevice1Hologram()
//disable the hologram covering the comdevice 1
{
	$disableCommunicationDevice1HologramTrigger.missionobjective(0);
	$modulate1Symbol.origin('-25680 18148 -636');//move modulate symbol
	$modulate1Symbol.show();
	$use1Symbol.origin('-26945 18898 -800');//move usable symbol
	$comm1Display.missionobjective(1);
	entity e,e2;
	e=getCurrentEntity();
	if(doesEntityExist(e))
	{
		e2=e.getLastActivatingEntity();
		if(doesEntityExist(e2))
		{
			e2.playsound("sound/ships/drull/drull-beepaccept.wav",0,1,64);
		}
	}
	
	globalCoop_objectives_update("complete",5,1);
	
	$towerRightPannel.remove();
	$towerRightForcefield.remove();
	spawn("actor","model","models/char/romulan-m11-rebel-photon-m.tik","origin","-25492.00 18406.00 -764.00","angle","90","aggressive","1");
	if(globalCoop_return_integerPlayersQuantity(2) > 1){
		spawn("actor","model","models/char/romulan-m11-rebel-photon-m.tik","origin","-25706.61 18397.39 -678.00","angle","60","aggressive","1");
		if(globalCoop_return_integerPlayersQuantity(2) > 2){
			spawn("actor","model","models/char/romulan-m11-rebel-photon-m.tik","origin","-26289.00 18104.00 -678.00","angle","90","aggressive","1");	
		}
	}
	
	float f1;
	for(f1=0;f1<10;f1++){	
		wait(((f1)/60));
		$comm1Hologram.hide();
		wait(((f1)/60));
		$comm1Hologram.show();
	}
	$comm1HologramClip.remove();
	$comm1Hologram.remove();
}

//disables com1
void disableCommunicationDecive1()
{
	$modulate1Symbol.origin('-27096 28953 -69');//move usable symbol
	$modulate1Symbol.show();
	spawn("script_model","model","bomb.tik","origin","-29423 22112 184","targetname","bomb1Symbol");
	if(!cvar_bool_multiplayer)
	{
		thread globalCommon_AutoSaveWithName("Coop_paradiseIsland2 - ComDevice1");
	}

	thread globalCoop_objectives_update("complete",6,1);//State,Item,ShowIt
	$ipd1.origin('-26277 18905 -573');
	$ipd2.origin('-26277 19009 -573');
	$ipd3.origin('-26278 19114 -573');
	$ipd4.origin('-26279 19209 -573');
	$ipd5.origin('-26389 18865 -573');
	$ipd6.origin('-26389 18969 -573');
	$ipd7.origin('-26390 19074 -573');
	$ipd8.origin('-26391 19169 -573');
	$ipd1.angle(90);
	$ipd2.angle(90);
	$ipd3.angle(90);
	$ipd4.angle(90);
	$ipd5.angle(90);
	$ipd6.angle(90);
	$ipd7.angle(90);
	$ipd8.angle(90);
//mission objective object
	$comm1Display.missionobjective(0);
	$bridge2_bomb.missionobjective(1);
	
	$comm1Display.hide();
	$comm1Display.playSound("sound/ships/romulan/rom_beep_yes.wav",0,1,128);
	$comm1Array.playsound("sound/environment/machine/mech_move2.wav",3,2,500);
	$comm1Array.time(8);
	$comm1Array.moveDown(800);
	wait(2);
	$comm1Display.remove();
	$comDLSorigin.loopsound("sound/environment/machine/lift3_looponly.wav",2,400);
	waitFor($comm1Array);
	$comDLSorigin.stopLoopSound();
	float f1;
	for(f1=0;f1<10;f1++){	
		wait(((f1)/50));
		$comm1Hologram2.hide();
		wait(((f1)/50));
		$comm1Hologram2.show();
	}
	$comm1Hologram2Clip.remove();
	$comm1Hologram2.remove();
	
//enable secound puzzle
	$comm2Display_puzzle.puzzleobject_activate();
	$comm2Display_puzzle.puzzleobject_reset();
}


//player found mi objective bomb
void pickupBomb()
{
	entity e;
	e = getCurrentEntity();
	if(doesEntityExist(e)){
		e.notTriggerable();
		entity e2;
		e2 = e.getLastActivatingEntity();
		if(doesEntityExist(e2)){
			if(e2.getFloatVar("hasBomb") != 1){
				if(!cvar_bool_multiplayer){
					if(globalCoop_player_getLanguage(e2) == "Deu" ){
						centerprint("^5INFO:^8 Sie haben eine Sprengladung aufgenommen!\n");
					}else{
						centerprint("^5INFO:^8 You picked up a Explosive Device!\n");
					}
				}else{
					if(globalCoop_player_getLanguage(e2) == "Deu" ){
						e2.hudprint("^5INFO:^8 Sie haben eine Sprengladung aufgenommen!\n");
					}else{
						e2.hudprint("^5INFO:^8 You picked up a Explosive Device!\n");
					}
				}
				//add hud, showing a bomb on player screen
				globalCoop_huds_Add(e2,"coopbugs_bomb");
				
				e2.setFloatVar("hasBomb",1);
				$bomb.missionobjective(0);
				$bomb.hide();
				wait(1);
			//keep hidden in sp
				if(cvar_bool_multiplayer)
					$bomb.show();
				else
					$use1Symbol.hide();//hide usable now
			}
		}
		wait(.1);
		e.triggerable();
	}
}


void trapSphere()
//let it roll, another trap
{
	thread stalkerSpawn();
	thread setOnTouchThread($trapSphere,"sphereTouched");
	thread setOnBlockThread($trapSphere,"sphereBlocked");
	wait(.1);
	$trapSphereOrigin.rotateX(10);
	$trapSphereOrigin.rotateY(10);
	$trapSphereOrigin.loopSound("sound/environment/rock/rollrock.wav",3,256);
	$trapSphereOrigin.time(7);
	$trapSphereOrigin.moveeast(2936);
	$trapSphere.show();//show it now
	waitFor($trapSphereOrigin);
	$trapSphereOrigin.time(4);
	$trapSphereOrigin.moveeast(1767);
	$trapSphereOrigin.moveDown(415);
	waitFor($trapSphereOrigin);
	$trapSphereOrigin.time(1.2);
	$trapSphereOrigin.moveeast(930);
	$trapSphereOrigin.moveDown(90);
	waitFor($trapSphereOrigin);
	$trapSphereOrigin.rotateX(0);
	$trapSphereOrigin.rotateY(0);
	vector vOrigin;
	vOrigin = $trapSphereOrigin.getOrigin();
	vOrigin_z += -190;//fx-explosion-debris-rocks-dust-gray.tik
	spawn("sfx","model","fx/fx-explosion-debris-rocks-dust-training3.tik","origin",vectorToString(vOrigin),"scale","6");
	spawn("sfx","model","fx/fx-explosion-debris-rocks-dust-gray.tik","origin",vectorToString(vOrigin),"scale","2.5");
	$trapSphereOrigin.stopLoopSound();
	$trapSphereOrigin.playsound("sound/environment/rock/bigrock.wav",0,3,256);
	fSphereNoMoreDanger=1;
	wait(.1);
	$trapSphere.noTouch();
	float fRandom;
	while(doesEntityExist($trapSphere))
	{
		fRandom=randomInt(19);
		fRandom=(fRandom/10);
		fRandom+=.01;
		$trapSphereOrigin.stopLoopSound();
		$trapSphere.hide();
		wait(.09);
		$trapSphereOrigin.loopSound("sound/ships/drull/drull_hologram.wav",1,256);
		$trapSphere.show();
		wait(fRandom);
	}
}


void stalkerSpawn()
{
	//update 2015.10.06 let us make this mission a bit easier, and less time consuming
	//thread stalkerDeath();
	//this is now called by a trigger

	/*
	cache("models/char/alien-type4-predator.tik");
	wait(1);
	entity e;
	e = spawn("actor","model","models/char/alien-type4-predator.tik","origin",""+$bridge3UnlockerSpawn.getOrigin(),"angle","270");
	wait(.2);
	e.killthread("stalkerDeath");
	e.aggressive(1);*/
//new spawn location
	$ipd1.origin('-32283 21260 -200');
	$ipd2.origin('-32184 21260 -200');
	$ipd3.origin('-32070 21260 -200');
	$ipd4.origin('-32283 21160 -200');
	$ipd5.origin('-32184 21160 -200');
	$ipd6.origin('-32070 21160 -200');
	$ipd7.origin('-32184 21060 -200');
	$ipd8.origin('-32070 21060 -200');
	$ipd1.angle(90);
	$ipd2.angle(90);
	$ipd3.angle(90);
	$ipd4.angle(90);
	$ipd5.angle(90);
	$ipd6.angle(90);
	$ipd7.angle(90);
	$ipd8.angle(90);
}

void stalkerDeath()
{
	//update 2015.10.06 let us make this mission a bit easier, and less time consuming
	/*$bridge3Forcefield.stopLoopSound();
	$bridge3Forcefield.remove();
	wait(.5);*/
	
	
//cinematic
	cinematic();
	if(!cvar_bool_multiplayer){//singleplayer
		globalCoop_level_hideAndNotSolid($player);
		$player.nodamage();//damage from (hurt)triggers
	}
	cam_fadeOut(0.25, 0, 0, 0,1);
	wait(.25);
	freezeplayer();
	letterbox(.01);
	
	$cam1.follow($rocksShot,$rocks_bombplanter);
	$cam1.cut();
	cuecamera($cam1);
	cam_fadeIn(0.25, 0, 0, 0,1);
	$rocks_bombplanter.show();
	$rocks_bombplanter.anim("crouch_idle");
	$rocks_bomb.show();
	wait(4.5);
	$rocks_bombplanter.displayEffect("TransportOut","Romulan");
	wait(2);
	cam_fadeOut(0.5, 0, 0, 0,1);
	wait(.5);
	$rocks_bombplanter.remove();
	cam_fadeIn(0.5, 0, 0, 0,1);
	
//end cinematic
	clearletterbox( .01 );
	cueplayer();
	noncinematic();
	releaseplayer();
	if(!cvar_bool_multiplayer){
		globalCoop_level_showAndSolid($player);
		$player.takedamage();
	}

	wait(.5);
	$rocksFallTrigger.triggerable();
	if(!cvar_bool_multiplayer)
	{
		thread globalCommon_AutoSaveWithName("Coop_paradiseIsland2 - Rocks");
	}
}

void giveStaff()
//ow, a secret!
{
	thread globalCoop_player_giveAll("models/weapons/worldmodel-drull-staff.tik",1);
}


void disableCommunicationDecive2()
//disables com2
{
	$use1Symbol.origin('-28858 34255 478');
	$use2Symbol.origin('-27593 34255 478');
	$use1Symbol.show();
	$use2Symbol.show();
	$modulate1Symbol.remove();//remove now, as we have nothing else to modulate left
	if(!cvar_bool_multiplayer)
	{
		thread globalCommon_AutoSaveWithName("Coop_paradiseIsland2 - ComDevice2");
	}
	$comDLSorigin.origin('-27096 28784 -154');
	$comm2Display.missionobjective(0);
	$comm2Display.hide();
	$comm2Display.playSound("sound/ships/romulan/rom_beep_yes.wav",0,1,128);
	$comm2Array.playsound("sound/environment/machine/mech_move2.wav",3,2,500);
	$comm2Array.time(8);
	$comm2Array.moveDown(800);
	wait(2);
	$comm2Display.remove();
	$comm2Array.loopsound("sound/environment/machine/lift3_looponly.wav",2,400);
	waitFor($comm2Array);
	$comm2Array.stopLoopSound();
//update Objectives
	globalCoop_objectives_update("complete",2,1);//State,Item,ShowIt
//spawn castle enemy
	thread castleSpawn();
//disable castle hologram
	float f1;
	for(f1=0;f1<10;f1++){	
		wait(((f1)/60));
		$comm2Hologram.hide();
		wait(((f1)/60));
		$comm2Hologram.show();
	}
	$comm2HologramClip.remove();
	$comm2Hologram.remove();
	$castleSwitchRight.missionobjective(1);
	$castleSwitchLeft.missionobjective(1);
//unlock door
	$castleHeavyDoor.unlock();
}
////////////////////////////////////////////////////////////////////////////////
// EVERYTHING ELSE
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void romulanShuttleUnderAattck()
{
	float fHealth1,fHealth2,fHealth3;
	fHealth1 = $romulanAssaultBody0.getHealth();
	fHealth2 = $romulanAssaultEngineR0.getHealth();
	fHealth3 = $romulanAssaultEngineL0.getHealth();
	if(fHealth2 <= 0){
		//$romulanAssaultEngineR0.selfDetonate();
		wait(.1);
		$romulanAssaultEngineRLeak0.show();
	}
	if(fHealth3 <= 0){
		//$romulanAssaultEngineL0.selfDetonate();
		wait(.1);
		$romulanAssaultEngineLLeak0.show();
	}
	if(fHealth2 <= 0 && fHealth3 <= 0 || fHealth1 <= 0){
		fRomShuttleDestroyed=1;
//blow up shuttle now
		$romulanAssaultOrigin.hide();
		spawn("sfx","model","fx/fx-explosion-radgun-shockwaves.tik","origin",""+$romulanAssaultOrigin.getOrigin(),"scale","2");
	}
}

void assaultShuttleMakeDestructibleAndSetThread(entity e,float fHealth,string sThread)
{
	if(!doesEntityExist(e)){
		print("ERROR: assaultShuttleMakeDestructibleAndSetThread(NULL ENTITY,"+fHealth+","+sThread+")\n");
		return;
	}
	e.health(fHealth);
	e.destructible(1);
	e.triggerondamage(1);
	e.triggerondeath(1);
	e.thread(sThread);
	e.solid();
}

void callThreadSafty(string sThread)
{
	entity e;
	e=spawn("trigger_once","origin","0 0 -99999","thread",sThread);
	wait(.05);
	if(doesEntityExist(e)){
		triggerEntity(e);
	}
}

void setOnUseThread(entity e,string sThread)
{
	if(doesEntityExist(e)){
		e.noUse();
		e.onUse(sThread);
		pause();
	}
}

void setOnDamageThread(entity e,string sThread)
{
	if(doesEntityExist(e)){
		e.noDamage();
		e.onDamage(sThread);
		pause();
	}
}

void setOnTouchThread(entity e,string sThread)
{
	if(doesEntityExist(e)){
		e.noTouch();
		e.onTouch(sThread);
		pause();
	}
}
void setOnBlockThread(entity e,string sThread)
{
	if(doesEntityExist(e)){
		e.noBlock();
		e.onBlock(sThread);
		pause();
	}
}

void sphereTouched()
{
	entity e;
	e = getCurrentEntity();
	if(doesEntityExist(e)){
		e.noTouch();
		entity ePlayer;
		ePlayer = e.getLastActivatingEntity();
		if(doesEntityExist(ePlayer)){
			ePlayer.kill();
		}
		wait(.05);
		if(fSphereNoMoreDanger!=1){
			thread setOnTouchThread($trapSphere,"sphereTouched");
		}
	}
}

void sphereBlocked()
{
	entity e;
	e = getCurrentEntity();
	if(doesEntityExist(e)){
		e.noBlock();
		entity ePlayer;
		ePlayer = e.getLastActivatingEntity();
		if(doesEntityExist(ePlayer)){
			ePlayer.kill();
		}
		wait(.05);
		if(fSphereNoMoreDanger!=1){
			thread setOnBlockThread($trapSphere,"sphereBlocked");
		}
	}
}


void afterSphere()
{
	thread startFallschirmspringer(7,'-32239 19481 2335','-32196 21409 -341',"models/char/romulan-m11-rebel-sniper-f.tik");
	
	//update 2015.10.06 make it easier if the player is alone or just 2 players
	if(globalCoop_return_integerPlayersQuantity(2) > 1){
		thread startFallschirmspringer(8,'-26695 22146 2100','-31194 22154 -350',"models/char/romulan-m11-rebel-sniper-f.tik");
		if(globalCoop_return_integerPlayersQuantity(2) > 2){
			thread startFallschirmspringer(9,'-32173 25608 2100','-32233 22667 -341',"models/char/romulan-m11-rebel-sniper-f.tik");
		}
	}
}

vector randomVectorIndside(entity e)
{
	vector vReturn;
	if(doesEntityExist(e)){
		vector	vOrigin,vMaxs,vMins;
		vOrigin = e.getOrigin();
		vReturn = vOrigin;
		vMaxs = e.getMaxs();
		vMins = e.getMins();
		if(randomInt(50) < 24){vReturn_x += randomInt(vMins_x);}
		else{vReturn_x += randomInt(vMaxs_x);}
		if(randomInt(50) > 24){vReturn_y += randomInt(vMins_y);}
		else{vReturn_y += randomInt(vMaxs_y);}
		vReturn_z = (vOrigin_z + vMaxs_z);
	}else{
		print("randomVectorIndside(NULL_ENTITY)\n");
	}
	return vReturn;
}

void landingPlatform1Lift()
//trigger the platform lift
{
	if(fLandingPlatform1Lift==0){
		thread landingPlatform1LiftDown();
	}
	else if(fLandingPlatform1Lift==1){
		thread landingPlatform1LiftUp();
	}
}
void landingPlatform1LiftDown()
{
	$landingPlatform1LiftUp.noTouch();
	$landingPlatform1LiftDown.noTouch();
	$landingPlatform1Lift.noTouch();
	if(fLandingPlatform1Lift==0){
		thread setOnBlockThread($landingPlatform1Lift,"killPlatform1LiftBlocker");//crush blockers
		fLandingPlatform1Lift=3;//busy
		$landingPlatform1LiftDown.playSound("sound/doors/temple_door1.wav",0,1,64);
		$landingPlatform1LiftDown.time(2);
		$landingPlatform1LiftDown.moveDown(8);
		waitFor($landingPlatform1LiftDown);
		$landingPlatform1Lift.loopSound("sound/doors/lrg_01_start.wav",1,64);
		$landingPlatform1Lift.time(3);
		$landingPlatform1Lift.moveDown(370);
		waitFor($landingPlatform1Lift);
		$landingPlatform1Lift.stopLoopSound();
		$landingPlatform1Lift.playSound("sound/doors/lrg_01_stop.wav",0,1,64);	
		$landingPlatform1LiftDown.time(2);
		$landingPlatform1LiftDown.moveUp(8);
		$landingPlatform1LiftDown.playSound("sound/doors/temple_door1.wav",0,1,64);
		waitFor($landingPlatform1LiftDown);

		fLandingPlatform1Lift=1;//allow up
		thread setOnTouchThread($landingPlatform1Lift,"landingPlatform1Lift");
		thread setOnTouchThread($landingPlatform1LiftUp,"landingPlatform1LiftUp");
	}
}
void landingPlatform1LiftUp()
{
	$landingPlatform1LiftUp.noTouch();
	$landingPlatform1LiftDown.noTouch();
	$landingPlatform1Lift.noTouch();
	if(fLandingPlatform1Lift==1){
		thread setOnBlockThread($landingPlatform1Lift,"killPlatform1LiftBlocker");//crush blockers
		fLandingPlatform1Lift=3;//busy
		$landingPlatform1LiftUp.playSound("sound/doors/temple_door1.wav",0,1,64);
		$landingPlatform1LiftUp.time(2);
		$landingPlatform1LiftUp.moveDown(8);
		waitFor($landingPlatform1LiftUp);
		$landingPlatform1Lift.loopSound("sound/doors/lrg_01_start.wav",1,64);
		$landingPlatform1Lift.time(3);
		$landingPlatform1Lift.moveUp(370);
		waitFor($landingPlatform1Lift);
		$landingPlatform1Lift.stopLoopSound();
		$landingPlatform1Lift.playSound("sound/doors/lrg_01_stop.wav",0,1,64);		
		$landingPlatform1LiftUp.time(2);
		$landingPlatform1LiftUp.moveUp(8);
		$landingPlatform1LiftUp.playSound("sound/doors/temple_door1.wav",0,1,64);
		waitFor($landingPlatform1LiftUp);
		fLandingPlatform1Lift=0;//allow down
		thread setOnTouchThread($landingPlatform1Lift,"landingPlatform1Lift");
		thread setOnTouchThread($landingPlatform1LiftDown,"landingPlatform1LiftDown");
	}
}

float rRndIntMinMax(float fMinrange,float fMaxRange)
{
	fMaxRange = randomInt(fMaxRange);
	if(fMaxRange < fMinrange)
		fMaxRange = fMinrange;
	return fMaxRange;
}

void submergeLift()
{
vector vOrigin;

	$submergeLift.time(3);
	$submergeLift.moveDown(673);
	$submergeLift.loopSound("sound/doors/lrg_01_start.wav",1,64);
	waitFor($submergeLift);
	$submergeLift.stopLoopSound();
	$submergeLift.playSound("sound/impact/water/water_enter.wav",0,1,128);
	vOrigin = $submergeLift.getOrigin();
	spawn("script_model","model","fx_splashsmall.tik","scale","3","origin",vectorToString(vOrigin));
	wait(.1);
	$submergeLift.loopSound("sound/doors/lrg_01_start.wav",1,64);
	$submergeLift.time(3);
	$submergeLift.moveDown(330);//513
	waitFor($submergeLift);
	$submergeLift.stopLoopSound();
	$submergeLift.playSound("sound/doors/lrg_01_stop.wav",0,1,64);
//$submergeLift.playSound("sound/impact/water/water_leave.wav",0,1,128);
}

void container_spawnWave1()
//Introduce quads
{
//new spawn location
	$ipd1.origin('-29600 29217 -150');
	$ipd2.origin('-29600 29030 -150');
	$ipd3.origin('-29600 28854 -150');
	$ipd4.origin('-29500 29217 -150');
	$ipd5.origin('-29500 29030 -150');
	$ipd6.origin('-29500 28854 -150');
	$ipd7.origin('-29400 29217 -150');
	$ipd8.origin('-29400 29030 -150');
	$ipd1.angle(0);
	$ipd2.angle(0);
	$ipd3.angle(0);
	$ipd4.angle(0);
	$ipd5.angle(0);
	$ipd6.angle(0);
	$ipd7.angle(0);
	$ipd8.angle(0);
	
	cinematic();
	if(!cvar_bool_multiplayer){//singleplayer
		globalCoop_level_hideAndNotSolid($player);
		$player.nodamage();//damage from (hurt)triggers
	}
	cam_fadeOut(0.5, 0, 0, 0,1);
	wait(.5);
	freezeplayer();
	letterbox(.01);
	
	//make it a easy kill this really goes on for to long
	$container_spawn1_monster.health(350);
	$container_spawn1_monster.scale(0.5);
	
	$cam1.follow($containerShot1,$container_spawn1_monster);
	$cam1.cut();
	cuecamera($cam1);
	cam_fadeIn(0.25, 0, 0, 0,1);
//destroy container caps
	thread setOnDamageThread($container1Cab,"containerDestroy");
	wait(.2);
	$container1Cab.selfdetonate();
	wait(.5);
	$container_spawn1_monster.ai_off();
	$container_spawn1_monster.headwatch($cam1);
	$container_spawn1_monster.anim("walk");
	wait(2);
	$container_spawn1_monster.anim("idle");
	$container_spawn1_monster.anim("base_to_attackpattern03");
	wait(2);
	$container_spawn1_monster.anim("idle");
	cam_fadeOut(0.5, 0, 0, 0,1);
	$container_spawn1_monster.resethead();
	wait(.5);
	$container_spawn1_monster.ai_on();
	globalCoop_level_removePath($containerShot1);
	$container_spawn1_monster.updatebosshealth(0,0);
	
//end cinematic
	clearletterbox( .01 );
	cueplayer();
	noncinematic();
	releaseplayer();
	if(!cvar_bool_multiplayer){
		globalCoop_level_showAndSolid($player);
		$player.takedamage();
	}
	
	cam_fadeIn(0.25, 0, 0, 0,1);
}


void killPlatform1LiftBlocker()
//kills who ever is blocking the lift
{
	entity e;
	e = getCurrentEntity();
	if(doesEntityExist(e)){
		entity e2;
		e2=e.getLastActivatingEntity();
		if(doesEntityExist(e2)){
			e2.kill();
		}
		wait(.05);
		thread setOnBlockThread(e,"killPlatform1LiftBlocker");//crush blockers
	}
}

void killActivator()
//kills who ever was activating that trigger or script object
{
	entity e;
	e = getCurrentEntity();
	if(doesEntityExist(e)){
		entity e2;
		e2=e.getLastActivatingEntity();
		if(doesEntityExist(e2)){
			e2.kill();
		}
	}
}

void lockedDoor()
//make it sound like the door is signaling that it is locked
{
	entity eTrigger;//create a variable to store a object inside
	eTrigger = getCurrentEntity();//get the level object that is currently processed, wich is the trigger which did call this theread, otherwise there will be no entity
	if(doesEntityExist(eTrigger)){//if there is a entity (the trigger which did call this thread)
		eTrigger.playSound("sound/doors/door_locked.wav",0,1,64);
	}
}


void usless()
//PLAY A SOUND WHEN A OBJECT IS USED SO THE PLAYER KNOWS IT IS USELESS FOR THE MISSION
//->	Q: WHY DO WE NOT USE A SOUND SPEAKER AND SET IT AS TARGET FOR THE TRIGGER?
//->	A: For each object we need a trigger, and a sound entity, both entities will
//be send over the internet to each player, for example:
//60 Objects makes 120 Objects(trigger_use & sound_speaker) send to the player,
//if we now make the trigger call this thread the trigger will play the given sound,
//so we can save one entity, this redouces the network traffic about 50%
{
//create entity variable
	entity e;
//grab the entity which is currently processed(the trigger which called this thread) and put it into "entity-variable e"
	e=getCurrentEntity();
//if the object in the entity variable exists in the level
	if(doesEntityExist(e)){
//DISABLE THE TRIGGER
		e.notTriggerable();
//play this sound on the CHANNEL[body] with volume 1 of 9 and start to fade(if a player is 512 units away he/she mostlikley will not hear the sound anymore) the sound at 64 untits distance
		e.playSound("sound/ships/drull/drull_accessdenies.wav",0,1,64);
//WAIT FOR THE SOUND TO END AND SOME EXTRA TIME
		wait(3);
//ENABLE THE TRIGGER AGAIN!
		e.triggerable();
	}
}

float isPowerOfGiven(float fValue,float fGiven)
//----------------------------------------------------------------------
// RETURN TRUE OR FALSE IF THE VALUE IS A POWER OF THE GIVEN
//----------------------------------------------------------------------
{
	float fValueCalc;
	fValueCalc = (fValue / fGiven);
	fValueCalc = floor(fValueCalc);
	if((fValueCalc * fGiven) == fValue){
		return 1;
	}
	return 0;
}


void secretArtCamber()
//this is a secret that gets revealed when player damages the wall
{
	spawn("sfx","model","fx/fx-explosion-rockdebris-brown-falling-sparse.tik","origin",$secretArtCamber.getOrigin()+"","scale","3");
	$secretArtCamber.remove();
	$secretArtCamberViewmode.remove();
}



void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
	if(!cvar_bool_multiplayer)
	{
		spawn ( "trigger_changelevel", "targetname", "trigger_endlevel", "map", "secret3" );
		wait ( .5 );
		trigger ( "$trigger_endlevel" );
		wait(4);
		stuffcmd ( "disconnect\n" );
		return;
	}
	
	//hzm coop mod chrissstrahl - added for coop diagnose mode
	if(getCvarInt("coop_dev") == 1){
		if(getCvarInt("coop_diag") == 1){
			thread globalCoop_mission_completed("coop_noscript_example");
			return;
		}
	}
	//eof hzm
	
	$castleLiftTrigger1.missionobjective(0);
	globalCoop_objectives_update("complete",7,1);//State,Item,Show
	wait(3);	
	
	thread globalCoop_mission_completed("coop_equinox");
}

