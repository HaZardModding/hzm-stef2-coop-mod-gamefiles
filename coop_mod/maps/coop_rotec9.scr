void main ();
void setupEvoSuit();
void setupAirlock();
void setupActor(entity eActor,string sAnim);
void setupClips();
void setupActors();
void setupArrays();
void coop_klingonSeller();
void coop_attrexianFriend();
void coop_klingonFriend();
void coop_klingonPowerCup();
void coop_klingonDistNode();
void coop_airlockInsideUse();
void coop_airlockOutsideUse();
void omagSpottet();

float MAX_ARRAY_WINGS = 3;
float MAX_ARRAYS = 6;
//float MAX_FWD_SPEED = 99999;

//ACTOR_FLAG_USE_GRAVITY
//STEPMOVE_BLOCKED_BY_DOOR -> _isBlockedByDoor
//STEPMOVE_BLOCKED_BY_FALL
//STEPMOVE_STUCK
//vectorleft( Vector vector ) -> Returns the left vector of the vector. 

//#include "maps/scrtools/scriptingtools.scr"
//#include "maps/scrtools/noscript.scr"

#include "coop_mod/matrix/main.scr"
#include "coop_mod/matrix/evosuit.scr"
void	coop_endLevel();

void ffTouchedClearShader(entity ePlayer)
{
	wait(1);
	if(doesEntityExist(ePlayer)){
		ePlayer.clearcustomshader("electriclines");
	}
}

void ffTouched()
{
	entity e;
	e = getCurrentEntity();
	if(doesEntityExist(e)){
		e.noTouch(); //make stop calling this thread

		float fTurnNonSol;
		float fRunningWithScissors=1;
		while(fRunningWithScissors){
			fRunningWithScissors = 0;
			if(doesEntityExist(e)){
				entity ePlayer;
				float fPlayerIdInUse;
				for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
					ePlayer = getentity("*"+ fPlayerIdInUse);
					if(doesEntityExist(ePlayer)){
						//check all players touching this trigger
						if(globalCoop_check_isEntityInsideOfEntity(ePlayer,e,1)){
							fRunningWithScissors=1;
							if(ePlayer.getHealth() > 0 && ePlayer.isSpectator() != 1){
								if(coop_evosuit_playerEquiped(ePlayer) == 1 || coop_evosuit_spaceWorthy(ePlayer)){
									e.notSolid();
									ePlayer.setcustomshader("electriclines");
									thread ffTouchedClearShader(ePlayer);
									print("NOT SOLID\n");
								}
							}
						}
					}
				}
			}
			else{
				print("ENTITY MISSING\n");
				return;
			}
			globalCoop_main_waitAFrame();
		}
		thread globalCoop_level_onTouch(e,"ffTouched");
		e.solid();
		print("MADE SOLID\n");
	}
}

void main ()
{
	coop_string_weapon2 = "models/weapons/worldmodel-Phaser-stx.tik";
	coop_string_weapon1 = "models/weapons/worldmodel-Tricorder-stx.tik";

	setupEvoSuit();
	
	setupAirlock();

	//$world.physicsvar ( "gravity" , 250 );
	$world.physicsvar ( "maxspeed" , 250 );
	$world.physicsvar ( "airaccelerate" , 1.5 );
	//MAX_FWD_SPEED = $world.getPhysicsVar("maxspeed");
	
	setupClips();
	setupActors();
	setupArrays();
	
	//set forcefield frequency
	$klingonForcefieldShuttlebay.setobjectparms(66.9,0);
	
	$klingonAirductAreaportal.closePortal();
	
	$klingonPowerCup.contents("+shootable");
	$klingonDistNode.contents("+shootable");
	thread globalCoop_level_onDamage($klingonPowerCup,"coop_klingonPowerCup");
	thread globalCoop_level_onDamage($klingonDistNode,"coop_klingonDistNode");
	
	
//REMOVE EM FOR EVO SUIT TESTING
	$klingonAirlockActor0.remove();
	$klingonAirlockActor1.remove();
	$KlingonAirlockActPlayerClip.remove();
	$coop_klingonAirlockActTrigger.remove();
	
	
	entity e;
	string sForceFieldName;
	float iForceFieldCurNum = 13;
	
	sForceFieldName = "forcefield0Collision";
	print("ForceField: Running setup for "+sForceFieldName+"\n");
	e = getEntity(sForceFieldName +""+ iForceFieldCurNum);
	while(doesEntityExist(e)){
		e.solid(); //makesolid - was notsolid to allow ai passing trough
		thread globalCoop_level_onTouch(e,"ffTouched");
		iForceFieldCurNum++;
		e = getEntity(sForceFieldName +""+ iForceFieldCurNum);
		
		e.hide();
	}
	print("ForceField: SETUP - $"+sForceFieldName+""+iForceFieldCurNum+" not found, assuming setup is complete.\n");
	
	return;
	while(1)
	{
		//$klingonForcefieldShuttlebay.setobjectparms(66.9,0);
		$klingonForcefieldShuttlebay.mask("-weaponclip");
		wait(4);
		//$klingonForcefieldShuttlebay.setobjectparms(33,0);
		$klingonForcefieldShuttlebay.mask("+weaponclip");
		wait(4);
	}
}

void setupEvoSuit()
{
	/*SET VALUES FOR EVOSUIT SCRIPT SPECIFIC FOR THIS MAP*/
	__EVOSUIT_VEC_AIRLOCK_DECOMPRESS_PUSH			= '0 500 150';
	
	__EVOSUIT_INT_SUFFICATE_WAIT					= 8;
	__EVOSUIT_INT_SUFFICATE_HURT					= 7;
	__EVOSUIT_FLT_AIRSUPPLY_CONSUMPTION				= 0.01;
	
	__EVOSUIT_FLT_SPACE_GRAVITY						= 0.15;
	
	__EVOSUIT_INT_THRUSTER_COOLDOWN_TIME			= 10;
	__EVOSUIT_INT_THRUSTER_MOVE_COST				= 0.5;
	__EVOSUIT_INT_THRUSTER_MOVE_UP_COST				= 1.5;
	__EVOSUIT_INT_THRUSTER_MOVE_DOWN_COST			= 1;
	__EVOSUIT_INT_THRUSTER_MOVE_FORCE				= 50;
	__EVOSUIT_INT_THRUSTER_EMERGENCY_COST			= 40;
}

void setupAirlock()
{
	//open airlock so we can see the actor departing
	$klingonAirlockDoorInside.open($world);
	$klingonAirlockSteamTopEffect.hide();
	$KlingonAirlockActPlayerClip.solid(); //prevents playa from blocking door
}

void setupActor(entity eActor,string sAnim)
{
	eActor.mass(99999);
	eActor.pushable(0);
	if(sAnim != ""){
		//eActor.ai_off(); //allready done in radiant
		eActor.anim(sAnim);
	}
}

void setupClips()
{
//$playerclipRomulanArea.solid();
	setupActor($romulan0,"");
	setupActor($romulan1,"");
	setupActor($romulan2,"");
	
//$playerclipKlingonArea.solid();
	setupActor($klingon1,"");
	setupActor($klingon0,"");
	
	$klingonBorgFF.solid();
}

void setupActors()
{
	/*
	$borg_1_1_hibernate.anim ( "alcove_idle" );
	$borg_1_1_hibernate.setactorflag ( "inalcove" , 1 );
	$borg_1_1_hibernate.settendency( "hibernate" , 1.0 );
	$borg_1_1_hibernate.settendency( "patrol" , 0.0 );
	$borg_1_1_hibernate.settendency( "work" , 0.0 );
	$borg_1_1_hibernate.setnodeid( 3 );
	$borg_1_1_hibernate.groupdeaththread( "borgGroup1Dead" );
	
	$powerCoupling2.contents( "+shootable" );
	*/
	

	globalCoop_armory_putAwayWeapon($attrexianFriend);
	thread globalCoop_level_onUse($attrexianFriend,"coop_attrexianFriend");
	
	$omag.anim("ent-table-laptop-gesture");
	
	//in alcove
	setupActor($klingon2,"");
	$klingon2.flags( "-notarget" );
	
	setupActor($klingonSeller,"bar_sitting_forward");
	setupActor($klingonBarkeep,"");
	setupActor($omag,"bar_sitting_left");
	setupActor($klingonAndorianOmag,"bar_sitting_left");
	setupActor($klingonRomBar0,"bar_sitting_left");
	setupActor($klingonRomBar1,"bar_sitting_right");
	setupActor($klingonDrone0,"assimilate_hold");
	setupActor($klingonDrone1,"idle_armup.ska");
	setupActor($klingonDrone2,"idle_armup.ska");
	setupActor($klingonDrone3,"assimilate_hold");
	
	setupActor($klingonDrone6,"alcove_idle");
	$klingonDrone6.setactorflag ( "inalcove" , 1 );
	$klingonDrone6.settendency( "hibernate" , 1.0 );
	
	//needs to be executed in this order
	globalCoop_armory_putAwayWeapon($klingonFriend);
	thread globalCoop_level_onUse($klingonFriend,"coop_klingonFriend");
	setupActor($klingonFriend,"bar_standing");

	entity eActor;
	float fNum;
	for(fNum=0;fNum<6;fNum++){
		eActor = getEntity("klingonChat"+fNum);
		setupActor(eActor,"");
	}
}

void setupArrays()
//PUT TOGETHER THE ARRAYS FROM THEIR PARTS
{
	float iArray,iWing,iAngle;
	entity eWing,eWingOrigin,eArrayOrigin;
	for(iArray=1;iArray<=MAX_ARRAYS;iArray++){
		for(iWing=0;iWing<MAX_ARRAY_WINGS;iWing++){
			eWing		= getEntity("sensorArray"+iArray+"Wing"+iWing);
			eWingOrigin	= getEntity("sensorArray"+iArray+"Wing"+iWing+"Origin");
			eWing.bind(eWingOrigin);
			eArrayOrigin= getEntity("sensorArray"+iArray+"Origin"+iWing);

			if(iWing == 2){ iAngle = 180; }
			else if(iWing == 1){ iAngle = 45; }
			else{ iAngle = 315; }
			
			eWingOrigin.time(0.1);
			eWingOrigin.moveto(eArrayOrigin);
			eWingOrigin.rotateYdown(iAngle);
			
			//print("sensorArray"+iArray+"Wing"+iWing+" ("+iAngle+")\n");
			//print("sensorArray"+iArray+"Wing"+iWing+"Origin ("+iAngle+")\n");
			//print("sensorArray"+iArray+"Origin"+iWing+" ("+iAngle+")\n");
			//print("----------------------\n");
		}
		wait(0.05);
	}
}

void puzzleStart()
{
	entity ePuzz,ePlayer;
	ePuzz = getCurrentEntity();
	ePlayer = ePuzz.getLastActivatingEntity();
	coop_evosuit_haltStat(ePlayer,1);
}

void puzzleAborted()
{
	entity ePuzz,ePlayer;
	ePuzz = getCurrentEntity();
	ePlayer = ePuzz.getLastActivatingEntity();
	coop_evosuit_haltStat(ePlayer,0);
}

void puzzleSolved()
{
	entity ePuzz,ePlayer;
	ePuzz = getCurrentEntity();
	ePlayer = ePuzz.getLastActivatingEntity();
	coop_evosuit_haltStat(ePlayer,0);
}

void puzzleFailed()
{
	entity ePuzz,ePlayer;
	ePuzz = getCurrentEntity();
	ePlayer = ePuzz.getLastActivatingEntity();
	coop_evosuit_haltStat(ePlayer,0);
}

void playerManageEvoSuit(entity ePlayer)
//allowes player to sort of manouver in space with trusters up and down
{
return;
//ePlayer.hudprint("playerManageEvoSuit 1\n");
	vector vVelocity,vVelocityNew;
	float iStatVal = -1;
	float iLastStatVal = 123;
	float iCoolDownTimmer = 0;
	float iUpCost = 1.5;
	float iForwardCost = 0.5;
	float fRecharge = -0.5;
	float iAirSupply,fAirSupplyLastHurt;
	float bAirSupplyStopSound=1;
	float iLastAirSupply;
	float iAirSupplyConsumptionRate;

	ePlayer.addhud("cooptimerred");
	sendClientCommand(ePlayer,"set coop_timerRed Thrusters Temp");
	
	ePlayer.setFloatVar("endEvo",0);
	ePlayer.gravity(0.15);
	
	while(doesEntityExist(ePlayer)){	
		//GRAB CURRENT VELOCITY
		vVelocity = ePlayer.getVelocity();
		vVelocityNew = vVelocity;
		
		float fHealth;
		fHealth = ePlayer.getHealth();
		
		if(fHealth > 0 && ePlayer.getFloatVar("endEvo") != 1){
			if(iAirSupply <= 0){
				if((fAirSupplyLastHurt + 5) < getLevelTime()){
					fHealth = (fHealth - 10);
					if(ePlayer.getHealth() > fHealth){ ePlayer.pain(1,ePlayer,2); }
					if(fHealth <= 0){
						ePlayer.kill();
						fHealth = 0;
					}
					ePlayer.health(fHealth);
					
					fAirSupplyLastHurt=getLevelTime();
					ePlayer.stoploopsound();
					bAirSupplyStopSound=1;
				}
			}else if(bAirSupplyStopSound){
				fAirSupplyLastHurt=getLevelTime();
ePlayer.loopsound("sound/player/player_rebreath.wav",1,96);
			}
		}else{
			ePlayer.removehud("cooptimerred");
			ePlayer.removehud("cooptimerblue");
			ePlayer.stoploopsound();
			ePlayer.gravity(1);
//ePlayer.hudprint("playerManageEvoSuit 2\n");
			return;
		}
		
		if(iStatVal < 100 && ePlayer.isplayeronground() == 0){
			if(ePlayer.checkJump()){
				if(vVelocity_z < 600){ //cap max upwards velocity for thrusters
					vVelocityNew_z += 50; 
					iStatVal = (iStatVal + iUpCost);
				}
			}
			else if(ePlayer.checkCrouch()){
				if(vVelocity_z > -300){ //cap max downwards velocity for thrusters
					if(vVelocity_z > 0 ){
						vVelocityNew_z -= 50;
						iStatVal = (iStatVal + iUpCost/2);
					}else{
						vVelocityNew_z -= 30;
						iStatVal = (iStatVal + (iUpCost/1));
					}
				}
				/*
				float fPhy;
				vector vAngles;
				fPhy = $world.getPhysicsVar("gravity");
				vAngles = ePlayer.getViewAngles();
				ePlayer.hudprint("getPhysicsVar velocity: "+fPhy+" ("+vAngles+")\n");
				*/
			}
			
			if(ePlayer.checkForward()){
				iStatVal = (iStatVal + iForwardCost);
			}else if(ePlayer.checkBackward()){
				iStatVal = (iStatVal + iForwardCost);
			}
			
			if(ePlayer.checkLeft()){
				iStatVal = (iStatVal + iForwardCost);
			}else if(ePlayer.checkRight()){
				iStatVal = (iStatVal + iForwardCost);
			}
		}
		
		//make sure we don't go out of bounds
		if(iStatVal > 100){ iStatVal = 100;	}
		else if(iStatVal < 0){ iStatVal = 0;}
		if(iAirSupply < 0){iAirSupply = 0;}
		else if(iAirSupply > 100){iAirSupply = 100;}
		
		//thrusters
		if(iStatVal != iLastStatVal && ePlayer.getFloatVar("coop_evosuit_haltStat") == 0){
			ePlayer.setstat( "generic",iStatVal);
		}
		//air supply
		if(iAirSupply != iLastAirSupply){
			ePlayer.setstat( "mp_generic1",iAirSupply);
		}
		iLastStatVal = iStatVal;
		iLastAirSupply = iAirSupply;

		//no thrusters used - recharge
		if(iLastStatVal == iStatVal){
			//have cooldown on recharge, once it is empty
			if(iStatVal == 100 && iCoolDownTimmer < 20){
				if(iCoolDownTimmer == 0){
					ePlayer.hudprint("Thrusters need to Cooldown!\n");
				}
				iCoolDownTimmer++;
			}else{
				iStatVal = (iStatVal + fRecharge);
				iCoolDownTimmer = 0;
			}
		}		
iAirSupply = (iAirSupply + iAirSupplyConsumptionRate);
		
		//SET NEW VELOCITY
		if(vVelocityNew != vVelocity){
			ePlayer.setVelocity(vVelocityNew);
		}
		wait(0.05);
	}
}	

/*
void coop_airlockCheckPlayer(entity ePlayer)
{
	if(ePlayer.getFloatVar("coop_airlockCheckPlayer") == 1){
//ePlayer.hudprint("coop_airlockCheckPlayer 0\n");
		return;
	}
	
	ePlayer.setFloatVar("coop_airlockCheckPlayer",1);
	float fExit=0;
	vector vPlayerOrigin;
	
	while(fExit == 0)
	{
		wait(0.05); //wait at the beginning to avoid blocking this to be started again
		
		fExit=1;
		
		if(doesEntityExist(ePlayer)){
//ePlayer.hudprint("coop_airlockCheckPlayer 1\n");
			if(ePlayer.getHealth() > 0){
//ePlayer.hudprint("coop_airlockCheckPlayer 2\n");
				if(!globalCoop_check_playerSpectator(ePlayer)){
					vPlayerOrigin = ePlayer.getOrigin();
					//check if player is outside airlock height or below
					if(vectorGetZ(vPlayerOrigin) < 16 || vectorGetZ(vPlayerOrigin) > 224 || vectorGetY(vPlayerOrigin) > 2800){

//ePlayer.setFloatVar("endEvo",1);
//ePlayer.hudprint("coop_airlockCheckPlayer 3\n");

						coop_evosuit_playerSetSpace(ePlayer,1);
						
						
						//ePlayer.gravity(0.25);
						//playerManageEvoSuit(ePlayer);
						//ePlayer.setFloatVar("coop_airlockCheckPlayer",0);
						
						
//ePlayer.hudprint("coop_airlockCheckPlayer 4\n");
						return;
					}
				}
			}
		}
	}

	if(doesEntityExist(ePlayer)){
		ePlayer.setFloatVar("coop_airlockCheckPlayer",0);
	}
}
*/

void coop_klingonAirlockBoxes()
{
	if(doesEntityExist($klingonAirlockBoxes)){
		if($klingonAirlockBoxes.getFloatVar("flownAway") == 0){
			$klingonAirlockBoxes.setFloatVar("flownAway",1);
			
			$klingonAirlockBoxes.time(1);
			$klingonAirlockBoxes.moveEast(-80);
			$klingonAirlockBoxes.moveNorth(30);
			$klingonAirlockBoxes.moveUp(20);
			wait(0.95);
			$klingonAirlockBoxes.rotateX(randomint(5));
			$klingonAirlockBoxes.rotateY(randomint(5));
			$klingonAirlockBoxes.rotateZ(randomint(5));
			$klingonAirlockBoxes.time(1.5);
			$klingonAirlockBoxes.moveNorth(151);
			wait(1.45);
			vector vVel;
			vVel = $klingonAirlockBoxes.getVelocity();
			
			waitFor($klingonAirlockBoxes);
			$klingonAirlockBoxes.setVelocity(vVel);
			wait(120);
			if(doesEntityExist($klingonAirlockBoxes)){
				$klingonAirlockBoxes.remove();
			}
		}
	}
}

void coop_airlockOutsideUse()
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		eTrigger.notTriggerable();

		$klingonPressureLightsWhite.hide();
		$klingonPressureLightsRed.show();
		$world.light_intensity("klingonPressureLightsWhite",0);
		$world.light_intensity("klingonPressureLightsRed",1);
		
		//wait for door to close and lock
		globalCoop_level_waitForDoorToClose($klingonAirlockDoorInside,1);
		
		float fBlinkiBlink;
		float fOn;
		for(fBlinkiBlink=0;fBlinkiBlink<9;fBlinkiBlink++){
			if(globalCoop_check_isPowerOfGiven(fBlinkiBlink,2)){
				fOn = 1;
			}
			else{
				fOn=0;
			}
			wait(0.25);
			$world.light_intensity("klingonPressureLightsRed",fOn);
		}
		
		$klingonAirlockDoorOutside.unlock();
		$klingonAirlockDoorOutside.open($world);
		$klingonAirlockDoorOutside.playsound( "sound/environment/wind/wind_vacuum.wav", 6, .6, 256 );
		entity eDecompressionEffect;
		eDecompressionEffect = spawn("fx/fx-explosion-ice-gas-large.tik","origin","833 2683 120","angle","90");
		
		thread coop_klingonAirlockBoxes();
		
//-------------------------------------
//EVOSUIT DECOMPRESS EFFECTS
//-------------------------------------
thread coop_evosuit_airlockDecompress($coop_evosuit_airlockInsideTrigger);
//-------------------------------------
		
		wait(1);
		
		$KlingonAirlockInsideUse.triggerable();
		
		wait(2);
		if(doesEntityExist(eDecompressionEffect)){ eDecompressionEffect.remove(); }
	}
}

void coop_airlockInsideUse()
{
	entity eTrigger;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger)){
		eTrigger.notTriggerable();
		
		globalCoop_level_waitForDoorToClose($klingonAirlockDoorOutside,1);
		wait(0.5);
		
		//$klingonAirlockSteamTopEffect.scale(1.7);
		$klingonAirlockSteamTopEffect.show();
		
		wait(2);
		
		$klingonAirlockSteamTopEffect.hide();
		
		$klingonPressureLightsRed.hide();
		$klingonPressureLightsWhite.show();
		$world.light_intensity("klingonPressureLightsRed",0);
		$world.light_intensity("klingonPressureLightsWhite",1);
		
//-------------------------------------
//EVOSUIT COMPRESS EFFECTS
//-------------------------------------
thread coop_evosuit_airlockCompress($coop_evosuit_airlockInsideTrigger);
//-------------------------------------
		
		wait(0.5);
		
		$klingonAirlockDoorInside.unlock();
		$klingonAirlockDoorInside.open($world);
		wait(1);
		$KlingonAirlockOutsideUse.triggerable();
	}
}


void coop_klingonSeller()
{
	centerprint("Klingon Seller: Blah - buy batleth\n");
}

void coop_attrexianFriend()
{
	$attrexianFriend.nouse();
	centerprint("Attr Friend: lets find that klingon...\n");
	wait(1);
	thread globalCoop_level_onUse($attrexianFriend,"coop_attrexianFriend");
}

void coop_klingonFriend()
{
	$klingonFriend.nouse();
	centerprint("Friend: lets go to the bar...\n");
	wait(1);
	thread globalCoop_level_onUse($klingonFriend,"coop_klingonFriend");
}

void coop_klingonAirlockAct()
{
	$klingonAirlockActor0.animateonce("cin-m3_pointing");
	$klingonAirlockActor1.anim("walk_fast_armup");
	wait(1.25);
	$klingonAirlockDoorInside.close();
	wait(3);
	$KlingonAirlockActPlayerClip.remove(); //clip that prevents playa from blocking doorz
	$klingonAirlockActor0.remove();
	$klingonAirlockActor1.remove();
}

void coop_klingonPowerCup()
{
	/*
	//--- set the explosion spawner to spawn an explosion and trigger it
	$dis_node1_spawn.modelname ( "fx/fx-explosion-distnode.tik" );
	$dis_node1_spawn.spawntargetname ( "dis_node1_boom" );
	trigger ( "$dis_node1_spawn" );
	wait( .1 );
	$dis_node1_spawn.remove();
	*/
	
	trigger("$klingonBorgGroupTrig_aion");
	wait(0.1);
	trigger("$klingonBorgGroupTrig_aggressive");
	
	$klingonBorgFF.remove();

	$klingonPowerCup.noDamage();
	$klingonPowerCup.model("models/enviro/borg-sphere_powercup_powercup_damaged.tik");
	
	entity eEffect;
	eEffect = spawn("Object","model","fx/fx-explosion-plasmacon-red.tik","scale","0.25","origin",""+$klingonPowerCup.getOrigin());
	wait(2);
	if(doesEntityExist(eEffect)){
		eEffect.remove();
	}
}

void coop_klingonDistNode()
{
	$klingonDistNode.noDamage();
	$klingonDistNode.model("models/enviro/borg-sphere_distnode_distnode_damaged.tik");

	entity eEffect;
	eEffect = spawn("Object","model","fx/fx-explosion-distnode.tik","scale","0.25","origin",""+$klingonDistNode.getOrigin());
	wait(2);
	if(doesEntityExist(eEffect)){
		eEffect.remove();
	}
	
	//disable all borg on the klingon station
	/*entity eActor;
	float fNum;
	for(fNum=0;fNum<7;fNum++){
		eActor = getEntity("klingonDrone"+fNum);
		if(doesEntityExist(eActor)){
			//eActor.settendency("disable",1);
			eActor.ai_on();
		}
	}*/
	
	//disable all borg on the klingon station
	wait(0.3);
	trigger("$klingonBorgGroupTrig_disable");	
}

void omagSpottet()
{
	/*
	$omag.anim("idle");
	entity ePlayer;
	ePlayer = globalCoop_return_playerClosestActive($omag);
	$omag.turntowardsentity(ePlayer);
	wait(0.25);
	$omag.displayEffect("TransportOut","Idryll");
	$omag.notsolid();
	wait(2.5);
	$omag.remove();
	wait(7);
	
	*/
	
	$klingonFerengieShipMonsterclip.remove();
	$klingonFerengieShip.bind($klingonFerengieShipOrigin);
	$klingonFerengieShipClip.bind($klingonFerengieShipOrigin);
	
	$klingonFerengieShipOrigin.moveEast(-500);
	//$klingonFerengieShipOrigin.moveNorth(30);
	$klingonFerengieShipOrigin.time(10);
	
	wait(9.9);
	$klingonFerengieShipOrigin.rotateXDown(90);
	$klingonFerengieShipOrigin.moveEast(-200);
	$klingonFerengieShipOrigin.time(5);
}

void coop_endLevel()
//------------------------------------------------------------------------------
//Level end
//------------------------------------------------------------------------------
{
//credits, and history of map
//mark this map as completed to the scripts (can not fail anymore)
	globalCoop_mission_accomplished();
	globalCoop_main_globalCommand("nodamage");
	
//credits, and history of map
	thread globalCoop_player_transmittToAll("exec cfg/maps/coop_rotec/cCredits.cfg\n");
	globalCoop_huds_AddAll("coop_cCredits");
	wait(10);
	
	//end server if in singleplayer
	if(getCvarInt("g_gametype") == 0){
		stuffcmd("disconnect\n");
		return;
	}
	
//load next map
	thread globalCoop_mission_completed("coop_aftermath1");
}